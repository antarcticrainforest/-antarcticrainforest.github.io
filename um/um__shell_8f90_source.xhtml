<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>UM General Atmosphere: /home/wilfred/PhD/UM/src/control/top_level/um_shell.f90 Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="unified_model_logo_2.jpeg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">UM General Atmosphere
   &#160;<span id="projectnumber">8.6</span>
   </div>
   <div id="projectbrief">UK Met Offices Unified Model</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_b81b067251166617f9d0a8c0cfc3a4a9.xhtml">control</a></li><li class="navelem"><a class="el" href="dir_b65d766d7948d607099cfdc8ce198b76.xhtml">top_level</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">um_shell.f90</div>  </div>
</div><!--header-->
<div class="contents">
<a href="um__shell_8f90.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">SUBROUTINE </span><a class="code" href="um__shell_8f90.xhtml#a8c9bd25362824a5c301376ecb5ed5c27" title="Subroutine: UM_SHELL !&gt; ">um_shell</a></div><div class="line"><a name="l00017"></a><span class="lineno"><a class="line" href="um__shell_8f90.xhtml#a8c9bd25362824a5c301376ecb5ed5c27">   17</a></span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacedynamics__input__mod.xhtml" title="Input control for dynamics. Input control for dynamics. ">dynamics_input_mod</a><span class="keywordtype">, ONLY</span> :                                               &amp;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;      l_endgame</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespaceum__config.xhtml" title="Purpose: Provide top level interface to model/application initialisation. ">um_config</a><span class="keywordtype">, ONLY</span> :                                                        &amp;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;      <a class="code" href="namespaceum__config.xhtml#a1a0748027c4ccea31f2682bb9de31c5d">appinit</a>,                                                                 &amp;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;      <a class="code" href="namespaceum__config.xhtml#ac5427c3f1a863c5f6dd9dfa217a8039c">appterminate</a>,                                                            &amp;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;      exe_um</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;  <span class="keywordtype">USE </span>mpl<span class="keywordtype">, ONLY</span> :                                                              &amp;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;      mpl_max_processor_name,                                                  &amp;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;      mpl_thread_multiple,                                                     &amp;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;      mpl_thread_serialized,                                                   &amp;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;      mpl_thread_funneled,                                                     &amp;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;      mpl_thread_single</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#if defined(OASIS3)</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor"></span>  <span class="keywordtype">USE </span><a class="code" href="namespaceoasis3__atmos__init__mod.xhtml" title="For further details please refer to the file COPYRIGHT.txt which you should have received as part of ...">oasis3_atmos_init_mod</a></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor"></span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#if defined(MCT)</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor"></span>  <span class="keywordtype">USE </span><a class="code" href="namespaceoasis3__split__comm__mod.xhtml">oasis3_split_comm_mod</a><span class="keywordtype">, ONLY</span> : <a class="code" href="namespaceoasis3__split__comm__mod.xhtml#a844ab290de76579ab5fe1957391b020b" title="*****************************COPYRIGHT**************************************** For further details pl...">oasis3_split_comm</a></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor"></span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacefilenamelength__mod.xhtml" title="Module for allocation of Filename length. Module for allocation of Filename length. ">filenamelength_mod</a><span class="keywordtype">, ONLY</span> :                                               &amp;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;      <a class="code" href="namespacefilenamelength__mod.xhtml#a1f0ba129cfb2cc488313a144ac04a0e8" title="The module sets the max length of a filename in the UM. ">filenamelength</a>, <a class="code" href="namespacefilenamelength__mod.xhtml#a8177061a4b6fb9315caa567403d4e6ed">datawnamelength</a>, <a class="code" href="namespacefilenamelength__mod.xhtml#a3d4e821fc38da34881eafb7980a13863">runidnamelength</a></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  <span class="keywordtype">USE </span>atm_fields_bounds_mod</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacehalo__exchange.xhtml" title="This file belongs in section: MPP. ">halo_exchange</a><span class="keywordtype">, ONLY</span> :                                                    &amp;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;      <a class="code" href="namespacehalo__exchange.xhtml#af52ab6876f6621383276b0292294edec" title="============================================================================== Purpose: Initialise th...">halo_exchange_init</a></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;  <span class="keywordtype">USE </span>parkind1<span class="keywordtype">, ONLY</span>: jprb, jpim</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  <span class="keywordtype">USE </span>yomhook<span class="keywordtype">, ONLY</span>: lhook, dr_hook</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespaceio.xhtml" title="Code Owner: See Unified Model Code owners HTML page. ">io</a><span class="keywordtype">,                 ONLY</span> :                                               &amp;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;      <a class="code" href="namespaceio.xhtml#adad84d622385969e1f68576533df4e84">ioinit</a>,                                                                  &amp;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;      <a class="code" href="namespaceio.xhtml#afacb7a27599213b35b7ae353edcaefed">ioshutdown</a>,                                                              &amp;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;      <a class="code" href="namespaceio.xhtml#ade07b9db8d4954fd605a7212d5f46e2a">file_close</a>,                                                              &amp;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;      <a class="code" href="namespaceio.xhtml#ac523e2c0480c522622bf5ef27880cc5d">is_unit_open</a></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespaceios__client__queue.xhtml" title="Code Owner: See Unified Model Code owners HTML page. ">ios_client_queue</a></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespaceios.xhtml" title="Code Owner: See Unified Model Code owners HTML page. ">ios</a></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespaceios__constants.xhtml" title="Code Owner: See Unified Model Code owners HTML page. ">ios_constants</a><span class="keywordtype">,      ONLY</span> :                                               &amp;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;      <a class="code" href="namespaceios__constants.xhtml#af39244ed4d6e0a085bade72226e84e99" title="IO Server - parameters. ">ios_maxservers</a></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespaceios__init.xhtml" title="This file belongs in section: C96. ">ios_init</a><span class="keywordtype">,           ONLY</span> :                                               &amp;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;      <a class="code" href="namespaceios__init.xhtml#ac442cb95ffe7e56fcfa8c5a9e7340d7e">ios_setup</a>,                                                               &amp;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;      <a class="code" href="namespaceios__init.xhtml#a7d87e40776b8aa7095ebef26dccf90bb">ios_run</a></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  <span class="keywordtype">USE </span>ios_stash_common<span class="keywordtype">,   ONLY</span> :                                               &amp;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;      isusingasyncstash,                                                       &amp;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;      isusingasyncdumps</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  <span class="keywordtype">USE </span>ios_stash<span class="keywordtype">, ONLY</span> :                                                        &amp;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;      ios_stash_client_fini</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  <span class="keywordtype">USE </span>ios_model_geometry<span class="keywordtype">, ONLY</span> :                                               &amp;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;      ios_client_geometry_init</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacemppio__job__control.xhtml" title="Code Owner: See Unified Model Code owners HTML page. ">mppio_job_control</a><span class="keywordtype">,  ONLY</span> :                                               &amp;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;      <a class="code" href="namespacemppio__job__control.xhtml#aff76d4cc1bc8c4d02745a858f0b87fdd" title="Open the pipe file. ">jobcntrlinit</a>,                                                            &amp;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;      <a class="code" href="interfacemppio__job__control_1_1jobcntrl.xhtml" title="API for model code. Send a command/string to the pipe file. ">jobcntrl</a></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacemppio__job__control__common.xhtml" title="Code Owner: See Unified Model Code owners HTML page. ">mppio_job_control_common</a><span class="keywordtype">, ONLY</span> :                                         &amp;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;      <a class="code" href="namespacemppio__job__control__common.xhtml#a2fa247e3aa392a8a752c304b940163b7" title="Parameterisations of commands for the server. ">jc_wakeup</a></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacemppio__file__utils.xhtml" title="Code Owner: See Unified Model Code owners HTML page. ">mppio_file_utils</a><span class="keywordtype">, ONLY</span> :                                                 &amp;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;      <a class="code" href="namespacemppio__file__utils.xhtml#a28cec7ec3f7ede6744167b6a3337cddc">mppio_file_utils_init</a></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacemodel__file.xhtml" title="A simple data module containing variables related to STASH buffering. ">model_file</a><span class="keywordtype">,     ONLY</span> :                                                   &amp;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;      model_file_managed,                                                      &amp;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;      model_file_close</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacempp__conf__mod.xhtml">mpp_conf_mod</a><span class="keywordtype">,       ONLY</span> :                                               &amp;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;      <a class="code" href="namespacempp__conf__mod.xhtml#a3135261d08847126dbe31a2f4b0defd8" title="Variables declared with a sensible default. ">extended_halo_size_ew</a>,                                                   &amp;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;      <a class="code" href="namespacempp__conf__mod.xhtml#a7aef0484c97bf86110f1d0b72571dac7">extended_halo_size_ns</a></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespaceereport__mod.xhtml" title="This file belongs in section: Misc. ">ereport_mod</a><span class="keywordtype">, ONLY</span> : <a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a>,<a class="code" href="namespaceereport__mod.xhtml#a6678743bf463d33136a7e593320e5537">ereport_finalise</a></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  <span class="keywordtype">USE </span>um_parvars</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacedecomp__db.xhtml" title="This file belongs in section: MPP. ">decomp_db</a></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespaceumprintmgr.xhtml" title="This file belongs in section: Misc. ">umprintmgr</a></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  <span class="keywordtype">USE </span>gcom_mod<span class="keywordtype">, ONLY</span> : gc_alltoall_multi, gc_alltoall_version</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacedecomp__params.xhtml" title="Magic numbers defining decompositions Magic numbers defining decompositions. ">decomp_params</a><span class="keywordtype">, ONLY</span> :                                                    &amp;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;      <a class="code" href="namespacedecomp__params.xhtml#afabb52a8e8d6cdfe3f3366dd918058d8" title="decomps for atmos ">decomp_standard_atmos</a>,                                                   &amp;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;      <a class="code" href="namespacedecomp__params.xhtml#a6e9b4c1d028a2d082bf3b915033d7982" title="not set decomp ">decomp_unset</a></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacerimtypes.xhtml" title="This file belongs in section: MPP. ">rimtypes</a></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacelbc__mod.xhtml" title="This file belongs in section: MPP. ">lbc_mod</a></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespaceum__input__control__mod.xhtml" title="*****************************COPYRIGHT******************************** *****************************C...">um_input_control_mod</a><span class="keywordtype">,  ONLY</span>:  model_domain, <a class="code" href="namespaceum__input__control__mod.xhtml#a62ceaf089fed3e4873157d8c3ad12b60">l_oasis</a>  use <a class="code" href="namespaceppxlook__mod.xhtml" title="Code Owner: See Unified Model Code Owners HTML page. ">ppxlook_mod</a>, only : ppxrecs</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespaceversion__mod.xhtml" title="This file belongs in section: Top Level This file belongs in section: Top Level. ">version_mod</a><span class="keywordtype">, ONLY</span> :                                                      &amp;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;      <a class="code" href="namespaceversion__mod.xhtml#a7d9c5770bb9771e656578339d26a5924" title="Max. no. of time profiles in STASHC. ">nproftp</a>, <a class="code" href="namespaceversion__mod.xhtml#af720fc4252f553c422ec0fba06753d1e" title="Max. no. of domain profiles/levels lists in STASHC (used for both) ">nprofdp</a>, <a class="code" href="namespaceversion__mod.xhtml#aa57d346338f1347990c1e313a85aa655" title="Max. no. of useage profiles in STASHC. ">nprofup</a>, <a class="code" href="namespaceversion__mod.xhtml#a62bd84c9ebbcbcf72ac3cf7047e3231f">ndiagpm</a>, <a class="code" href="namespaceversion__mod.xhtml#ad76d53e9e50e60fc79ac08444f028b3a" title="Max. no. of output times tables in STASHC. ">ntimep</a>, <a class="code" href="namespaceversion__mod.xhtml#adfa65587d0281ba806bb48ef02e9e87d" title="Max. total no. of time series in STASHC. ">ntimserp</a>,                    &amp;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;      <a class="code" href="namespaceversion__mod.xhtml#a98dcae777c99ce994efe9a005b2f8de1" title="Max. no. of levels in a levels list. ">nlevp</a>, <a class="code" href="namespaceversion__mod.xhtml#a9cc67dd2c53a11dd253246b3b6c25e1c" title="Max. no. of pseudo levels in a pseudo levels list. ">npslevp</a>, <a class="code" href="namespaceversion__mod.xhtml#aa3bf3b74ff33bf50be9c44a175689fe8" title="Max. no. of pseudo levels lists in STASHC. ">npslistp</a>, <a class="code" href="namespaceversion__mod.xhtml#abd99f2ba8a96da14bdb7d17ad85c7f50" title="OUTFILE_E must be consistent with NUNITS in CHSUNITS.h Ranges of output file numbers. ">outfile_s</a>, <a class="code" href="namespaceversion__mod.xhtml#aa34f58d5ac46da5762a9a8ea7c7f76f2">outfile_e</a></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacesubmodel__mod.xhtml" title="A module to contain information about submodels A module to contain information about submodels...">submodel_mod</a><span class="keywordtype">, ONLY</span>: <a class="code" href="namespacesubmodel__mod.xhtml#a5a10dac97f579ecbf0c1c1879901e2e0" title="Sequence number of internal model indexed by internal model identifier required to map from id to STA...">internal_model_index</a>, <a class="code" href="namespacesubmodel__mod.xhtml#ae72bf5d9dbbc3029ed7107c47edd59e3">a_im</a></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacechsunits__mod.xhtml" title="copied from include file chsunits.h ">chsunits_mod</a><span class="keywordtype">, ONLY</span> : <a class="code" href="namespacechsunits__mod.xhtml#af6e26d3a6a1fedf0b44203712a772f8e">nunits</a></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacetypstsz__mod.xhtml" title="This file belongs in section: Top_level This file belongs in section: Top_level. ">typstsz_mod</a><span class="keywordtype">, ONLY</span>: <a class="code" href="namespacetypstsz__mod.xhtml#a22abd732ae34990d4f231238da47866f">n_ppxrecs</a></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespaceum__version__mod.xhtml" title="This file belongs in section: Top Level This file belongs in section: Top Level. ">um_version_mod</a><span class="keywordtype">, ONLY</span>: <a class="code" href="namespaceum__version__mod.xhtml#a0cdb44c7c3db81652a639f36100bfa39" title="identify this code version in the code. ">umvn</a></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">!  Local parameters</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  <span class="keywordtype">CHARACTER(LEN=*)</span> RoutineName</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  <a class="code" href="namespaceukca__radaer__struct__mod.xhtml#a7b11899c3ce190bb3d00d3a633af780e">parameter</a>(routinename = <span class="stringliteral">&#39;UM_SHELL&#39;</span>)</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">!  Local variables</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  <span class="keywordtype">INTEGER</span> icode       <span class="comment">! Work - Internal return code</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  <span class="keywordtype">INTEGER(KIND=integer32)</span> :: icode_OASIS <span class="comment">! 32-bit OASIS return code  INTEGER istatus     ! RETURN STATUS FROM OPEN</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;  <span class="keywordtype">INTEGER</span> loop_pe</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  <span class="keywordtype">INTEGER</span> loop_pe_start</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  <span class="keywordtype">INTEGER</span> loop_pe_stop</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  <span class="keywordtype">CHARACTER(LEN=filenamelength)</span> ::  filename  = <span class="stringliteral">&quot;dummy filename&quot;</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;               <span class="comment">! RETURN FILENAME FROM GET_FILE</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  <span class="keywordtype">CHARACTER(LEN=512)</span> :: cmessage <span class="comment">! Work - Internal error message</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  <span class="keywordtype">INTEGER</span> :: atm_nprocx          <span class="comment">! number of procs EW for atmosphere</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  <span class="keywordtype">INTEGER</span> :: atm_nprocy          <span class="comment">! number of procs NS for atmosphere</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  <span class="keywordtype">INTEGER</span> :: err                 <span class="comment">! error return from FORT_GET_ENV</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  <span class="keywordtype">INTEGER</span> :: nproc_um_npes       <span class="comment">! Total number of atmos PEs (i.e. EW*NS)</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  <span class="keywordtype">CHARACTER(LEN=10)</span> c_thread          <span class="comment">! to get nproc_x and nproc_y from</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  <span class="keywordtype">CHARACTER(LEN=8)</span> c_nproc            <span class="comment">! to get nproc_x and nproc_y from</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;   <span class="comment">! environment variables.</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;   <span class="comment">! to hold the name of the parallel</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  <span class="comment">! executable script</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  <span class="keywordtype">CHARACTER(LEN=filenamelength)</span>  :: dummy_env = <span class="stringliteral">&quot;dummy path&quot;</span>       <span class="comment">! file to write stdout to</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  <span class="keywordtype">CHARACTER(LEN=filenamelength)</span>  :: stdout_filename = <span class="stringliteral">&quot;dummy stdout&quot;</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;   <span class="comment">! base of filename</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;  <span class="keywordtype">CHARACTER(LEN=filenamelength)</span>  :: stdout_basename = <span class="stringliteral">&quot;dummy stdout&quot;</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;   <span class="comment">! File to write STASH requests to</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  <span class="keywordtype">CHARACTER(LEN=filenamelength)</span>  :: stash_filename  = <span class="stringliteral">&quot;dummy stash&quot;</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;   <span class="comment">! value of $DATAW</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  <span class="keywordtype">CHARACTER(LEN=datawnamelength)</span> :: dataw_char = <span class="stringliteral">&quot; &quot;</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  <span class="comment">! value of $RUNID</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  <span class="keywordtype">CHARACTER(LEN=runidnamelength)</span> :: runid_char = <span class="stringliteral">&quot; &quot;</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  <span class="keywordtype">INTEGER</span> um_nam_max_seconds</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;  <span class="keywordtype">CHARACTER(LEN=8)</span> c_nam_max_seconds</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">!  Configuration-dependent sizes for dynamic arrays</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="preprocessor">#include &quot;typsize.h&quot;</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="preprocessor"></span><span class="comment">!</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">!  Super array sizes for dynamic allocation in U_MODEL/U_MODEL_4A</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="preprocessor">#include &quot;typszsp.h&quot;</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;typszspa.h&quot;</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;typszspc.h&quot;</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="preprocessor"></span><span class="comment">!</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">!L</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">!  Localized sizes for ocean decomposition:</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;  <span class="keywordtype">INTEGER</span>                                                                      &amp;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;      row_length_oce , rows_oce</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;  <span class="keywordtype">INTEGER</span> sect_err, rnl_err, um_rnl_skip</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  <span class="keywordtype">CHARACTER(LEN=8)</span> c_um_rnl_skip</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;  <span class="keywordtype">CHARACTER(LEN=8)</span> ch_date2   <span class="comment">!  Date returned from date_and_time</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  <span class="keywordtype">CHARACTER(LEN=10)</span> ch_time2  <span class="comment">!  Time returned from date_and_time</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">!   Fortran unit numbers</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;  <span class="keywordtype">INTEGER</span>                      :: nftppxref</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  <span class="keywordtype">INTEGER</span>                      :: nftstmstu</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;  <span class="keyword">data</span> nftppxref/22/,nftstmstu/2/</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">! Variables needed to close all the files</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;  <span class="keywordtype">INTEGER</span>                      :: i</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">! Variables for IO Server setup</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;  <span class="keywordtype">LOGICAL</span>                      :: isIOServer</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  <span class="keywordtype">INTEGER</span>                      :: numIOServers</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  <span class="keywordtype">INTEGER</span>                      :: errorCode</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;  <span class="keywordtype">CHARACTER(LEN=32)</span>            :: c_io_pes</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  <span class="keywordtype">CHARACTER(LEN=10)</span>            :: thread_level_setc</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;  <span class="keywordtype">INTEGER</span>                      :: thread_level_set</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;  <span class="keywordtype">INTEGER</span> :: dummy_comm     <span class="comment">! Dummy communicator for OASIS</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;  <span class="keywordtype">CHARACTER(LEN=mpl_max_processor_name)</span> :: env_myhost</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;  <span class="keywordtype">INTEGER</span>                               :: env_myhost_len</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;  <span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;  <span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  <span class="keywordtype">REAL(KIND=jprb)</span>               :: zhook_handle</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;  <span class="keywordtype">REAL(KIND=jprb)</span>               :: zhook_rendez_vous</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;  <span class="keywordtype">LOGICAL(KIND=jpim)</span>            :: luser_comm</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">!      IF (lhook) CALL dr_hook(RoutineName,zhook_in,zhook_handle)</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;  cmessage = <span class="stringliteral">&#39; &#39;</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  numioservers = 0  <span class="comment">! Initialise IO server variable</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment">! For IBM platform, turn on signal handling</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="preprocessor">#if defined(IBM)</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="preprocessor"></span><span class="comment">!$OMP PARALLEL</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  <span class="keyword">CALL </span>signal_trap(0)</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment">!$OMP END PARALLEL</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="preprocessor"></span><span class="comment">!L-! 1.0 Initialise Message Passing Libraries</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment">! Get the atmosphere decomposition</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;  <span class="keyword">CALL </span>fort_get_env(<span class="stringliteral">&#39;UM_THREAD_LEVEL&#39;</span>,15,c_thread,10,err)</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;  <span class="keywordflow">IF</span> (err  /=  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<span class="stringliteral">&#39;Warning: Environment variable UM_THREAD_LEVEL has &#39;</span> //       &amp;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <span class="stringliteral">&#39;not been set.&#39;</span>,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<span class="stringliteral">&#39;Setting thread_level to multiple&#39;</span>,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    thread_level_setc = <span class="stringliteral">&#39;MULTIPLE&#39;</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;  <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keyword">READ</span>(c_thread,<span class="stringliteral">&#39;(A10)&#39;</span>) thread_level_setc</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;  <span class="keywordflow">SELECT CASE</span> (thread_level_setc)</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;  <span class="keywordflow">CASE</span> (<span class="stringliteral">&#39;MULTIPLE&#39;</span>)</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    thread_level_set = mpl_thread_multiple</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;  <span class="keywordflow">CASE</span> (<span class="stringliteral">&#39;SERIALIZED&#39;</span>)</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    thread_level_set = mpl_thread_serialized</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;  <span class="keywordflow">CASE</span> (<span class="stringliteral">&#39;FUNNELED&#39;</span>)</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    thread_level_set = mpl_thread_funneled</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;  <span class="keywordflow">CASE</span> (<span class="stringliteral">&#39;SINGLE&#39;</span>)</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    thread_level_set = mpl_thread_single</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="keywordflow">  CASE default</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(A,A,A)&#39;</span>) <span class="stringliteral">&#39;Warning: Thread level &#39;</span>, thread_level_setc,    &amp;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        <span class="stringliteral">&#39; not recognised, setting to MULTIPLE.&#39;</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    thread_level_set = mpl_thread_multiple</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="keywordflow">  END SELECT</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;  <span class="keyword">CALL </span>fort_get_env(<span class="stringliteral">&#39;UM_ATM_NPROCX&#39;</span>,13,c_nproc,8,err)</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;  <span class="keywordflow">IF</span> (err  /=  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    cmessage = <span class="stringliteral">&#39;Warning: Environment variable UM_ATM_NPROCX has &#39;</span>              &amp;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        //<span class="stringliteral">&#39;not been set. Setting nproc_x to 1.&#39;</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="comment">! Can&#39;t ereport before gc_init, so writing to stdout manually</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>( cmessage,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    atm_nprocx=1</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;  <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keyword">READ</span>(c_nproc,<span class="stringliteral">&#39;(I4)&#39;</span>) atm_nprocx</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  <span class="keyword">CALL </span>fort_get_env(<span class="stringliteral">&#39;UM_ATM_NPROCY&#39;</span>,13,c_nproc,8,err)</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;  <span class="keywordflow">IF</span> (err  /=  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    cmessage = <span class="stringliteral">&#39;Warning: Environment variable UM_ATM_NPROCY has &#39;</span>              &amp;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        //<span class="stringliteral">&#39;not been set. Setting nproc_y to 1.&#39;</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <span class="comment">! Can&#39;t ereport before gc_init, so writing to stdout manually</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(cmessage,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    atm_nprocy=1</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;  <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keyword">READ</span>(c_nproc,<span class="stringliteral">&#39;(I4)&#39;</span>) atm_nprocy</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment">! Calculate total number of atmos processors required:</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;  nproc_um_npes = atm_nprocx * atm_nprocy</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="comment">! The total number of processors required (nproc_max) is determined</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment">!  by a call to gc_init/gc_init_thread:</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="preprocessor">#if defined(OASIS3)</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="preprocessor"></span>-<span class="comment">!L</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment">!L Call routine to initialise OASIS</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment">!L</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;-  comm_in=-999</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  <a class="code" href="namespaceum__input__control__mod.xhtml#a62ceaf089fed3e4873157d8c3ad12b60">l_oasis</a>=.true.</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;      <span class="comment">! The key thing here is to get hold of the</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;      <span class="comment">! communicator defined for us by PRISM and then</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;      <span class="comment">! use that in GCOM rather than letting GCOM define</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;      <span class="comment">! its own MPI_COMM_WORLD.</span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;  <span class="keyword">CALL </span><a class="code" href="namespaceoasis3__atmos__init__mod.xhtml#a91c8e3d16a34ed96bc209ec37c2be74a">oasis3_atmos_init</a>(comm_in,icode,cmessage)</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;      <span class="comment">! Check that MPI (or other) communication method</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;      <span class="comment">! is initialised. Discard the communicator returned</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;      <span class="comment">! from this call since we&#39;ll use an OASIS defined one.</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;  <span class="keyword">CALL </span>gc_init_intro_thread(dummy_comm, thread_level_set)</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;      <span class="comment">! Do all the initialisation with the correct communicator</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;  <span class="keyword">CALL </span>gc_init_final(<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>,<a class="code" href="namespaceum__parcore.xhtml#ad078cc7202ef25b751b3e270bd3c4287">nproc_max</a>,comm_in)</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(A,I7,I7,I8)&#39;</span>) <span class="stringliteral">&quot;UM_SHELL: GCOM for OASIS&quot;</span>, <a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>,            &amp;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;      <a class="code" href="namespaceum__parcore.xhtml#ad078cc7202ef25b751b3e270bd3c4287">nproc_max</a>,comm_in</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;  <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;      <span class="comment">! Use a sub-communicator for DrHook</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;  luser_comm = .true.</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;  <span class="comment">! We need to find out which coupling fields to define, which of them  ! are input and which output, which grids they&#39;re on, etc.  ! We do this as soon as we possibly can because this infomation is  ! potentially needed by IOS processes for synchronisation purposes and  ! because if we do it here, we have the opportunity to employ unit 5  ! (since it&#39;s a namelist read) before the main UM code needs to access  ! it for the main UM control variables.</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment">! DEPENDS ON: OASIS_read_translist</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;  <span class="keyword">CALL </span><a class="code" href="oasis__read__translist_8f90.xhtml#adbfbfdc28917f80f9ab01e2f17a9ca38" title="*****************************COPYRIGHT**************************************** **********************...">oasis_read_translist</a>()</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(routinename,zhook_in,zhook_handle,                   &amp;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;      luser_comm,int(comm_in,kind=jpim))</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="preprocessor"></span><span class="comment">! Standard UM GCOM initialisation when OASIS is not used</span></div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;  <span class="keyword">CALL </span>gc_init_thread(<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>,<a class="code" href="namespaceum__parcore.xhtml#ad078cc7202ef25b751b3e270bd3c4287">nproc_max</a>, thread_level_set)</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;      <span class="comment">! Use DrHook over global communicator</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(routinename,zhook_in,zhook_handle)</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="preprocessor"></span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment">! Get number of I/O PEs from the environment</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;  <span class="keyword">CALL </span>fort_get_env(<span class="stringliteral">&#39;FLUME_IOS_NPROC&#39;</span>,15,c_io_pes,5,err)</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;  <span class="keywordflow">IF</span> (err /= 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        <span class="comment">! If not specified, try to work out a valid number</span></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    numioservers=<a class="code" href="namespaceum__parcore.xhtml#ad078cc7202ef25b751b3e270bd3c4287">nproc_max</a>-nproc_um_npes</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    icode=-10</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="keyword">WRITE</span>(cmessage,<span class="stringliteral">&#39;(A,A,I4)&#39;</span>)                                                 &amp;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        <span class="stringliteral">&#39;FLUME_IOS_NPROC environment variable not set&#39;</span>,                        &amp;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        <span class="stringliteral">&#39;, I/O PE count set to &#39;</span>,numioservers</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a>(routinename,icode,cmessage)</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;  <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <span class="keyword">READ</span> (c_io_pes,<span class="stringliteral">&#39;(I5)&#39;</span>) numioservers</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;  <span class="keywordflow">IF</span> ( numioservers &lt; 0 .OR. numioservers &gt; <a class="code" href="namespaceios__constants.xhtml#af39244ed4d6e0a085bade72226e84e99" title="IO Server - parameters. ">ios_maxservers</a> ) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    icode=-10</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="keyword">WRITE</span>(cmessage,<span class="stringliteral">&#39;(A,I4)&#39;</span>)                                                   &amp;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        <span class="stringliteral">&#39;I/O PE count is outside allowed range: &#39;</span>,numioservers</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a>(routinename,icode,cmessage)</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        <span class="comment">! try to work out a valid number</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    numioservers=<a class="code" href="namespaceum__parcore.xhtml#ad078cc7202ef25b751b3e270bd3c4287">nproc_max</a>-nproc_um_npes</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="keywordflow">IF</span> ( numioservers &lt; 0 .OR. numioservers &gt; <a class="code" href="namespaceios__constants.xhtml#af39244ed4d6e0a085bade72226e84e99" title="IO Server - parameters. ">ios_maxservers</a> ) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;      icode=10</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;      <span class="keyword">WRITE</span>(cmessage,<span class="stringliteral">&#39;(A)&#39;</span>)                                                    &amp;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;          <span class="stringliteral">&#39;A valid I/O PE count could not be set&#39;</span></div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;      <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a>(routinename,icode,cmessage)</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;  <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<span class="stringliteral">&#39;Enabling &#39;</span>//trim(<a class="code" href="interfaceumprintmgr_1_1str.xhtml">str</a>(numioservers))//<span class="stringliteral">&#39; I/O PEs&#39;</span>,             &amp;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        pe=0,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="comment">! Check the breakdown of processors requested by environment variables</span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="comment">! (UM_ATM_NPROCX * UM_ATM_NPROCY + FLUME_IOS_NPROC) matches the total</span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="comment">! number obtained by GCOM</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;  <span class="keywordflow">IF</span> (<a class="code" href="namespaceum__parcore.xhtml#ad078cc7202ef25b751b3e270bd3c4287">nproc_max</a> /= nproc_um_npes + numioservers) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    icode = 100</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="keyword">WRITE</span>(cmessage,<span class="stringliteral">&#39;(A,i7,A,i7,A)&#39;</span>)                                            &amp;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        <span class="stringliteral">&#39;UM started on &#39;</span>, <a class="code" href="namespaceum__parcore.xhtml#ad078cc7202ef25b751b3e270bd3c4287">nproc_max</a>,                                           &amp;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        <span class="stringliteral">&#39; PEs but &#39;</span>,                                                           &amp;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        nproc_um_npes+numioservers,                                            &amp;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        <span class="stringliteral">&#39; asked for. Please adjust decomposition&#39;</span></div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a>(routinename,icode,cmessage)</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;  <span class="keywordflow">IF</span> (<a class="code" href="namespaceum__parcore.xhtml#ad078cc7202ef25b751b3e270bd3c4287">nproc_max</a>  &lt;   0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>( <span class="stringliteral">&#39;Parallel initialisation failed&#39;</span>,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;  <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="comment">! Get values of DATAW and RUNID from environment</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <span class="keyword">CALL </span>fort_get_env(<span class="stringliteral">&#39;DATAW&#39;</span>,5,dataw_char,<a class="code" href="namespacefilenamelength__mod.xhtml#a8177061a4b6fb9315caa567403d4e6ed">datawnamelength</a>,err)</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="keywordflow">IF</span> (err  /=  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;      cmessage = <span class="stringliteral">&#39;UMSHELL : Failed to get value of $DATAW&#39;</span></div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;      <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <span class="keyword">CALL </span>fort_get_env(<span class="stringliteral">&#39;RUNID&#39;</span>,5,runid_char,<a class="code" href="namespacefilenamelength__mod.xhtml#a3d4e821fc38da34881eafb7980a13863">runidnamelength</a>,err)</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    <span class="keywordflow">IF</span> (err  /=  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;      cmessage = <span class="stringliteral">&#39;UMSHELL : Failed to get value of $RUNID&#39;</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;      <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="comment">! Send output to unique filename on every PE</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <span class="keyword">CALL </span>fort_get_env(<span class="stringliteral">&#39;UM_STDOUT_FILE&#39;</span>,14,stdout_basename,                     &amp;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        <a class="code" href="namespacefilenamelength__mod.xhtml#a1f0ba129cfb2cc488313a144ac04a0e8" title="The module sets the max length of a filename in the UM. ">filenamelength</a>,err)</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="keywordflow">IF</span> (err  /=  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="comment">! Environment variable UM_STDOUT_FILE has not been set, so we will</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="comment">! construct a default stdout_basename of $DATAW/pe_output/$RUNID.fort6.pe</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;      stdout_basename=trim(dataw_char)//<span class="stringliteral">&#39;/pe_output/&#39;</span>//                        &amp;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;          trim(runid_char)//<span class="stringliteral">&#39;.fort6.pe&#39;</span></div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    stash_filename=trim(dataw_char)//<span class="stringliteral">&#39;/&#39;</span>// trim(runid_char)//                  &amp;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        <span class="stringliteral">&#39;.stash&#39;</span></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <span class="keywordflow">IF</span> (<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a> == 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;      <span class="keyword">CLOSE</span>(200)</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;      <span class="keyword">OPEN</span>(200,<a class="code" href="parlbcs_8h.xhtml#a9bdcf7736b544227cbd66a99e5332d4d">file</a>=stash_filename,status=<span class="stringliteral">&#39;REPLACE&#39;</span>)</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceum__config.xhtml#a1a0748027c4ccea31f2682bb9de31c5d">appinit</a>(exe_um)</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;<span class="comment">! Set GCOM to use the alternative version of RALLTOALLE</span></div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;<span class="comment">! throughout the run</span></div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <span class="keyword">CALL </span>gc_setopt(gc_alltoall_version, gc_alltoall_multi, err)</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<span class="stringliteral">&#39;&#39;</span>,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<span class="stringliteral">&#39;**************************** PROCESSOR &#39;</span>//                   &amp;</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        <span class="stringliteral">&#39;INFORMATION ****************************&#39;</span>,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<span class="stringliteral">&#39;&#39;</span>,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(trim(<a class="code" href="interfaceumprintmgr_1_1str.xhtml">str</a>(<a class="code" href="namespaceum__parcore.xhtml#ad078cc7202ef25b751b3e270bd3c4287">nproc_max</a>))//<span class="stringliteral">&#39; Processors initialised.&#39;</span>,             &amp;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    <span class="keyword">CALL </span>mpl_get_processor_name(env_myhost, env_myhost_len, err)</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    <span class="keywordflow">IF</span> (err /= 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;      <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<span class="stringliteral">&#39;I am PE &#39;</span>//trim(<a class="code" href="interfaceumprintmgr_1_1str.xhtml">str</a>(<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>)),src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;      <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<span class="stringliteral">&#39;I am PE &#39;</span>//trim(<a class="code" href="interfaceumprintmgr_1_1str.xhtml">str</a>(<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>))//<span class="stringliteral">&#39; on &#39;</span>//trim(env_myhost),      &amp;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;          src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;<span class="comment">! Only want OpenMP section executing if OpenMP is compiled in,</span></div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="comment">! so protect by sentinal</span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;<span class="comment">!$OMP PARALLEL DEFAULT(NONE)</span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;<span class="comment">!$OMP MASTER</span></div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;<span class="comment">!$  WRITE(umMessage,&#39;(A,I2,A)&#39;) &#39;I am running with &#39;,                          &amp;</span></div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="comment">!$      omp_get_num_threads(),&#39; thread(s).&#39;</span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="comment">!$  CALL umPrint(umMessage,src=&#39;um_shell&#39;)</span></div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="comment">!$  WRITE(umMessage,&#39;(A,I6)&#39;) &#39;OpenMP Specification: &#39;,openmp_version</span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="comment">!$  CALL umPrint(umMessage,src=&#39;um_shell&#39;)</span></div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="comment">!$OMP END MASTER</span></div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="comment">!$OMP END PARALLEL</span></div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="preprocessor">#if defined(IBM)</span></div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="preprocessor"></span><span class="comment">! On IBM force buffering of Fortran I/O for initialisation</span></div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;  <span class="keyword">CALL </span>setrteopts(<span class="stringliteral">&#39;buffering=enable&#39;</span>)</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<span class="preprocessor"></span><span class="comment">!</span></div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<span class="comment">! DEPENDS ON: timer</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;  <span class="keyword">CALL </span><a class="code" href="timer-timer1a_8f90.xhtml#a9ec0272078965f809aa1a1cbc6a05ea4">timer</a>(routinename,1)</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;-<span class="comment">!</span></div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="comment">!    Open unit 5. All runtime control variables subsequently read in</span></div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="comment">!    from UNIT 5 by namelist.</span></div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;  <span class="keyword">CALL </span>get_file(5,filename,<a class="code" href="namespacefilenamelength__mod.xhtml#a1f0ba129cfb2cc488313a144ac04a0e8" title="The module sets the max length of a filename in the UM. ">filenamelength</a>,icode)</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;  <span class="keyword">OPEN</span>(5,<a class="code" href="parlbcs_8h.xhtml#a9bdcf7736b544227cbd66a99e5332d4d">file</a>=filename,iostat=istatus)</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;  <span class="keywordflow">IF</span> (istatus /= 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    icode=500</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>( <span class="stringliteral">&#39; ERROR OPENING FILE ON UNIT 5&#39;</span>,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(A,A)&#39;</span>) <span class="stringliteral">&#39; FILENAME =&#39;</span>,filename</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(A,I6)&#39;</span>) <span class="stringliteral">&#39; IOSTAT =&#39;</span>,istatus</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="comment">!L</span></div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="comment">!L 0.1 Get submodel/internal model components of model run.</span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="comment">!L</span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;  icode=0</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;<span class="comment">! DEPENDS ON: um_submodel_init</span></div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;  <span class="keyword">CALL </span><a class="code" href="um__submodel__init_8f90.xhtml#a682c610e888652ebbedceaefde1f7853" title="Initialise model for submodel and internal model coupling. ">um_submodel_init</a>(icode)</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;  <span class="keywordflow">IF</span> (icode  /=  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    cmessage = <span class="stringliteral">&#39;Error calling UM_Submodel_init&#39;</span></div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;  <span class="keyword">CALL </span><a class="code" href="um__shell_8f90.xhtml#a99a3d934283d54080501e3f29f9262a1">um_shell_banner</a>(<span class="stringliteral">&#39;Start&#39;</span>)</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="comment">! Initialise I/O subsystem</span></div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;  <span class="keyword">CALL </span><a class="code" href="namespaceio.xhtml#adad84d622385969e1f68576533df4e84">ioinit</a>()</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="comment">! Start I/O Server if required</span></div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;      <span class="comment">! On exit the IO slave PEs have finished the whole job so can</span></div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;      <span class="comment">! go to the end of the routine. FIXME check cpu counts against deco</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;  isioserver=<a class="code" href="namespaceios__init.xhtml#ac442cb95ffe7e56fcfa8c5a9e7340d7e">ios_setup</a>(numioservers)</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;  <span class="comment">! Set mype to the local model rank</span></div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;  <a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>=model_rank</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;<span class="preprocessor">#if defined(MCT)</span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;<span class="preprocessor"></span>  <span class="comment">! If we&#39;re employing OASIS3-MCT then we have to tell OASIS</span></div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;  <span class="comment">! which processes are IO ones and which are atmos ones.</span></div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;  <span class="keyword">CALL </span><a class="code" href="namespaceoasis3__split__comm__mod.xhtml#a844ab290de76579ab5fe1957391b020b" title="*****************************COPYRIGHT**************************************** For further details pl...">oasis3_split_comm</a>(.NOT. isioserver)</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;  <span class="comment">! Certain collective calls which need performing on all PEs</span></div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;  <span class="comment">! regardless of whether they&#39;re actually involved in</span></div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;  <span class="comment">! coupling or not.</span></div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;<span class="comment">! DEPENDS ON: OASIS3_grid</span></div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;  <span class="keyword">CALL </span><a class="code" href="oasis3__grid_8f90.xhtml#a9cb92f20d2202b66a1f814dd04eaed88" title="*****************************COPYRIGHT**************************************** For further details pl...">oasis3_grid</a>(.false.)</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="preprocessor"></span></div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;  <span class="keywordflow">IF</span> (isioserver) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceios__init.xhtml#a7d87e40776b8aa7095ebef26dccf90bb">ios_run</a>()</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;  <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<span class="stringliteral">&#39;Running Atmospheric code as pe &#39;</span>//trim(<a class="code" href="interfaceumprintmgr_1_1str.xhtml">str</a>(<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>)),           &amp;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;        src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;-<span class="comment">!L</span></div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;<span class="comment">!L    Open unit 8 for server requests and send wakeup message</span></div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;<span class="comment">!L</span></div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespacemppio__file__utils.xhtml#a28cec7ec3f7ede6744167b6a3337cddc">mppio_file_utils_init</a>()</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespacemppio__job__control.xhtml#aff76d4cc1bc8c4d02745a858f0b87fdd" title="Open the pipe file. ">jobcntrlinit</a>()</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;<span class="comment">! WAKEUP doesn&#39;t have a file argument, so provide a dummy string</span></div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    <span class="keyword">CALL </span><a class="code" href="interfacemppio__job__control_1_1jobcntrl.xhtml" title="API for model code. Send a command/string to the pipe file. ">jobcntrl</a>(<a class="code" href="namespacemppio__job__control__common.xhtml#a2fa247e3aa392a8a752c304b940163b7" title="Parameterisations of commands for the server. ">jc_wakeup</a>,<span class="stringliteral">&#39; little Susie, wake up!&#39;</span>)</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;<span class="comment">!L! Initialise print status for standard output</span></div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="comment">! DEPENDS ON: initprintstatus</span></div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <span class="keyword">CALL </span><a class="code" href="initprintstatus_8f90.xhtml#ace27031e84892c5e8c661154b9d85b25" title="Initialise print status for standard output Initialise print status for standard output. ">initprintstatus</a>()</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;<span class="comment">! !  Read Control file on standard input.</span></div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;<span class="comment">! DEPENDS ON: readcntl</span></div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    <span class="keyword">CALL </span><a class="code" href="readcntl_8f90.xhtml#ae6bac41dbd827e14474d68ebfcdc1e18" title="Subroutine Interface: ">readcntl</a> ( 5,icode,cmessage )</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    <span class="keywordflow">IF</span> (icode  &gt;   0) <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="comment">!L!L Allow Override of namelist input in operational environment.</span></div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;<span class="comment">!L</span></div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;<span class="comment">! DEPENDS ON: oper_emergency</span></div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    <span class="keyword">CALL </span><a class="code" href="oper__emergency_8f90.xhtml#a906d5851c7b7a435524152592efefdbe" title="Subroutine Interface: Subroutine Interface: ">oper_emergency</a></div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;-<span class="comment">!L Call READLSTA to read namelists to control atmosphere integration</span></div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;<span class="comment">!L and diagnostic point print.</span></div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <span class="keywordflow">IF</span> ( l_endgame ) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;<span class="comment">! DEPENDS ON: readlsta_4a</span></div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;      <span class="keyword">CALL </span><a class="code" href="readlsta__4_a_8f90.xhtml#abc5fe175d74e13235464439055294edc" title="Read run-time control information from namelists for atmos model. ">readlsta_4a</a>()</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;<span class="comment">! DEPENDS ON: readlsta</span></div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;      <span class="keyword">CALL </span><a class="code" href="readlsta_8f90.xhtml#a6be7c745662b87214220c8519949fefe" title="Read run-time control information from namelists for atmos model. ">readlsta</a>()</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;-<span class="comment">!L 1.1 Get configuration-dependent sizes needed for dynamic allocation.</span></div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;<span class="comment">!L</span></div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;<span class="comment">! DEPENDS ON: readsize</span></div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    <span class="keyword">CALL </span><a class="code" href="readsize_8f90.xhtml#a1f10b1778cfceb7e841fdf8d950a07ae" title="LL Subroutine READSIZE -!&gt;LL. ">readsize</a>()</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;<span class="comment">!L   Read history and control files for NRUN; also interim control</span></div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;<span class="comment">!L   file for CRUN, and housekeeping file for operational run.</span></div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;<span class="comment">!L</span></div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;<span class="comment">! DEPENDS ON: um_setup</span></div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    <span class="keyword">CALL </span><a class="code" href="um__setup_8f90.xhtml#a6ae08822bbbdc3295a110b0a82e0a341" title="Reads History &amp; control files; also HK for Op. ">um_setup</a>(icode,cmessage)</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    <span class="keywordflow">IF</span> (icode &gt;  0) <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;<span class="comment">! Decompose atmosphere data and find new local data size</span></div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    <span class="keyword">CALL </span><a class="code" href="interfacedecomp__db_1_1decompose.xhtml">decompose</a>(<a class="code" href="namespacedecomp__params.xhtml#afabb52a8e8d6cdfe3f3366dd918058d8" title="decomps for atmos ">decomp_standard_atmos</a>,                                      &amp;</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;        global_row_length,global_rows,model_levels,                            &amp;</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;        river_rows, river_row_length,                                          &amp;</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;        model_domain,                                                          &amp;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;        atm_nprocx, atm_nprocy,                                                &amp;</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;        <a class="code" href="namespacempp__conf__mod.xhtml#a3135261d08847126dbe31a2f4b0defd8" title="Variables declared with a sensible default. ">extended_halo_size_ew</a>,                                                 &amp;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;        <a class="code" href="namespacempp__conf__mod.xhtml#a7aef0484c97bf86110f1d0b72571dac7">extended_halo_size_ns</a>,                                                 &amp;</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;        rimwidtha, <a class="code" href="namespacerimtypes.xhtml#a498faff6d957e8114ca32be92a16f168">nrima_max</a>,row_length,rows )</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;<span class="comment">! Set up the atmosphere decomposition in PARVARS</span></div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <span class="keyword">CALL </span>change_decomposition(<a class="code" href="namespacedecomp__params.xhtml#afabb52a8e8d6cdfe3f3366dd918058d8" title="decomps for atmos ">decomp_standard_atmos</a>,icode)</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;<span class="comment">! Now we have a decomposition initialise the halo swap module</span></div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespacehalo__exchange.xhtml#af52ab6876f6621383276b0292294edec" title="============================================================================== Purpose: Initialise th...">halo_exchange_init</a>()</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    <span class="keywordflow">IF</span> (icode  /=  0) <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;<span class="comment">! Output range of gridpoints for each PE</span></div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    <span class="keywordflow">IF</span> (<a class="code" href="namespaceumprintmgr.xhtml#a956d5068b5b528afc5bed1435ced4b99" title="$OMP THREADPRIVATE (umMessage) ">printstatus</a> &gt;= <a class="code" href="namespaceumprintmgr.xhtml#af03b710c9e538edb8c1e1b272939a657">prstatus_diag</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;      loop_pe_start=<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a></div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;      loop_pe_stop =<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a></div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;      <span class="keywordflow">IF</span> (<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>  ==  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;        loop_pe_start=0</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        loop_pe_stop=atm_nprocx*atm_nprocy-1</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;      <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<span class="stringliteral">&#39;&#39;</span>,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;      <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<span class="stringliteral">&#39;Range of gridpoints for processing elements:&#39;</span>,             &amp;</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;          src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;      <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<span class="stringliteral">&#39;&#39;</span>,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;      <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(A7,A2,A15,A2,A15)&#39;</span>)                                    &amp;</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;          <span class="stringliteral">&#39;     PE&#39;</span>,<span class="stringliteral">&#39; |&#39;</span>,<span class="stringliteral">&#39;  West -   East&#39;</span>,<span class="stringliteral">&#39; |&#39;</span>,<span class="stringliteral">&#39; South -  North&#39;</span></div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;      <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;      <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(A7,A2,A15,A2,A15)&#39;</span>)                                    &amp;</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;          <span class="stringliteral">&#39;-&#39;</span>,<span class="stringliteral">&#39;-+&#39;</span>,<span class="stringliteral">&#39;&#39;</span>,<span class="stringliteral">&#39;-+&#39;</span>,<span class="stringliteral">&#39;&#39;</span></div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;      <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;      <span class="keywordflow">DO</span> loop_pe = loop_pe_start,loop_pe_stop</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;        <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(I7,A2,I6,A3,I6,A2,I6,A3,I6)&#39;</span>)                        &amp;</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;            loop_pe,<span class="stringliteral">&#39; |&#39;</span>,                                                      &amp;</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;            g_datastart_f(1,1,loop_pe),<span class="stringliteral">&#39; - &#39;</span>,                                  &amp;</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;            g_datastart_f(1,1,loop_pe)+g_blsize(1,1,loop_pe)-1,<span class="stringliteral">&#39; |&#39;</span>,           &amp;</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;            g_datastart_f(2,1,loop_pe),<span class="stringliteral">&#39; - &#39;</span>,                                  &amp;</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;            g_datastart_f(2,1,loop_pe)+g_blsize(2,1,loop_pe)-1</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;        <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;      <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(A7,A2,A15,A2,A15)&#39;</span>)                                    &amp;</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;          <span class="stringliteral">&#39;-&#39;</span>,<span class="stringliteral">&#39;-+&#39;</span>,<span class="stringliteral">&#39;&#39;</span>,<span class="stringliteral">&#39;-+&#39;</span>,<span class="stringliteral">&#39;&#39;</span></div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;      <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;<span class="comment">! Call DERVSIZE (the call in READSIZE has been deleted)</span></div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    icode=0</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;<span class="comment">! DEPENDS ON: dervsize</span></div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    <span class="keyword">CALL </span><a class="code" href="dervsize_8f90.xhtml#a8f9423f63d9f91697c0fb07b671071e7" title="LL Program: DERVSIZE !&gt;LL. ">dervsize</a>(icode,cmessage)</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    <span class="keywordflow">IF</span> (icode  /=  0) <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;<span class="comment">!     Ensure that domain decomposition is set for Atmosphere</span></div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    <span class="keyword">CALL </span>change_decomposition (<a class="code" href="namespacedecomp__params.xhtml#afabb52a8e8d6cdfe3f3366dd918058d8" title="decomps for atmos ">decomp_standard_atmos</a>,icode)</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    <span class="keywordflow">IF</span> (icode /= 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;      <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(A,A)&#39;</span>) <span class="stringliteral">&#39; Error returned in CHANGE_DECOMPOSITION&#39;</span>,      &amp;</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;          <span class="stringliteral">&#39; before DERV_LAND_FIELD.&#39;</span></div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;      <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;      <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(A,I5)&#39;</span>) <span class="stringliteral">&#39; Error code &#39;</span>,icode</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;      <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;      <span class="keyword">WRITE</span>(cmessage,<span class="stringliteral">&#39;(A)&#39;</span>) <span class="stringliteral">&#39;UM_SHELL : Error in CHANGE_DECOMPOSITION.&#39;</span></div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;      <span class="keywordflow">GO TO</span> 9999   <span class="comment">!  Exit</span></div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;<span class="comment">!     For MPP jobs, calculate the no of land-points on each PE.</span></div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;<span class="comment">! DEPENDS ON: derv_land_field</span></div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    <span class="keyword">CALL </span><a class="code" href="derv__land__field_8f90.xhtml#aec166bb22b5ae583ddfaed40104bda74" title="Subroutine DERV_LAND_FIELD : Computes no of land points in MPP jobs Subroutine DERV_LAND_FIELD : Comp...">derv_land_field</a> (icode,cmessage)</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    <span class="keywordflow">IF</span> (icode &gt;  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;      <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>( <span class="stringliteral">&#39;Error returned from DERV_LAND_FIELD.&#39;</span>,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;      <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(A,I5)&#39;</span>) <span class="stringliteral">&#39;Error code &#39;</span>,icode</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;      <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;      <span class="keywordflow">GO TO</span> 9999   <span class="comment">!  Exit</span></div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;<span class="comment">! Derive lengths involved with output boundary files - atmos.</span></div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;<span class="comment">! DEPENDS ON: derv_intf_a</span></div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    <span class="keyword">CALL </span><a class="code" href="derv__intf__a_8f90.xhtml#a837e35ef0c2c60aad9fbcc098d14ef18" title="Subroutine DERV_INTF_A : Calculates Interface array dimensions. Subroutine DERV_INTF_A : Calculates I...">derv_intf_a</a> (max_intf_model_levels,max_lbcrow_length,max_lbcrows,   &amp;</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;                      n_intf_a)</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    <span class="keywordflow">IF</span> (icode &gt;  0) <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<span class="stringliteral">&#39;********************************************&#39;</span>//            &amp;</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;        <span class="stringliteral">&#39;***********************************&#39;</span>,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;<span class="comment">! 1.2 Call STASH_PROC: top level control routine for processing of</span></div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;<span class="comment">!                      STASH requests and STASH addressing.</span></div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;<span class="comment">! Open STASHmaster file(s) and count number of records</span></div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;<span class="comment">!   This number is assigned to ppxRecs and used to dynamically</span></div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;<span class="comment">!   allocate the PPX_ arrays in which stash master records are held</span></div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    ppxrecs = 1</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    icode   = 0</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    <span class="keywordflow">IF</span> (<a class="code" href="namespacesubmodel__mod.xhtml#a5a10dac97f579ecbf0c1c1879901e2e0" title="Sequence number of internal model indexed by internal model identifier required to map from id to STA...">internal_model_index</a>(<a class="code" href="namespacesubmodel__mod.xhtml#ae72bf5d9dbbc3029ed7107c47edd59e3">a_im</a>) &gt;  0)                                       &amp;</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;<span class="comment">! DEPENDS ON: hdppxrf</span></div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;        <span class="keyword">CALL </span><a class="code" href="hdppxrf_8f90.xhtml#ae7531e226ee60bbc9cf88cd3bddc5ab2" title="LL SUBROUTINE HDPPXRF!&gt;LL. ">hdppxrf</a>                                                           &amp;</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;        (nftppxref,<span class="stringliteral">&#39;STASHmaster_A&#39;</span>,icode,cmessage)</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    <span class="keywordflow">IF</span> (icode /= 0) <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;<span class="comment">! Add number of user stash records</span></div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;<span class="comment">! DEPENDS ON: hdppxrf</span></div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    <span class="keyword">CALL </span><a class="code" href="hdppxrf_8f90.xhtml#ae7531e226ee60bbc9cf88cd3bddc5ab2" title="LL SUBROUTINE HDPPXRF!&gt;LL. ">hdppxrf</a>(0,<span class="stringliteral">&#39;             &#39;</span>,icode,cmessage)</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    <span class="keywordflow">IF</span> (icode  &lt;   0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;      <span class="keywordflow">IF</span> (<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>  ==  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;        <span class="keyword">WRITE</span>(0,<span class="stringliteral">&#39;(A)&#39;</span>) <span class="stringliteral">&#39;WARNING : Problem in STASHmaster file(s)&#39;</span></div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;        <span class="keyword">WRITE</span>(0,<span class="stringliteral">&#39;(A)&#39;</span>) <span class="stringliteral">&#39;        &#39;</span>,trim(cmessage)</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (icode  &gt;   0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;      <span class="keywordflow">IF</span> (<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>  ==  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;        <span class="keyword">WRITE</span>(0,<span class="stringliteral">&#39;(A)&#39;</span>) <span class="stringliteral">&#39;ERROR : Problem in STASHmaster files(s)&#39;</span></div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;        <span class="keyword">WRITE</span>(0,<span class="stringliteral">&#39;(A)&#39;</span>) <span class="stringliteral">&#39;      &#39;</span>,trim(cmessage)</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;      <span class="keywordflow">GO TO</span> 9999  <span class="comment">! Always abort on fatal error.</span></div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;<span class="comment">! DEPENDS ON: stash_proc</span></div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    <span class="keyword">CALL </span><a class="code" href="stash__proc_8f90.xhtml#a6a7c940d36c620507329f9dccecc0c0d" title="Control routine for processing of basis library STASH file. ">stash_proc</a>(nftppxref,nftstmstu,.false.,                               &amp;</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;        icode,cmessage  )</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    <span class="keywordflow">IF</span> (icode &gt;  0) <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;<span class="comment">! Total number of entries (N_PPXRECS) in STASH-addresses array IN_S has</span></div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;<span class="comment">!  obtained by WSTLST in STASH_PROC. Reset ppxRecs to equal this value.</span></div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;<span class="comment">! This is used to dynamically</span></div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;<span class="comment">!  allocate the ppx look-up arrays PPXI, PPXC in U_MODEL/UM_MODEL_4A.</span></div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    ppxrecs = <a class="code" href="namespacetypstsz__mod.xhtml#a22abd732ae34990d4f231238da47866f">n_ppxrecs</a></div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;<span class="comment">!L!L 1.3 Calculate addresses of super arrays passed down for dynamic</span></div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;<span class="comment">!L     allocation.</span></div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;<span class="comment">!L</span></div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    icode=0</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;<span class="comment">! DEPENDS ON: um_index</span></div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    <span class="keyword">CALL </span><a class="code" href="um__index_8f90.xhtml#a4d2f71af8e41bae45f2138b3d8d3bba9" title="LL Subroutine: UM_INDEX-!&gt;LL. ">um_index</a>(                                                             &amp;</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;<span class="preprocessor">#include &quot;argszsp.h&quot;</span></div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;argszspa.h&quot;</span></div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;argszspc.h&quot;</span></div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;<span class="preprocessor"></span>        ,icode,cmessage)</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    <span class="keywordflow">IF</span> (icode &gt;  0) <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;<span class="comment">!L!L 1.5 Set up geometry of the model on the IO servers if needed</span></div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;<span class="comment">!L</span></div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;<span class="comment">!L * Note there is a global barrier (INCLUDING THE IO SERVERS) here *</span></div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    <span class="keywordflow">IF</span> (isusingasyncstash() .OR. isusingasyncdumps()) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;          <span class="comment">! We need to tell the submodels about our geometry</span></div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;      <span class="keyword">CALL </span>ios_client_geometry_init(<a class="code" href="namespacedecomp__params.xhtml#afabb52a8e8d6cdfe3f3366dd918058d8" title="decomps for atmos ">decomp_standard_atmos</a>)</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;<span class="comment">!L!L 2. Call U_MODEL/U_MODEL_4A master routine to allocate the main data arrays</span></div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;<span class="comment">!L    and do the calculations.</span></div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;<span class="comment">!L</span></div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    <span class="keywordflow">IF</span> ( l_endgame ) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;<span class="comment">! DEPENDS ON: u_model_4A</span></div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;      <span class="keyword">CALL </span><a class="code" href="u__model__4_a_8f90.xhtml#afa05064dab5eba198b461d0928767c7e" title="LL Subroutine: U_MODEL_4A (ENDGAME VERSION) !&gt;LL. ">u_model_4a</a> (                                                        &amp;</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;          nftppxref,nftstmstu,                                                 &amp;</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;<span class="preprocessor">#include &quot;argszsp.h&quot;</span></div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;argszspa.h&quot;</span></div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;argszspc.h&quot;</span></div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;<span class="preprocessor"></span>         )     <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;<span class="comment">! DEPENDS ON: u_model</span></div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;      <span class="keyword">CALL </span><a class="code" href="u__model_8f90.xhtml#ada0cd2ce4699433bf0f9adbd882c8eec" title="Subroutine: U_MODEL -!&gt; ">u_model</a> (                                                           &amp;</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;          nftppxref,nftstmstu,                                                 &amp;</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;<span class="preprocessor">#include &quot;argszsp.h&quot;</span></div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;argszspa.h&quot;</span></div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;argszspc.h&quot;</span></div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;<span class="preprocessor"></span>         )<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;<span class="comment">! Make sure all the Files are properly Closed. We call model_file_close not</span></div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;<span class="comment">! file_close to ensure that any open files which are PP and hence have</span></div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;<span class="comment">! cached lookups, have the lookups commited to disk before the close.</span></div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    <span class="keywordflow">DO</span> i=20, <a class="code" href="namespacechsunits__mod.xhtml#af6e26d3a6a1fedf0b44203712a772f8e">nunits</a></div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;      <span class="keywordflow">IF</span> (model_file_managed(i)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;        <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(A,I3,A)&#39;</span>)<span class="stringliteral">&#39;Managed unit &#39;</span>, &amp;</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;            i,<span class="stringliteral">&#39; is open at end of run, closing&#39;</span></div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;        <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;        <span class="keyword">CALL </span>model_file_close(i, <span class="stringliteral">&quot;dummy_name&quot;</span>)</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;      <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (<a class="code" href="namespaceio.xhtml#ac523e2c0480c522622bf5ef27880cc5d">is_unit_open</a>(i)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;        <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(A,I3,A)&#39;</span>)<span class="stringliteral">&#39;Unmanaged unit &#39;</span>, &amp;</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;            i,<span class="stringliteral">&#39; is open at end of run, closing&#39;</span></div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;        <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;        <span class="keyword">CALL </span><a class="code" href="namespaceio.xhtml#ade07b9db8d4954fd605a7212d5f46e2a">file_close</a>(i, <span class="stringliteral">&quot;dummy_name&quot;</span>)</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;      <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;        <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(A,I3,A)&#39;</span>)<span class="stringliteral">&#39;Unit &#39;</span>,i,<span class="stringliteral">&#39; is closed&#39;</span></div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;        <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;<span class="comment">! Close IO Server</span></div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;    <span class="keywordflow">IF</span> (l_ios_active()) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;      <span class="keyword">CALL </span><a class="code" href="namespaceios__client__queue.xhtml#ac1e2936b7e37142bf8deb120701bd550">ios_shutdown</a>()</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;<span class="comment">! Shut down async stash on all ranks</span></div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;      <span class="keywordflow">IF</span> (isusingasyncstash().OR.isusingasyncdumps())                          &amp;</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;          <span class="keyword">CALL </span>ios_stash_client_fini()</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;<span class="keywordflow">  END IF</span> <span class="comment">! (am an io server, atmos and io rejoin here)</span></div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;  9999  <span class="keywordflow">CONTINUE</span></div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;  <span class="keyword">CLOSE</span>(5)</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;  <span class="keyword">CALL </span><a class="code" href="um__shell_8f90.xhtml#a99a3d934283d54080501e3f29f9262a1">um_shell_banner</a>(<span class="stringliteral">&#39;End&#39;</span>)</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;  <span class="keywordflow">IF</span> (icode /= 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;    <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a>(routinename,icode,cmessage)</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160; <span class="comment">!Time a barrier to ensure dr_hook sees</span></div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;<span class="comment">!  the time for the IOS and atmos to sync up</span></div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;UM_SHELL:RENDEZ-VOUS&#39;</span>,zhook_in,zhook_rendez_vous)</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;  <span class="keyword">CALL </span>mpl_barrier(global_comm,icode)</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;UM_SHELL:RENDEZ-VOUS&#39;</span>,zhook_out,zhook_rendez_vous)</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;<span class="comment">! DEPENDS ON: timer</span></div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;  <span class="keyword">CALL </span><a class="code" href="timer-timer1a_8f90.xhtml#a9ec0272078965f809aa1a1cbc6a05ea4">timer</a>(routinename,2)</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;<span class="comment">! Close STASH filename unit</span></div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;  <span class="keywordflow">IF</span> (<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a> == 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    <span class="keyword">CLOSE</span>(200)</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(routinename,zhook_out,zhook_handle)</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;  <span class="keyword">CALL </span><a class="code" href="namespaceum__config.xhtml#ac5427c3f1a863c5f6dd9dfa217a8039c">appterminate</a>()</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;<span class="comment">! AppTermainate does not shut down GCOM for the UM (yet)...</span></div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;<span class="preprocessor">#if defined(OASIS3)</span></div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;<span class="preprocessor"></span>  <span class="comment">! Call prism routine to close OASIS3 instead of GC_EXIT</span></div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;  <span class="keyword">CALL </span>prism_terminate_proto(icode_oasis)</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;<span class="preprocessor"></span>      <span class="comment">! Only bother calling GC_EXIT  when PRISM isnt going to shut</span></div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;      <span class="comment">! things down for this component.</span></div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;<span class="comment">! Close down parallel process communication</span></div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;  <span class="keyword">CALL </span>gc_exit()</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;<span class="preprocessor"></span></div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;  <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;<span class="keyword">CONTAINS</span></div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;<span class="keyword">SUBROUTINE </span><a class="code" href="um__shell_8f90.xhtml#a99a3d934283d54080501e3f29f9262a1">um_shell_banner</a>(stampname)</div><div class="line"><a name="l00788"></a><span class="lineno"><a class="line" href="um__shell_8f90.xhtml#a99a3d934283d54080501e3f29f9262a1">  788</a></span>&#160;</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;<span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;<span class="keywordtype">CHARACTER(LEN=*)</span>, <span class="keywordtype">INTENT(IN)</span> ::  stampname</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;<span class="keywordflow">IF</span> (<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a> == 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;  <span class="keyword">CALL </span>date_and_time(ch_date2, ch_time2)</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;  <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<span class="stringliteral">&#39;&#39;</span>,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;  <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<span class="stringliteral">&#39;********************************************&#39;</span>//            &amp;</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;                <span class="stringliteral">&#39;***********************************&#39;</span>,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;  <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(23A)&#39;</span>)                                                 &amp;</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;         <span class="stringliteral">&#39;**************** &#39;</span>,stampname,<span class="stringliteral">&#39; of UM RUN Job : &#39;</span>,                &amp;</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;         ch_time2(1:2),<span class="stringliteral">&#39;:&#39;</span>,ch_time2(3:4),<span class="stringliteral">&#39;:&#39;</span>,ch_time2(5:6),                &amp;</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;          <span class="stringliteral">&#39; on &#39;</span>,                                                          &amp;</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;          ch_date2(7:8),<span class="stringliteral">&#39;/&#39;</span>,ch_date2(5:6),<span class="stringliteral">&#39;/&#39;</span>,ch_date2(1:4),               &amp;</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;          <span class="stringliteral">&#39; *****************&#39;</span></div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;  <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;  <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(3A)&#39;</span>)                                                 &amp;</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;        <span class="stringliteral">&#39;**************** Based upon UM release vn&#39;</span>,<a class="code" href="namespaceum__version__mod.xhtml#a0cdb44c7c3db81652a639f36100bfa39" title="identify this code version in the code. ">umvn</a>,                  &amp;</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;        <span class="stringliteral">&#39;             *****************&#39;</span></div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;  <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;  <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<span class="stringliteral">&#39;*****************************************&#39;</span>//              &amp;</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;               <span class="stringliteral">&#39;**************************************&#39;</span>,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;  <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<span class="stringliteral">&#39;&#39;</span>,src=<span class="stringliteral">&#39;um_shell&#39;</span>)</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;<span class="keywordflow">END IF</span></div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;<span class="keyword">END SUBROUTINE </span><a class="code" href="um__shell_8f90.xhtml#a99a3d934283d54080501e3f29f9262a1">um_shell_banner</a></div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;<span class="keyword">END SUBROUTINE </span><a class="code" href="um__shell_8f90.xhtml#a8c9bd25362824a5c301376ecb5ed5c27" title="Subroutine: UM_SHELL !&gt; ">um_shell</a></div></div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
