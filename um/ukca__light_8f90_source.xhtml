<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>UM General Atmosphere: /home/wilfred/PhD/UM/src/atmosphere/UKCA/ukca_light.f90 Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="unified_model_logo_2.jpeg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">UM General Atmosphere
   &#160;<span id="projectnumber">8.6</span>
   </div>
   <div id="projectbrief">UK Met Offices Unified Model</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_1df14ea1ac826f73bc3062fa8a76e0c2.xhtml">atmosphere</a></li><li class="navelem"><a class="el" href="dir_3b087d695daa154bfcb7242bcfd0fbd3.xhtml">UKCA</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">ukca_light.f90</div>  </div>
</div><!--header-->
<div class="contents">
<a href="ukca__light_8f90.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">!                                                                      !                                                                      ! Code description:                                                    !   Language: FORTRAN 90                                               !   This code is written to UMDP3 v6 programming standards.            !                                                                      ! !                                                                              SUBROUTINE UKCA_LIGHT(delta_lambda,delta_phi,ppress,niv, &amp;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;                              hkmb,hkmt,klc,klt,adlat,           &amp;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;                              asfaera,asurf,anox,                &amp;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;                              total_flash_rate,                  &amp;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;                              cloud2ground_flash_rate,           &amp;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;                              cloud2cloud_flash_rate,            &amp;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;                              total_n)                </div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;        <span class="keywordtype">USE </span>yomhook<span class="keywordtype">,         ONLY</span>: lhook, dr_hook</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;        <span class="keywordtype">USE </span>parkind1<span class="keywordtype">,        ONLY</span>: jprb, jpim</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;        <span class="keywordtype">USE </span><a class="code" href="namespaceparcons__mod.xhtml" title="This file belongs in section: UKCA This file belongs in section: UKCA. ">parcons_mod</a><span class="keywordtype">,     ONLY</span>: <a class="code" href="namespaceparcons__mod.xhtml#a9518295c9d6074ad10220f6ef055546c">rad</a>, <a class="code" href="namespaceparcons__mod.xhtml#a2b3d1258a6edba86747cd123e328e63c">deg</a></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;        <span class="keywordtype">USE </span>ukca_constants<span class="keywordtype">,  ONLY</span>: avc</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;        <span class="keywordtype">IMPLICIT NONE</span>                                                                                                                                 <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: niv <span class="comment">! No of vertical level</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;        <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: klc <span class="comment">! Level of cloud base        INTEGER, INTENT(IN) :: klt ! Level of cloud top</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;        <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: asurf <span class="comment">! Land (1) / sea (0) m</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;                                                                               <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span> ::  delta_lambda <span class="comment">! gridbox width (radiants)</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span> ::  delta_phi <span class="comment">! gridbox height (radiants)</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span> ::  hkmt <span class="comment">! Height of cloud top        REAL, INTENT(IN) ::  hkmb ! Height of cloud base</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span> ::  adlat <span class="comment">! Latitude</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span> ::  ppress(niv) <span class="comment">! Pressures at model l</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span> ::  asfaera <span class="comment">! Surf area * (radius                                                                       !       ...NOx lightning emissions               REAL, INTENT(OUT) :: anox(niv) ! kg(N)/gridcell/s</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;       <span class="comment">!       ...number of flashes in a gridcell cloud to cloud /s               REAL, INTENT(OUT) :: cloud2cloud_flash_rate</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;       <span class="comment">!       ...lighting N column density in kg(N)/m^2/s</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(OUT)</span> :: total_n</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;                                                                        <span class="comment">! Local variables                                                                                                                                     INTEGER :: jniv ! Loop variable              INTEGER :: k ! Loop variable                                                                             !       ...Minimum cloud depth                REAL, PARAMETER ::  Min_clouddepth = 5.0</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;       <span class="comment">!       ...distance (km) per degree at equator               REAL, PARAMETER ::  km_per_deg_eq  = 111.11</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;       <span class="comment">!       ...Molecular mass of N (kg/mol)               REAL, PARAMETER ::  M_n  = 14.01*1.0E-03</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                                                                               <span class="keywordtype">REAL</span> :: aflash <span class="comment">! Flash frequency (flashes/min)         REAL :: adh                                                            REAL :: az ! Cloud-cloud/cloud-ground              REAL :: ap ! Cloud-ground flashes / total fl</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keywordtype">REAL</span> :: acgfrac <span class="comment">! Cloud-ground flash frequency (f</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="keywordtype">REAL</span> :: accfrac <span class="comment">! Cloud-cloud flash frequency (fl</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="keywordtype">REAL</span> :: acgnox                                                         <span class="keywordtype">REAL</span> :: accnox                                                         <span class="keywordtype">REAL</span> :: dpcg                                                           <span class="keywordtype">REAL</span> :: dpcc               <span class="keywordtype">REAL</span> :: gb_area_30n <span class="comment">! area of gridbox at 30N (normalisation factor)</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keywordtype">REAL</span> :: ew_res_deg  <span class="comment">! gridbox width in degrees</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keywordtype">REAL</span> :: ns_res_deg  <span class="comment">! gridbox height in degrees</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keywordtype">REAL</span> :: fr_calib_fac <span class="comment">! model resolution calibration factor</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordtype">REAL(KIND=jprb)</span>               :: zhook_handle</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                                                                       <span class="comment">!       Initialise variables                                                                                                                          IF (lhook) CALL dr_hook(&#39;UKCA_LIGHT&#39;,zhook_in,zhook_handle)</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        gb_area_30n  = 0.0</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        ew_res_deg   = 0.0</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        ns_res_deg   = 0.0</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        fr_calib_fac = 0.0</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        aflash  = 0.0                                                          adh     = 0.0                                                          az      = 0.0                                                          ap      = 0.0                                                          acgfrac = 0.0                                                          accfrac = 0.0                                                          acgnox  = 0.0                                                          accnox  = 0.0                                                  <span class="comment">! Initialise to zero and will be value if minimum cloud depth not met.</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        anox    = 0.0</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        total_flash_rate = 0.0</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        cloud2ground_flash_rate = 0.0</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        cloud2cloud_flash_rate = 0.0</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        total_n = 0.0</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        ew_res_deg   = delta_lambda*<a class="code" href="namespaceparcons__mod.xhtml#a2b3d1258a6edba86747cd123e328e63c">deg</a></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        ns_res_deg   = delta_phi*<a class="code" href="namespaceparcons__mod.xhtml#a2b3d1258a6edba86747cd123e328e63c">deg</a></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        fr_calib_fac = 0.97241*exp(0.048203*ew_res_deg*ns_res_deg)</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        gb_area_30n = (ew_res_deg*km_per_deg_eq*0.87)* &amp; <span class="comment">! gridbox width (km)</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                      (ns_res_deg*km_per_deg_eq)*      &amp; <span class="comment">! gridbox height (km)</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                      1.0e+06                            <span class="comment">! (km^2 --&gt; m^2)</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                                                                       <span class="comment">!       Set minimum cloud depth to 5 km                                                                                                               IF ((hkmt-hkmb) &gt; Min_clouddepth) THEN                                                                                                !         ...flashes per minute</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;          <span class="keywordflow">IF</span> (asurf == 0) <span class="keywordflow">THEN</span>                  <span class="comment">! Ocean                            aflash = 6.40e-04*(hkmt**1.73)      ! Ocean flash frequency (1/min)</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;          <span class="keywordflow">ELSE</span>                                  <span class="comment">! Land                             aflash = 3.44e-05*(hkmt**4.9)       ! Land flash frequency  (1/min)</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="keywordflow">          ENDIF</span>                                                                                                                               <span class="comment">!         ...Calculate flash rate in flashes/s/gridbox</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;         <span class="comment">!         ...convert from flases/gridbox/min to flashes/gridbox/s                   aflash = aflash/60.0</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                                                                       <span class="comment">!         ...work out proportion of flashes that are cloud to ground                adh = -6.64e-05*(ABS(adlat)**2)-4.73e-03*ABS(adlat)+7.34</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;          az  = 0.021*(adh**4)-0.648*(adh**3)+7.493*(adh**2) &amp;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;              - 36.54*adh+63.09</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;          ap  = 1./(1.+az)                                                       acgfrac = aflash*ap</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;          accfrac = aflash-acgfrac</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;          <span class="comment">! calculate diagnostics quantities in flashes/gridbox/min</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;          total_flash_rate         = aflash*60.0</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;          cloud2ground_flash_rate  = acgfrac*60.0</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;          cloud2cloud_flash_rate   = accfrac*60.0</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                                                                       <span class="comment">!         ...compute NO production in kg(N)/gridbox/s based on flash frequency</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">!         ...cloud-to-ground NOx</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;          acgnox = (acgfrac*e_cg*p_no*m_n)/avc</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">!         ...cloud-to-cloud NOx</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;          accnox = (accfrac*e_cc*p_no*m_n)/avc</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">!         ...total lightning NOx column density in kg(N)/m^2/s</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;          total_n = (acgnox + accnox)/asfaera</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">!         Distribute over the column with each box having same vmr in an</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">!         multiply by CONVFAC, conversion factor that gives emissions if</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">!         were 100 flashes s**-1                                                                                                              !         Work out which pressure is closest to 500 hPa                                                                                                 LOOP: DO jniv = niv,1,-1                                                 IF (ppress(jniv) &gt;= 50000.0) EXIT LOOP                               ENDDO LOOP                                                   </span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">!         3 from cloud base to 2 above top                             !         KLT is the level above cloud top                                                                                                              dpcg = ppress(1) - ppress(jniv)                                      dpcc = ppress(jniv) - ppress(klt)                                                                                                   !         ...construct L-NOx profile in kg(N)/gridcell/s</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">!         ...first cloud-to-ground L-NOx profiles (kg(N)/gridcell/s)</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;          <span class="keywordflow">IF</span> ((jniv-1) == 1) <span class="keywordflow">THEN</span>                                                  anox(1) = acgnox</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;          <span class="keywordflow">ELSE</span>                                                                     <span class="keywordflow">DO</span> <a class="code" href="arg__atm__fields_8h.xhtml#a746e8233330aed561ffa6fdbd8b8fea9">k</a> = 1,jniv-1                                                          anox(<a class="code" href="arg__atm__fields_8h.xhtml#a746e8233330aed561ffa6fdbd8b8fea9">k</a>) = acgnox * ((ppress(<a class="code" href="arg__atm__fields_8h.xhtml#a746e8233330aed561ffa6fdbd8b8fea9">k</a>)-ppress(<a class="code" href="arg__atm__fields_8h.xhtml#a746e8233330aed561ffa6fdbd8b8fea9">k</a>+1))/dpcg)</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="keywordflow">            END DO</span><span class="keywordflow">                                                               ENDIF</span>                                                                                                                               <span class="comment">!         ...then cloud-to-cloud L-NOx profiles (kg(N)/gridcell/s)          IF (ppress(jniv) &lt;= ppress(klt)) THEN                                    anox(klt-1) = anox(klt-1) + accnox                            ELSE                                                                     DO k = jniv,klt-1                                                        anox(k) = accnox * ((ppress(k)-ppress(k+1))/dpcc)</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="keywordflow">            END DO</span><span class="keywordflow">                                                               ENDIF</span><span class="keywordflow">                                                                ENDIF</span>                                                                                                                                         <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;UKCA_LIGHT&#39;</span>,zhook_out,zhook_handle)</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="keyword">        END SUBROUTINE </span>UKCA_LIGHT                                      </div></div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
