<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>UM General Atmosphere: /home/wilfred/PhD/UM/src/control/mpp/scatter_field_ml-sctfml1c.f90 Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="unified_model_logo_2.jpeg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">UM General Atmosphere
   &#160;<span id="projectnumber">8.6</span>
   </div>
   <div id="projectbrief">UK Met Offices Unified Model</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_b81b067251166617f9d0a8c0cfc3a4a9.xhtml">control</a></li><li class="navelem"><a class="el" href="dir_14a8e295637c738acc16dab33472505b.xhtml">mpp</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">scatter_field_ml-sctfml1c.f90</div>  </div>
</div><!--header-->
<div class="contents">
<a href="scatter__field__ml-sctfml1c_8f90.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">! Description:</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">SUBROUTINE </span><a class="code" href="scatter__field__ml-sctfml1c_8f90.xhtml#a83e9cd7cbb16706828e345ab71465340" title="This routine is a direct inverse of GATHER_field_ML. It takes. ">scatter_field_ml</a>(                                      &amp;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    local_field,    global_field,                                 &amp;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    local_row_len,  local_rows,    local_levs,                    &amp;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    global_row_len, global_rows,   global_levs,                   &amp;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    pe_for_level,                                                 &amp;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    fld_type,       halo_type)</div><div class="line"><a name="l00022"></a><span class="lineno"><a class="line" href="scatter__field__ml-sctfml1c_8f90.xhtml#a83e9cd7cbb16706828e345ab71465340">   22</a></span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="keywordtype">USE </span>mpl<span class="keywordtype">, ONLY</span> :                                                   &amp;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;         mpl_real,                                                &amp;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;         mpl_status_size</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keywordtype">USE </span>yomhook<span class="keywordtype">, ONLY</span>: lhook, dr_hook</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keywordtype">USE </span>parkind1<span class="keywordtype">, ONLY</span>: jprb, jpim</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keywordtype">USE </span>um_parvars</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: local_row_len   <span class="comment">! local field row length</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: local_rows      <span class="comment">! local field rows</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: local_levs      <span class="comment">! local field levels</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: global_row_len  <span class="comment">! global field row length</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: global_rows     <span class="comment">! global field rows</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: global_levs     <span class="comment">! global field levels</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: fld_type        <span class="comment">! field type of grid</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: halo_type       <span class="comment">! halo type of field</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: pe_for_level(local_levs)  <span class="comment">! PE to scatter</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                                                 <span class="comment">! level from</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(OUT)</span>   :: local_field( local_row_len,                &amp;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                                    local_rows, local_levs )</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span>    :: global_field( global_row_len,              &amp;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                                     global_rows, global_levs )</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="keywordtype">INTEGER</span> :: i                 <span class="comment">! loop index  - cols</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="keywordtype">INTEGER</span> :: j                 <span class="comment">! loop index  - rows</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="keywordtype">INTEGER</span> :: k                 <span class="comment">! loop index  - levels</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="keywordtype">INTEGER</span> :: iproc             <span class="comment">! loop index  - processors</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="keywordtype">INTEGER</span> :: halo_x            <span class="comment">! halo size - x</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="keywordtype">INTEGER</span> :: halo_y            <span class="comment">! halo size - y</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="keywordtype">INTEGER</span> :: local_row_len_nh  <span class="comment">! local row length without halos</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="keywordtype">INTEGER</span> :: local_rows_nh     <span class="comment">! local rows without halos</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="keywordtype">INTEGER</span> :: pos               <span class="comment">! buffer position</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="keywordtype">INTEGER</span> :: levs_to_send(0 : nproc-1) <span class="comment">! num of levs to send</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="keywordtype">INTEGER</span> :: kpos(0 : nproc-1)         <span class="comment">! buffer position</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="keywordtype">INTEGER</span> :: send_size(0 : nproc-1)    <span class="comment">! size to send</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="keywordtype">INTEGER</span> :: recv_size(0 : nproc-1)    <span class="comment">! size to receive</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="keywordtype">INTEGER</span> :: ierr                      <span class="comment">! error flag</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="keywordtype">INTEGER</span> :: statu(mpl_status_size)   <span class="comment">! MPL status</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="keywordtype">INTEGER</span> :: my_comm                   <span class="comment">! MPL Communicator</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="keywordtype">REAL</span> :: local_buffer(local_row_len * local_rows * global_levs,    &amp;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                     0 : nproc-1)</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="keywordtype">REAL</span> :: send_buff(global_row_len * global_rows * global_levs,     &amp;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                  0 : nproc -1)</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="keywordtype">REAL(KIND=jprb)</span>               :: zhook_handle</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;-<span class="comment">! 0) Calculate a few sizes I&#39;ll need later</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;-<span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;SCATTER_FIELD_ML&#39;</span>,zhook_in,zhook_handle)</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;halo_x = halosize(1, halo_type)</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;halo_y = halosize(2, halo_type)</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;local_row_len_nh = local_row_len - (2 * halo_x)</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;local_rows_nh = local_rows - (2 * halo_y)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;levs_to_send(:) = 0</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="keywordflow">DO</span> k = 1, local_levs</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  levs_to_send(pe_for_level(k)) = levs_to_send(pe_for_level(k))+1</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;-<span class="comment">! 0) Setup  - get communicator from GCOM</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;-<span class="keyword">CALL </span>gc_get_communicator(my_comm, ierr)</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;-<span class="comment">! 1) Copy data from global fields into send buffer</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;-<span class="keywordflow">DO</span> iproc = 0, nproc - 1</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  <span class="keywordflow">DO</span> k = 1, levs_to_send(<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>)</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordflow">DO</span> j = 1, g_blsize(2,fld_type,iproc)</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;      <span class="keywordflow">DO</span> i = 1, g_blsize(1,fld_type,iproc)</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        send_buff(i + (j - 1) * g_blsize(1,fld_type,iproc) +      &amp;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                    (k - 1) * g_blsize(1,fld_type,iproc) *        &amp;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                    g_blsize(2,fld_type,iproc), iproc)            &amp;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        = global_field( g_datastart_f(1,fld_type,iproc) + i - 1,  &amp;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                      g_datastart_f(2,fld_type,iproc) + j - 1 ,k)</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;-<span class="comment">! 2) Find sizes for send/recv and do the communications</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">!    Use MPL_Sendrecv to pair up comms.</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;-<span class="keywordflow">DO</span> iproc = 0, nproc - 1</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  recv_size(iproc) = local_row_len_nh * local_rows_nh *           &amp;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                     levs_to_send(iproc)</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  send_size(iproc) = g_blsize(1,fld_type,iproc) *                 &amp;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                     g_blsize(2,fld_type,iproc) *                 &amp;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                     levs_to_send(<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>)</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">! Do communications using MPL directly</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="keywordflow">DO</span> iproc = 0, nproc - 1</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  <span class="keyword">CALL </span>mpl_sendrecv( send_buff(1,iproc), send_size(iproc),        &amp;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                     mpl_real, iproc, 999, local_buffer(1,iproc), &amp;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                     recv_size(iproc), mpl_real, iproc, 999,      &amp;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                     my_comm, statu, ierr)</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;-<span class="comment">! 3) Copy data from received buffer into proper</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">!    decomposed data locations</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;-<span class="keywordflow">DO</span> iproc = 0, nproc - 1</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;  kpos(iproc) = 0</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">! Copy local_buffer (no halos) into local_field (with halos)</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">! Need to get levels right too.</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="keywordflow">DO</span> k = 1, local_levs</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;  <span class="keywordflow">DO</span> j = 1+halo_y, local_rows - halo_y</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordflow">DO</span> i = 1+halo_x, local_row_len - halo_x</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;      pos = i - halo_x +                                          &amp;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            (j - halo_y - 1) * local_row_len_nh +                 &amp;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            kpos(pe_for_level(k)) * local_rows_nh *               &amp;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                                    local_row_len_nh</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;      local_field(i,j,k)                                          &amp;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;      = local_buffer(pos,pe_for_level(k))</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;  kpos(pe_for_level(k)) = kpos(pe_for_level(k)) + 1</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;SCATTER_FIELD_ML&#39;</span>,zhook_out,zhook_handle)</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="keywordflow">RETURN</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="keyword">END SUBROUTINE </span><a class="code" href="scatter__field__ml-sctfml1c_8f90.xhtml#a83e9cd7cbb16706828e345ab71465340" title="This routine is a direct inverse of GATHER_field_ML. It takes. ">scatter_field_ml</a></div></div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
