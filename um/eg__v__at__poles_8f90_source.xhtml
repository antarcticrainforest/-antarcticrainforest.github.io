<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>UM General Atmosphere: /home/wilfred/PhD/UM/src/atmosphere/dynamics_advection/eg_v_at_poles.f90 Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="unified_model_logo_2.jpeg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">UM General Atmosphere
   &#160;<span id="projectnumber">8.6</span>
   </div>
   <div id="projectbrief">UK Met Offices Unified Model</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_1df14ea1ac826f73bc3062fa8a76e0c2.xhtml">atmosphere</a></li><li class="navelem"><a class="el" href="dir_cd31b8e5b091f70cb512ede7e9775b9c.xhtml">dynamics_advection</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">eg_v_at_poles.f90</div>  </div>
</div><!--header-->
<div class="contents">
<a href="eg__v__at__poles_8f90.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00005"></a><span class="lineno"><a class="line" href="namespaceeg__v__at__poles__mod.xhtml">    5</a></span>&#160;<span class="keyword">MODULE</span> <a class="code" href="namespaceeg__v__at__poles__mod.xhtml" title="Subroutine Interface: ">eg_v_at_poles_mod</a></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#if !defined(RECON)</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor"></span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespaceglobal__2d__sums__mod.xhtml" title="Module GLOBAL_2D_SUMS_MOD. ">global_2d_sums_mod</a><span class="keywordtype">, ONLY</span>: &amp;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;    <a class="code" href="namespaceglobal__2d__sums__mod.xhtml#ac3fe3c2679168085c4635a17e5f82215">global_2d_sums</a></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="keyword">CONTAINS</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">SUBROUTINE </span><a class="code" href="namespaceeg__v__at__poles__mod.xhtml#a2b4413ba994c589340c64169af4db7da">eg_v_at_poles</a>(u,v, pole_sgn_flip,                                 &amp;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;                   jj_u_pole, jj_v_pole, udim_in,vdim_in,u_pole_v,u_pole_u,  &amp;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;                   v_pole_out,xi1_pole_out)</div><div class="line"><a name="l00017"></a><span class="lineno"><a class="line" href="namespaceeg__v__at__poles__mod.xhtml#a2b4413ba994c589340c64169af4db7da">   17</a></span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keywordtype">USE </span>parkind1<span class="keywordtype">, ONLY</span>: jpim, jprb       <span class="comment">!DrHook</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keywordtype">USE </span>yomhook<span class="keywordtype">,  ONLY</span>: lhook, dr_hook   <span class="comment">!DrHook</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keywordtype">USE </span>conversions_mod</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespacehoriz__grid__mod.xhtml">horiz_grid_mod</a></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="keywordtype">USE </span>atm_fields_bounds_mod</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespaceproc__info__mod.xhtml" title="Processor parallel properties and pointers. Processor parallel properties and pointers. ">proc_info_mod</a><span class="keywordtype">, ONLY</span> : <a class="code" href="namespaceproc__info__mod.xhtml#af1e18f698ecadfe158d7852c2e161834">global_row_length</a>, <a class="code" href="namespaceproc__info__mod.xhtml#ac52ee313412f2bbd0e66a56738c4a775">gc_proc_row_group</a></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespaceeg__parameters__mod.xhtml">eg_parameters_mod</a><span class="keywordtype">, ONLY</span> : <a class="code" href="namespaceeg__parameters__mod.xhtml#a664bb8238aff09b69f47045dfa24de5b" title="Method: ">pole_consts</a></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespaceereport__mod.xhtml" title="This file belongs in section: Misc. ">ereport_mod</a><span class="keywordtype">, ONLY</span> : <a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">! Description: Calcualte v at the north and south poles</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">! Code description:</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keywordtype">REAL(KIND=jprb)</span>               :: zhook_handle</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keywordtype">REAL</span>,    <span class="keywordtype">INTENT(IN)</span> :: pole_sgn_flip</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: jj_v_pole, jj_u_pole</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;type(array_dims)   :: udim_in,vdim_in</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(INOUT)</span> :: v(vdim_in%i_start:vdim_in%i_end,                        &amp;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                         vdim_in%j_start:vdim_in%j_end,                        &amp;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                         vdim_in%k_start:vdim_in%k_end)</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span>    :: u(udim_in%i_start:udim_in%i_end,                        &amp;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                         udim_in%j_start:udim_in%j_end,                        &amp;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                         udim_in%k_start:udim_in%k_end)</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">OPTIONAL</span>, <span class="keywordtype">INTENT(INOUT)</span>  :: u_pole_v(vdims%i_start:vdims%i_end,1,        &amp;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                                           vdims%k_start:vdims%k_end)</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">OPTIONAL</span>, <span class="keywordtype">INTENT(INOUT)</span>  :: u_pole_u(udims%i_start:udims%i_end,1,        &amp;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                                           udims%k_start:udims%k_end)</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">OPTIONAL</span>, <span class="keywordtype">INTENT(OUT)</span> ::   v_pole_out(udim_in%k_start:udim_in%k_end)</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">OPTIONAL</span>, <span class="keywordtype">INTENT(OUT)</span> :: xi1_pole_out(udim_in%k_start:udim_in%k_end)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="keywordtype">INTEGER</span> :: i, k, info</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="keywordtype">REAL</span>    :: c, d, e, f, dx, pi_fac</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="keywordtype">REAL</span>    :: a, b, g, xi1_pole, v_pole</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="keywordtype">REAL</span>    :: glob_sum(udims%k_start:udims%k_end,3)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="keywordtype">REAL</span>    :: temp1, temp2, cs, sn</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="preprocessor">#if !defined(LINUX)</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="preprocessor"></span><span class="keywordtype">REAL</span>    :: tmp_loc(udims%i_start:udims%i_end, udims%k_start:udims%k_end,3)</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="preprocessor"></span><span class="keywordtype">REAL</span>    :: tmp_loc(udims%i_start:udims%i_end,udims%k_start:udims%k_end)</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="preprocessor"></span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;EG_V_AT_POLES&#39;</span>,zhook_in,zhook_handle)</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;pi_fac = 1.0/pi</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;c = <a class="code" href="namespaceeg__parameters__mod.xhtml#a664bb8238aff09b69f47045dfa24de5b" title="Method: ">pole_consts</a>(1)</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;d = <a class="code" href="namespaceeg__parameters__mod.xhtml#a664bb8238aff09b69f47045dfa24de5b" title="Method: ">pole_consts</a>(2)</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;e = <a class="code" href="namespaceeg__parameters__mod.xhtml#a664bb8238aff09b69f47045dfa24de5b" title="Method: ">pole_consts</a>(3)</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;f = <a class="code" href="namespaceeg__parameters__mod.xhtml#a664bb8238aff09b69f47045dfa24de5b" title="Method: ">pole_consts</a>(4)</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="keywordflow">DO</span> k = udims%k_start, udims%k_end</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;   <span class="keywordflow">DO</span> i = udims%i_start, udims%i_end</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;      dx = pi_fac*( <a class="code" href="namespacehoriz__grid__mod.xhtml#a1f826e912b9f334f26b0f333445e9186" title="Method: ">xi1_p</a>(i+1) - <a class="code" href="namespacehoriz__grid__mod.xhtml#a1f826e912b9f334f26b0f333445e9186" title="Method: ">xi1_p</a>(i) )</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="preprocessor">#if !defined(LINUX)</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="preprocessor"></span>      tmp_loc(i,k,1) = dx*u(i,jj_u_pole,k)*sin(<a class="code" href="namespacehoriz__grid__mod.xhtml#a99f02318acdc4ea15a1df0fb427a45d7">xi1_u</a>(i))</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;      tmp_loc(i,k,2) = dx*u(i,jj_u_pole,k)*cos(<a class="code" href="namespacehoriz__grid__mod.xhtml#a99f02318acdc4ea15a1df0fb427a45d7">xi1_u</a>(i))</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;      tmp_loc(i,k,3) = dx*u(i,jj_u_pole,k)</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="preprocessor"></span>      tmp_loc(i,k) = dx*u(i,jj_u_pole,k)*sin(<a class="code" href="namespacehoriz__grid__mod.xhtml#a99f02318acdc4ea15a1df0fb427a45d7">xi1_u</a>(i))</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="preprocessor"></span><span class="keywordflow">   END DO</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="preprocessor">#if !defined(LINUX)</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="preprocessor"></span><span class="keyword">CALL </span><a class="code" href="namespaceglobal__2d__sums__mod.xhtml#ac3fe3c2679168085c4635a17e5f82215">global_2d_sums</a>(tmp_loc,udims%i_end-udims%i_start+1,             &amp;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                    1, 0, 0, 3*(udims%k_end-udims%k_start+1),        &amp;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                    glob_sum,  <a class="code" href="namespaceproc__info__mod.xhtml#ac52ee313412f2bbd0e66a56738c4a775">gc_proc_row_group</a>)<span class="preprocessor">#else</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="preprocessor"></span><span class="keyword">CALL </span><a class="code" href="namespaceglobal__2d__sums__mod.xhtml#ac3fe3c2679168085c4635a17e5f82215">global_2d_sums</a>(tmp_loc(:,:),udims%i_end-udims%i_start+1,        &amp;                    1, 0, 0, (udims%k_end-udims%k_start+1),          &amp;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                    glob_sum(:,1),  <a class="code" href="namespaceproc__info__mod.xhtml#ac52ee313412f2bbd0e66a56738c4a775">gc_proc_row_group</a>)</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="keywordflow">DO</span> k = udims%k_start, udims%k_end</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;   <span class="keywordflow">DO</span> i = udims%i_start, udims%i_end</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;      dx = pi_fac*( <a class="code" href="namespacehoriz__grid__mod.xhtml#a1f826e912b9f334f26b0f333445e9186" title="Method: ">xi1_p</a>(i+1) - <a class="code" href="namespacehoriz__grid__mod.xhtml#a1f826e912b9f334f26b0f333445e9186" title="Method: ">xi1_p</a>(i) )</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;      tmp_loc(i,k) = dx*u(i,jj_u_pole,k)*cos(<a class="code" href="namespacehoriz__grid__mod.xhtml#a99f02318acdc4ea15a1df0fb427a45d7">xi1_u</a>(i))</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="keywordflow">   END DO</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="keyword">CALL </span><a class="code" href="namespaceglobal__2d__sums__mod.xhtml#ac3fe3c2679168085c4635a17e5f82215">global_2d_sums</a>(tmp_loc(:,:),udims%i_end-udims%i_start+1,        &amp;                    1, 0, 0, (udims%k_end-udims%k_start+1),          &amp;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                    glob_sum(:,2),  <a class="code" href="namespaceproc__info__mod.xhtml#ac52ee313412f2bbd0e66a56738c4a775">gc_proc_row_group</a>)</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="keywordflow">DO</span> k = udims%k_start, udims%k_end</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;   <span class="keywordflow">DO</span> i = udims%i_start, udims%i_end</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;      dx = pi_fac*( <a class="code" href="namespacehoriz__grid__mod.xhtml#a1f826e912b9f334f26b0f333445e9186" title="Method: ">xi1_p</a>(i+1) - <a class="code" href="namespacehoriz__grid__mod.xhtml#a1f826e912b9f334f26b0f333445e9186" title="Method: ">xi1_p</a>(i) )</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;     tmp_loc(i,k) = dx*u(i,jj_u_pole,k)</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="keywordflow">   END DO</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="keyword">CALL </span><a class="code" href="namespaceglobal__2d__sums__mod.xhtml#ac3fe3c2679168085c4635a17e5f82215">global_2d_sums</a>(tmp_loc(:,:),udims%i_end-udims%i_start+1,        &amp;                    1, 0, 0, (udims%k_end-udims%k_start+1),          &amp;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                    glob_sum(:,3),  <a class="code" href="namespaceproc__info__mod.xhtml#ac52ee313412f2bbd0e66a56738c4a775">gc_proc_row_group</a>)<span class="preprocessor">#endif</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="preprocessor"></span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="keywordflow">DO</span> k = udims%k_start, udims%k_end</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;   a     = glob_sum(k,1)</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;   b     = glob_sum(k,2)</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;   g     = glob_sum(k,3)</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;   temp1 = (1.0-c-2.0*e**2)*(b-f*g) - (a-e*g)*(d-2.0*e*f)</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;   temp2 =-(1.0+c-2.0*f**2)*(a-e*g) + (b-f*g)*(d-2.0*e*f)</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;   temp1 = pole_sgn_flip*temp1</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;   temp2 = pole_sgn_flip*temp2</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;   <span class="keywordflow">IF</span>( temp1 == 0.0 .AND. temp2 == 0.0 ) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;         xi1_pole = 0.0</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;   <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;         xi1_pole = atan2(temp1,temp2)</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="keywordflow">   END IF</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;   cs     = cos(xi1_pole)</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;   sn     = sin(xi1_pole)</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;   dx     = sin(<a class="code" href="namespacehoriz__grid__mod.xhtml#ad020c247453d4104934bdffdf8aae94d">xi2_p</a>(jj_u_pole))</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;   temp1  = dx*(1.0 - c*(1.0-2.0*sn**2) - 2.0*d*sn*cs                 &amp;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                    - 2.0*(e*cs - f*sn)**2 )</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;   v_pole = ( (a-e*g)*cs - (b-f*g)*sn )/temp1</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;   <span class="keywordflow">DO</span> i = vdims%i_start, vdims%i_end</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;      v(i,jj_v_pole,k) = v_pole*cos(<a class="code" href="namespacehoriz__grid__mod.xhtml#a1f826e912b9f334f26b0f333445e9186" title="Method: ">xi1_p</a>(i)-xi1_pole)</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="keywordflow">   END DO</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">! END OF SHARED CODE SECTION</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">!****************************************************************************</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;   <span class="keywordflow">IF</span> (<span class="keyword">PRESENT</span>(u_pole_v)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;      <span class="keywordflow">DO</span> i = vdims%i_start, vdims%i_end</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;         u_pole_v(i,1,k) =  -1.0*pole_sgn_flip*v_pole*sin(<a class="code" href="namespacehoriz__grid__mod.xhtml#a1f826e912b9f334f26b0f333445e9186" title="Method: ">xi1_p</a>(i)-xi1_pole)</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="keywordflow">   END IF</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;   <span class="keywordflow">IF</span> (<span class="keyword">PRESENT</span>(u_pole_u)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;      <span class="keywordflow">DO</span> i = udims%i_start, udims%i_end</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;         u_pole_u(i,1,k) = -1.0*pole_sgn_flip*v_pole*sin(<a class="code" href="namespacehoriz__grid__mod.xhtml#a99f02318acdc4ea15a1df0fb427a45d7">xi1_u</a>(i)-xi1_pole)</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="keywordflow">   END IF</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;   <span class="keywordflow">IF</span> (<span class="keyword">PRESENT</span>(  v_pole_out))   v_pole_out(k)=   v_pole</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;   <span class="keywordflow">IF</span> (<span class="keyword">PRESENT</span>(xi1_pole_out)) xi1_pole_out(k)= xi1_pole</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;EG_V_AT_POLES&#39;</span>,zhook_out,zhook_handle)</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="keywordflow">RETURN</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="keyword">END SUBROUTINE </span><a class="code" href="namespaceeg__v__at__poles__mod.xhtml#a2b4413ba994c589340c64169af4db7da">eg_v_at_poles</a></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">! =====================================================================</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="keyword">SUBROUTINE </span><a class="code" href="namespaceeg__v__at__poles__mod.xhtml#aa2522dc23a3c33da7f9694e5863f75f2">eg_uv_at_poles_bgrid</a> &amp;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                  (u, row_length, rows, n_rows,                       &amp;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                   offx, offy, pole_consts, pole_sgn_flip,            &amp;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                   j_pole_src, j_pole_dest, v)</div><div class="line"><a name="l00205"></a><span class="lineno"><a class="line" href="namespaceeg__v__at__poles__mod.xhtml#aa2522dc23a3c33da7f9694e5863f75f2">  205</a></span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="keywordtype">USE </span>parkind1<span class="keywordtype">, ONLY</span>: jpim, jprb       <span class="comment">!DrHook</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="keywordtype">USE </span>yomhook<span class="keywordtype">,  ONLY</span>: lhook, dr_hook   <span class="comment">!DrHook</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="keywordtype">USE </span>conversions_mod</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespacehoriz__grid__mod.xhtml">horiz_grid_mod</a></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="keywordtype">USE </span>atm_fields_bounds_mod</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespaceproc__info__mod.xhtml" title="Processor parallel properties and pointers. Processor parallel properties and pointers. ">proc_info_mod</a><span class="keywordtype">, ONLY</span> :  <a class="code" href="namespaceproc__info__mod.xhtml#af1e18f698ecadfe158d7852c2e161834">global_row_length</a>, <a class="code" href="namespaceproc__info__mod.xhtml#ac52ee313412f2bbd0e66a56738c4a775">gc_proc_row_group</a></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">! Description: Calculate u or v at the north and south poles on!              B grid pressure levels, one level at a time</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment">! !</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">! Method: Chapter 8, ENDGame formulation version 1.01</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment">! !</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment">! Code description:</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment">!   Language: Fortran 90.</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">!   This code is written to UM programming standards version 8.3.</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment">! Subroutine arguments</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="keywordtype">REAL(KIND=jprb)</span>               :: zhook_handle</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="keywordtype">REAL</span>,    <span class="keywordtype">INTENT(IN)</span> :: pole_sgn_flip</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: j_pole_src, j_pole_dest</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment">! Array dimensions</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="keywordtype">INTEGER</span> :: offx, offy</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="keywordtype">INTEGER</span> :: row_length, rows, n_rows</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="keywordtype">REAL</span>  pole_consts(4)</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment">! u and v on B grid</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment">! Note: if v present, v is computed; otherwise u is computed</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(INOUT)</span> :: u(udims%i_start:udims%i_end, vdims%<a class="code" href="typ__atm__fields_8h.xhtml#a6d85a200859105ba485b3629e45bf3f1">j_start</a>:vdims%j_end)</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(INOUT)</span>, <span class="keywordtype">OPTIONAL</span> :: &amp;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                       v(udims%i_start:udims%i_end, vdims%<a class="code" href="typ__atm__fields_8h.xhtml#a6d85a200859105ba485b3629e45bf3f1">j_start</a>:vdims%j_end)</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment">! Local variables</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="keywordtype">INTEGER</span> :: i, info</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="keywordtype">REAL</span>    :: c, d, e, f, dx, pi_fac</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="keywordtype">REAL</span>    :: a, b, g, xi1_pole</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="keywordtype">REAL</span>    :: mag_pole_wind  <span class="comment">! Magnitude of polar wind</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="keywordtype">REAL</span>    :: glob_sum(3)</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="keywordtype">REAL</span>    :: temp1, temp2, cs, sn</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">DIMENSION(udims%i_start:udims%i_end,3)</span> :: tmp_loc</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment">! 1.0 Start of subroutine code: perform the calculation.</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;EG_V_AT_POLES_BGRID&#39;</span>,zhook_in,zhook_handle)</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;pi_fac = 1.0/pi</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;c = pole_consts(1)</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;d = pole_consts(2)</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;e = pole_consts(3)</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;f = pole_consts(4)</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;tmp_loc(:,:) = 0.0</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="keywordflow">DO</span> i = udims%i_start, udims%i_end</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;  dx = pi_fac*( <a class="code" href="namespacehoriz__grid__mod.xhtml#a1f826e912b9f334f26b0f333445e9186" title="Method: ">xi1_p</a>(i+1) - <a class="code" href="namespacehoriz__grid__mod.xhtml#a1f826e912b9f334f26b0f333445e9186" title="Method: ">xi1_p</a>(i) )</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;  tmp_loc(i,1) = dx *u(i,j_pole_src) *sin(<a class="code" href="namespacehoriz__grid__mod.xhtml#a99f02318acdc4ea15a1df0fb427a45d7">xi1_u</a>(i))</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;  tmp_loc(i,2) = dx *u(i,j_pole_src) *cos(<a class="code" href="namespacehoriz__grid__mod.xhtml#a99f02318acdc4ea15a1df0fb427a45d7">xi1_u</a>(i))</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  tmp_loc(i,3) = dx *u(i,j_pole_src)</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="keyword">CALL </span><a class="code" href="namespaceglobal__2d__sums__mod.xhtml#ac3fe3c2679168085c4635a17e5f82215">global_2d_sums</a>(tmp_loc,row_length,        &amp;                    1, 0, 0, 3,                &amp;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                    glob_sum,  <a class="code" href="namespaceproc__info__mod.xhtml#ac52ee313412f2bbd0e66a56738c4a775">gc_proc_row_group</a>)</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;a     = glob_sum(1)</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;b     = glob_sum(2)</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;g     = glob_sum(3)</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;temp1 = (1.0-c-2.0*e**2)*(b-f*g) - (a-e*g)*(d-2.0*e*f)</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;temp2 =-(1.0+c-2.0*f**2)*(a-e*g) + (b-f*g)*(d-2.0*e*f)</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;temp1 = pole_sgn_flip*temp1</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;temp2 = pole_sgn_flip*temp2</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="keywordflow">IF</span>( temp1 == 0.0 .AND. temp2 == 0.0 ) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;      xi1_pole = 0.0</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="keywordflow">ELSE</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;      xi1_pole = atan2(temp1,temp2)</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="keywordflow">END IF</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;cs     = cos(xi1_pole)</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;sn     = sin(xi1_pole)</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;dx     = sin(<a class="code" href="namespacehoriz__grid__mod.xhtml#ad020c247453d4104934bdffdf8aae94d">xi2_p</a>(j_pole_src))</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;temp1  = dx*(1.0 - c*(1.0-2.0*sn**2) - 2.0*d*sn*cs                 &amp;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                 - 2.0*(e*cs - f*sn)**2 )</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;mag_pole_wind = ( (a-e*g)*cs - (b-f*g)*sn )/temp1</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="keywordflow">DO</span> i = udims%i_start, udims%i_end</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;  <span class="keywordflow">IF</span> (<span class="keyword">PRESENT</span>(v)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    v(i,j_pole_dest) = mag_pole_wind*cos(<a class="code" href="namespacehoriz__grid__mod.xhtml#a99f02318acdc4ea15a1df0fb427a45d7">xi1_u</a>(i)-xi1_pole)</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;  <span class="keywordflow">ELSE</span>    u(i,j_pole_dest) = pole_sgn_flip*mag_pole_wind*sin(<a class="code" href="namespacehoriz__grid__mod.xhtml#a99f02318acdc4ea15a1df0fb427a45d7">xi1_u</a>(i)-xi1_pole)</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;EG_V_AT_POLES_BGRID&#39;</span>,zhook_out,zhook_handle)</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="keywordflow">RETURN</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="keyword">END SUBROUTINE </span><a class="code" href="namespaceeg__v__at__poles__mod.xhtml#aa2522dc23a3c33da7f9694e5863f75f2">eg_uv_at_poles_bgrid</a></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="preprocessor"></span><span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;  <span class="keyword">TYPE</span> array_dims</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;  <span class="keywordtype">INTEGER</span> :: i_start =-huge(int(1))</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;  <span class="keywordtype">INTEGER</span> :: i_end   = huge(int(1))</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;  <span class="keywordtype">INTEGER</span> :: j_start =-huge(int(1))</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;  <span class="keywordtype">INTEGER</span> :: j_end   = huge(int(1))</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;  <span class="keywordtype">INTEGER</span> :: k_start =-huge(int(1))</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;  <span class="keywordtype">INTEGER</span> :: k_end   = huge(int(1))</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;  <span class="keywordtype">INTEGER</span> :: halo_i  = huge(int(1))</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;  <span class="keywordtype">INTEGER</span> :: halo_j  = huge(int(1))</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="keyword">  END TYPE </span>array_dims</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="keyword">CONTAINS</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="keyword">SUBROUTINE </span><a class="code" href="namespaceeg__v__at__poles__mod.xhtml#a2b4413ba994c589340c64169af4db7da">eg_v_at_poles</a>(u,v,xi1_u, xi1_p, xi2_p, pole_sgn_flip,      &amp;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                             jj_u_pole, jj_v_pole, udim_in,vdim_in)</div><div class="line"><a name="l00332"></a><span class="lineno"><a class="line" href="namespaceeg__v__at__poles__mod.xhtml#a4077736dddfa371166fc58ff75af308a">  332</a></span>&#160;<span class="keywordtype">USE </span>conversions_mod</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="comment">! Description:</span></div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="comment">!  an implementation of eg_v_at_poles.F90</span></div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="comment">! Method:</span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="comment">! Code description:</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="comment">!   Language: Fortran 90.</span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="comment">!   This code is written to UM programming standards version 8.3.</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="keywordtype">REAL</span>,    <span class="keywordtype">INTENT(IN)</span> :: pole_sgn_flip</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: jj_v_pole, jj_u_pole</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;type(array_dims)   :: udim_in,vdim_in</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(INOUT)</span> :: v(vdim_in%i_start:vdim_in%i_end,                        &amp;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                         vdim_in%j_start:vdim_in%j_end,                        &amp;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                         vdim_in%k_start:vdim_in%k_end)</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span>    :: u(udim_in%i_start:udim_in%i_end,                        &amp;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                         udim_in%j_start:udim_in%j_end,                        &amp;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                         udim_in%k_start:udim_in%k_end)</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span> :: xi1_u(udim_in%i_start:udim_in%i_end)</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span> :: xi1_p(vdim_in%i_start:vdim_in%i_end)</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span> :: xi2_p(udim_in%j_start:udim_in%j_end)</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="comment">! Local variables</span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="keywordtype">INTEGER</span> :: i, k, info</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="keywordtype">REAL</span>    :: c, d, e, f, dx, pi_fac</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="keywordtype">REAL</span>    :: a, b, g, xi1_pole, v_pole</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="keywordtype">REAL</span>    :: glob_sum(udim_in%k_start:udim_in%k_end,3)</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="keywordtype">REAL</span>    :: temp1, temp2, cs, sn</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="keywordtype">REAL</span>    :: tmp_loc(udim_in%i_start:udim_in%i_end, &amp;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                   udim_in%k_start:udim_in%k_end,3)</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="keywordtype">REAL</span> pole_consts(4)</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;pi_fac = 1.0/pi</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    i = udim_in%i_start</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    dx = ( xi1_p(i+1) - xi1_p(vdim_in%i_end) + 2.0*pi  )/(2.0*pi)</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    pole_consts(1) = dx*cos(2.0*xi1_u(i))</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    pole_consts(2) = dx*sin(2.0*xi1_u(i))</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    pole_consts(3) = dx*sin(    xi1_u(i))</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    pole_consts(4) = dx*cos(    xi1_u(i))</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <span class="keywordflow">DO</span> i = udim_in%i_start+1, udim_in%i_end</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;      dx = ( xi1_p(i+1) - xi1_p(i) )/(2.0*pi)</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;      pole_consts(1) = pole_consts(1) + dx*cos(2.0*xi1_u(i))</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;      pole_consts(2) = pole_consts(2) + dx*sin(2.0*xi1_u(i))</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;      pole_consts(3) = pole_consts(3) + dx*sin(    xi1_u(i))</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;      pole_consts(4) = pole_consts(4) + dx*cos(    xi1_u(i))</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="comment">! First do south pole</span></div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;c = pole_consts(1)</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;d = pole_consts(2)</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;e = pole_consts(3)</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;f = pole_consts(4)</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="keywordflow">DO</span> k = udim_in%k_start, udim_in%k_end</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;   i = udim_in%i_start</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;   dx = pi_fac*( xi1_p(i+1) -  xi1_p(vdim_in%i_end) + 2.0*pi )</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;   tmp_loc(i,k,1) = dx*u(i,jj_u_pole,k)*sin(xi1_u(i))</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;   tmp_loc(i,k,2) = dx*u(i,jj_u_pole,k)*cos(xi1_u(i))</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;   tmp_loc(i,k,3) = dx*u(i,jj_u_pole,k)</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;   <span class="keywordflow">DO</span> i = udim_in%i_start+1, udim_in%i_end</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;      dx = pi_fac*( xi1_p(i+1) - xi1_p(i) )</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;      tmp_loc(i,k,1) = dx*u(i,jj_u_pole,k)*sin(xi1_u(i))</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;      tmp_loc(i,k,2) = dx*u(i,jj_u_pole,k)*cos(xi1_u(i))</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;      tmp_loc(i,k,3) = dx*u(i,jj_u_pole,k)</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="keywordflow">   END DO</span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;glob_sum(udim_in%k_start:udim_in%k_end,1) = &amp;</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;     <a class="code" href="sum_8f90.xhtml#a025c1f845b6a4ea9c9f48b8612cd82e7" title="Generic routines for manipulating pp-fields within Fieldcalc. ">sum</a>(tmp_loc(:,udim_in%k_start:udim_in%k_end,1) )</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;glob_sum(udim_in%k_start:udim_in%k_end,2) = &amp;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;     <a class="code" href="sum_8f90.xhtml#a025c1f845b6a4ea9c9f48b8612cd82e7" title="Generic routines for manipulating pp-fields within Fieldcalc. ">sum</a>(tmp_loc(:,udim_in%k_start:udim_in%k_end,2) )</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;glob_sum(udim_in%k_start:udim_in%k_end,3) = &amp;</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;     <a class="code" href="sum_8f90.xhtml#a025c1f845b6a4ea9c9f48b8612cd82e7" title="Generic routines for manipulating pp-fields within Fieldcalc. ">sum</a>(tmp_loc(:,udim_in%k_start:udim_in%k_end,3) )</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="keywordflow">DO</span> k = udim_in%k_start, udim_in%k_end</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;   a     = glob_sum(k,1)</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;   b     = glob_sum(k,2)</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;   g     = glob_sum(k,3)</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;   temp1 = (1.0-c-2.0*e**2)*(b-f*g) - (a-e*g)*(d-2.0*e*f)</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;   temp2 =-(1.0+c-2.0*f**2)*(a-e*g) + (b-f*g)*(d-2.0*e*f)</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;   temp1 = pole_sgn_flip*temp1</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;   temp2 = pole_sgn_flip*temp2</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;   <span class="keywordflow">IF</span>( temp1 == 0.0 .AND. temp2 == 0.0 ) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;         xi1_pole = 0.0</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;   <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;         xi1_pole = atan2(temp1,temp2)</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="keywordflow">   END IF</span></div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;   cs     = cos(xi1_pole)</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;   sn     = sin(xi1_pole)</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;   dx     = sin(xi2_p(jj_u_pole))</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;   temp1  = dx*(1.0 - c*(1.0-2.0*sn**2) - 2.0*d*sn*cs                 &amp;</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                    - 2.0*(e*cs - f*sn)**2 )</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;   v_pole = ( (a-e*g)*cs - (b-f*g)*sn )/temp1</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;   <span class="keywordflow">DO</span> i = vdim_in%i_start, vdim_in%i_end</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;      v(i,jj_v_pole,k) = v_pole*cos(xi1_p(i)-xi1_pole)</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;<span class="keywordflow">   END DO</span></div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="keywordflow">RETURN</span></div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;<span class="keyword">END SUBROUTINE </span><a class="code" href="namespaceeg__v__at__poles__mod.xhtml#a2b4413ba994c589340c64169af4db7da">eg_v_at_poles</a></div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;<span class="preprocessor"></span></div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="keyword">END MODULE </span><a class="code" href="namespaceeg__v__at__poles__mod.xhtml" title="Subroutine Interface: ">eg_v_at_poles_mod</a></div></div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
