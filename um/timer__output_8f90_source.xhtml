<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>UM General Atmosphere: /home/wilfred/PhD/UM/src/control/timer/timer_output.f90 Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="unified_model_logo_2.jpeg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">UM General Atmosphere
   &#160;<span id="projectnumber">8.6</span>
   </div>
   <div id="projectbrief">UK Met Offices Unified Model</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_b81b067251166617f9d0a8c0cfc3a4a9.xhtml">control</a></li><li class="navelem"><a class="el" href="dir_f2e631088e6a5c988eaaa0b303eb1b79.xhtml">timer</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">timer_output.f90</div>  </div>
</div><!--header-->
<div class="contents">
<a href="timer__output_8f90.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="keyword">SUBROUTINE </span><a class="code" href="timer__output_8f90.xhtml#a8925eb1b78c550384b5a548047aec8c1" title="SUBROUTINE TIMER_OUTPUT -!&gt; ">timer_output</a>(                                                       &amp;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;  in_number_of_timers, ni_number_of_timers,                                    &amp;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;  in_cpu_time_elapsed, ni_cpu_time_elapsed,                                    &amp;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;  in_wallclock_time_elapsed, ni_wallclock_time_elapsed,                        &amp;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;  in_number_of_times_timed, ni_number_of_times_timed,                          &amp;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;  in_timer_name, ni_timer_name,                                                &amp;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;  action,message)</div><div class="line"><a name="l00019"></a><span class="lineno"><a class="line" href="timer__output_8f90.xhtml#a8925eb1b78c550384b5a548047aec8c1">   19</a></span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespaceios__common.xhtml" title="Code Owner: See Unified Model Code owners HTML page. ">ios_common</a><span class="keywordtype">, ONLY</span> :                                                         &amp;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <a class="code" href="namespaceios__common.xhtml#a2c973e11abf690e8e0215ca4d7e669de">l_ios_active</a>,                                                              &amp;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <a class="code" href="namespaceios__common.xhtml#af0311e65c07a278167172c181b8f3d9a" title="Which global ranks in the application do IO. ">io_servers</a>,                                                                &amp;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <a class="code" href="namespaceios__common.xhtml#a2ebf6f57a482ffd5b9a0a78b7f20deb2" title="If I am an io server. ">l_io_server</a>,                                                               &amp;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    global_procs,                                                               &amp;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <a class="code" href="namespaceios__common.xhtml#a11a7b0ca6c5328a01b6f8f7c9abae1f8">ios_server_groups</a>,                                                         &amp;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <a class="code" href="namespaceios__common.xhtml#af10dbbd2f66ff01dd74e518bc3690497">ios_tasks_per_server</a>,                                                      &amp;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    model_procs</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keywordtype">USE </span>parkind1<span class="keywordtype">, ONLY</span>: jprb, jpim</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keywordtype">USE </span>yomhook<span class="keywordtype">, ONLY</span>: lhook, dr_hook</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespaceereport__mod.xhtml" title="This file belongs in section: Misc. ">ereport_mod</a><span class="keywordtype">, ONLY</span> : <a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keywordtype">USE </span>um_parvars</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespaceumprintmgr.xhtml" title="This file belongs in section: Misc. ">umprintmgr</a><span class="keywordtype">, ONLY</span> :      &amp;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>,                &amp;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keywordtype">INTEGER</span>                                                                        &amp;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;  in_number_of_timers                                                          &amp;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                       <span class="comment">! IN number of inclusive timers</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;, ni_number_of_timers                                                          &amp;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                       <span class="comment">! IN number of non-inclusive timers</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;, in_number_of_times_timed(in_number_of_timers)                                &amp;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;, ni_number_of_times_timed(ni_number_of_timers)                                &amp;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;, action  <span class="comment">! final output or intermediate</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keywordtype">REAL</span>                                                                           &amp;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;  in_cpu_time_elapsed(in_number_of_timers)                                     &amp;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;, ni_cpu_time_elapsed(ni_number_of_timers)                                     &amp;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;, in_wallclock_time_elapsed(in_number_of_timers)                               &amp;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;, ni_wallclock_time_elapsed(ni_number_of_timers)</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="keywordtype">CHARACTER(LEN=20)</span>                                                              &amp;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;  in_timer_name(in_number_of_timers)                                           &amp;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;, ni_timer_name(ni_number_of_timers)</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="keywordtype">CHARACTER(LEN=*)</span>                                                               &amp;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;   message                   <span class="comment">! IN message to print</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="keywordtype">INTEGER</span> max_timers</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<a class="code" href="namespaceukca__radaer__struct__mod.xhtml#a7b11899c3ce190bb3d00d3a633af780e">parameter</a>(max_timers=300)</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="keywordtype">INTEGER</span> last_call_to_timer,intermediate_output</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<a class="code" href="namespaceukca__radaer__struct__mod.xhtml#a7b11899c3ce190bb3d00d3a633af780e">parameter</a>(last_call_to_timer=2,                                                &amp;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;          intermediate_output=7)</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="keywordtype">INTEGER</span>                                                                        &amp;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  number_of_timers                                                             &amp;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;, local_number_of_times_timed(max_timers)</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="keywordtype">REAL</span>                                                                           &amp;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  local_cpu_time_elapsed(max_timers)                                           &amp;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;, local_wallclock_time_elapsed(max_timers)</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="keywordtype">CHARACTER(LEN=20)</span>                                                                   &amp;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  local_timer_name(max_timers)</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="keywordtype">INTEGER</span>                                                                        &amp;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;  last_in_number_of_times_timed(max_timers)                                    &amp;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;, last_ni_number_of_times_timed(max_timers)</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="keywordtype">REAL</span>                                                                           &amp;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  last_in_cpu_time_elapsed(max_timers)                                         &amp;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;, last_ni_cpu_time_elapsed(max_timers)                                         &amp;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;, last_in_wallclock_time_elapsed(max_timers)                                   &amp;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;, last_ni_wallclock_time_elapsed(max_timers)</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="keywordtype">LOGICAL</span>                                                                        &amp;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  first_intermediate_timer_call</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="keyword">DATA</span> first_intermediate_timer_call /.true./</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="keyword">DATA</span> last_in_number_of_times_timed /max_timers*0/</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="keyword">DATA</span> last_ni_number_of_times_timed /max_timers*0/</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="keyword">DATA</span> last_in_cpu_time_elapsed /max_timers*0.0/</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="keyword">DATA</span> last_ni_cpu_time_elapsed /max_timers*0.0/</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="keyword">DATA</span> last_in_wallclock_time_elapsed /max_timers*0.0/</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="keyword">DATA</span> last_ni_wallclock_time_elapsed /max_timers*0.0/</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="keywordtype">SAVE</span>                                                                           &amp;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  last_in_number_of_times_timed, last_ni_number_of_times_timed,                &amp;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  last_in_cpu_time_elapsed, last_ni_cpu_time_elapsed,                          &amp;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;  last_in_wallclock_time_elapsed, last_ni_wallclock_time_elapsed,              &amp;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  first_intermediate_timer_call</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="keywordtype">INTEGER</span> sortwork_int    <span class="comment">! work variable for sort</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="keywordtype">REAL</span>    sortwork_real   <span class="comment">! work variable for sort</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="keywordtype">CHARACTER(LEN=20)</span> sortwork_char <span class="comment">! work variable for sort</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="keywordtype">REAL</span> total_cpu_time,                                                           &amp;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                             <span class="comment">! total cpu time spent in program</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;     total_wallclock_time,                                                     &amp;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                             <span class="comment">! total wallclock time spent in</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">!                                  ! program</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;     average_cpu_elapsed,                                                      &amp;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                             <span class="comment">! average cpu elapsed time</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;     average_wallclock_elapsed,                                                &amp;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                                <span class="comment">! average wallclock elapsed time</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;     percent_of_cpu_total,                                                     &amp;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                             <span class="comment">! % of cpu time spent in a section</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;     percent_of_wallclock_total,                                               &amp;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                            <span class="comment">! % of wallclock time spent in a</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">!                                 ! section</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;     speed_up               <span class="comment">! speed_up=cpu/wallclock</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">! These are the declarations for MPP timer</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="keywordtype">INTEGER</span> info,                                                                  &amp;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  wallclock_max_pe(max_timers),wallclock_min_pe(max_timers),                   &amp;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  cpu_max_pe(max_timers),cpu_min_pe(max_timers)</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="keywordtype">REAL</span> wallclock_mean(max_timers),cpu_mean(max_timers),                          &amp;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;     wallclock_median(max_timers),cpu_median(max_timers),                      &amp;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;     wallclock_sd(max_timers),cpu_sd(max_timers),                              &amp;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;     wallclock_max(max_timers),wallclock_min(max_timers),                      &amp;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;     cpu_max(max_timers),cpu_min(max_timers),                                  &amp;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;     cpu_total(max_timers)</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="keywordtype">INTEGER</span>                                                                        &amp;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;  summ_n_timers                                                                &amp;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                   <span class="comment">! number of routines for ni summary</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;, routine_id          <span class="comment">! routine id on this processor</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">ALLOCATABLE</span> :: wallclock_times(:)<span class="comment">! wallclock time from each proc</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">ALLOCATABLE</span> :: cpu_times(:)              <span class="comment">! cpu time from each proc</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="keywordtype">REAL</span>              :: total_cpu,max_wall        <span class="comment">! total cpu, maxumum wallclock times</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="keywordtype">CHARACTER(LEN=20)</span> summ_section(max_timers)  <span class="comment">! names of sections</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="keyword">COMMON</span> /mpp_timer/ summ_n_timers,total_cpu,max_wall,   &amp;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                   summ_section</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">! Variables for loops etc.</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="keywordtype">INTEGER</span> i,j,k,timer_kind</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="keywordtype">CHARACTER(LEN=8)</span> env_num_threads <span class="comment">! to get environment variable OMP_NUM_THREADS</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="keywordtype">CHARACTER(LEN=80)</span> cmessage    <span class="comment">! Internal error message</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="keywordtype">INTEGER</span> err                 <span class="comment">! err return of fort_env_get subroutine</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="keywordtype">INTEGER</span> atm_num_threads, omp_max_threads     <span class="comment">! to store value read from env_num_threads</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="keywordtype">INTEGER</span> :: ICODE</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="keywordtype">CHARACTER(LEN=*)</span> routinename</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<a class="code" href="namespaceukca__radaer__struct__mod.xhtml#a7b11899c3ce190bb3d00d3a633af780e">parameter</a>(routinename = <span class="stringliteral">&#39;TIMER_OUTPUT&#39;</span>)</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="keywordtype">REAL(KIND=jprb)</span>               :: zhook_handle</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment">! Check to see if this is an intermediate output, and the first</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">! time it has been called</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;TIMER_OUTPUT&#39;</span>,zhook_in,zhook_handle)</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="keyword">ALLOCATE</span>(wallclock_times(0:<a class="code" href="namespaceum__parcore.xhtml#ad078cc7202ef25b751b3e270bd3c4287">nproc_max</a>-1))</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="keyword">ALLOCATE</span>(cpu_times(0:<a class="code" href="namespaceum__parcore.xhtml#ad078cc7202ef25b751b3e270bd3c4287">nproc_max</a>-1))     </div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="keywordflow">IF</span> (<a class="code" href="namespaceios__common.xhtml#a2ebf6f57a482ffd5b9a0a78b7f20deb2" title="If I am an io server. ">l_io_server</a>) <span class="keywordflow">THEN</span>  <span class="comment">! IOS makes no use of timer.</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(A,A)&#39;</span>)<span class="stringliteral">&#39;timer_output: This IO Server is not &#39;</span>, &amp;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;      <span class="stringliteral">&#39;reporting timing information&#39;</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;  <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="keywordflow">ELSE</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="keywordflow">IF</span> ((action  ==  intermediate_output) .AND.                                    &amp;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    (first_intermediate_timer_call  ) ) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">! Copy the arguments into the last_* arrays</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  first_intermediate_timer_call=.false.</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;  <span class="keywordflow">DO</span> i=1,in_number_of_timers</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    last_in_number_of_times_timed(i)=in_number_of_times_timed(i)</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    last_in_cpu_time_elapsed(i)=in_cpu_time_elapsed(i)</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    last_in_wallclock_time_elapsed(i)=                                         &amp;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;      in_wallclock_time_elapsed(i)</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;  <span class="keywordflow">DO</span> i=1,ni_number_of_timers</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    last_ni_number_of_times_timed(i)=ni_number_of_times_timed(i)</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    last_ni_cpu_time_elapsed(i)=ni_cpu_time_elapsed(i)</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    last_ni_wallclock_time_elapsed(i)=                                         &amp;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;      ni_wallclock_time_elapsed(i)</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  <span class="keywordflow">GO TO</span> 9999  <span class="comment">! jump to end - no output on first call</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="keywordflow">END IF</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*)</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;******************************************&#39;</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*)</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="keywordflow">DO</span> timer_kind=1,2  <span class="comment">! 1 is non-inclusive and 2 is inclusive</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment">! Copy arguments into local arrays</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;  <span class="keywordflow">IF</span> (action  ==  last_call_to_timer) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;END OF RUN - TIMER OUTPUT&#39;</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;Timer information is for whole run&#39;</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordflow">IF</span> (timer_kind  ==  1) <span class="keywordflow">THEN</span>  <span class="comment">! non-inclusive timer</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;      number_of_timers=ni_number_of_timers</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;      <span class="keywordflow">DO</span> i=1,number_of_timers</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        local_timer_name(i)=ni_timer_name(i)</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        local_cpu_time_elapsed(i)=ni_cpu_time_elapsed(i)</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        local_wallclock_time_elapsed(i)=                                       &amp;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;          ni_wallclock_time_elapsed(i)</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        local_number_of_times_timed(i)=                                        &amp;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;          ni_number_of_times_timed(i)</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keywordflow">ELSE</span> <span class="comment">! timer_kind  ==  2 - inclusive timer</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;      number_of_timers=in_number_of_timers</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;      <span class="keywordflow">DO</span> i=1,number_of_timers</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        local_timer_name(i)=in_timer_name(i)</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        local_cpu_time_elapsed(i)=in_cpu_time_elapsed(i)</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        local_wallclock_time_elapsed(i)=                                       &amp;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;          in_wallclock_time_elapsed(i)</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        local_number_of_times_timed(i)=                                        &amp;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;          in_number_of_times_timed(i)</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="keywordflow">    END IF</span> <span class="comment">! which timer kind this was</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;  <span class="keywordflow">ELSE</span>  <span class="comment">! this is an intermediate output call</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;INTERMEDIATE TIMER OUTPUT :&#39;</span>,message</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;Timer information is only for code executed &#39;</span>,                 &amp;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;               <span class="stringliteral">&#39;since last intermediate timer output.&#39;</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keywordflow">IF</span> (timer_kind  ==  1) <span class="keywordflow">THEN</span>  <span class="comment">! non-inclusive timer</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;      number_of_timers=ni_number_of_timers</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;      <span class="keywordflow">DO</span> i=1,number_of_timers</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        local_timer_name(i)=ni_timer_name(i)</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        local_cpu_time_elapsed(i)=ni_cpu_time_elapsed(i)-                      &amp;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                                  last_ni_cpu_time_elapsed(i)</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        local_wallclock_time_elapsed(i)=                                       &amp;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;          ni_wallclock_time_elapsed(i)-                                        &amp;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;          last_ni_wallclock_time_elapsed(i)</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        local_number_of_times_timed(i)=                                        &amp;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;          ni_number_of_times_timed(i)-                                         &amp;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;          last_ni_number_of_times_timed(i)</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keywordflow">ELSE</span> <span class="comment">! timer kind  ==  2 - inclusive timer</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;      number_of_timers=in_number_of_timers</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;      <span class="keywordflow">DO</span> i=1,number_of_timers</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        local_timer_name(i)=in_timer_name(i)</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        local_cpu_time_elapsed(i)=in_cpu_time_elapsed(i)-                      &amp;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                                  last_in_cpu_time_elapsed(i)</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        local_wallclock_time_elapsed(i)=                                       &amp;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;          in_wallclock_time_elapsed(i)-                                        &amp;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;          last_in_wallclock_time_elapsed(i)</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        local_number_of_times_timed(i)=                                        &amp;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;          in_number_of_times_timed(i)-                                         &amp;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;          last_in_number_of_times_timed(i)</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="keywordflow">    END IF</span>  <span class="comment">! what timer type</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="keywordflow">  END IF</span>  <span class="comment">! what action to perform</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment">! Do work for non-inclusive timers</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="comment">! Calculate the total time in the program (based on non-inclusive</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment">! timers)</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;  <span class="keywordflow">IF</span> (timer_kind  ==  1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    total_cpu_time = 0.0</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    total_wallclock_time = 0.0</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keywordflow">DO</span> i=1,number_of_timers</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    total_cpu_time = total_cpu_time + local_cpu_time_elapsed(i)</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    total_wallclock_time =                                                     &amp;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;      total_wallclock_time + local_wallclock_time_elapsed(i)</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;PE &#39;</span>,<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>,<span class="stringliteral">&#39; Elapsed CPU Time: &#39;</span>,                               &amp;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;               total_cpu_time</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;PE &#39;</span>,<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>,<span class="stringliteral">&#39;  Elapsed Wallclock Time: &#39;</span>,                        &amp;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                total_wallclock_time</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment">! Calculate the total cpu time over all processors and the</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment">! maximum elapsed time - so allowing a speedup to be caclulated</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    total_cpu=total_cpu_time</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    max_wall=total_wallclock_time</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="keyword">CALL </span>gc_rsum(1,nproc,info,total_cpu)</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="keyword">CALL </span>gc_rmax(1,nproc,info,max_wall)</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    max_wall=max(max_wall,0.000001)</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*)</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;Total Elapsed CPU Time: &#39;</span>,                                     &amp;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;               total_cpu</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;Maximum Elapsed Wallclock Time: &#39;</span>,                             &amp;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;               max_wall</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;Speedup: &#39;</span>,total_cpu/max_wall</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;--&#39;</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="comment">! Sort subroutines into time order (based on wallclock time)</span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;  <span class="keywordflow">DO</span> i=1,number_of_timers-1</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <span class="keywordflow">DO</span> j=(i+1),number_of_timers</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;      <span class="keywordflow">IF</span> (local_wallclock_time_elapsed(j)  &gt;                                   &amp;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;          local_wallclock_time_elapsed(i)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="comment">!             Swap the two entries</span></div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        sortwork_real = local_cpu_time_elapsed(i)</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        local_cpu_time_elapsed(i) = local_cpu_time_elapsed(j)</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        local_cpu_time_elapsed(j) = sortwork_real</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        sortwork_real = local_wallclock_time_elapsed(i)</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        local_wallclock_time_elapsed(i) =                                      &amp;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;          local_wallclock_time_elapsed(j)</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        local_wallclock_time_elapsed(j) = sortwork_real</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        sortwork_int = local_number_of_times_timed(i)</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        local_number_of_times_timed(i) =                                       &amp;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;          local_number_of_times_timed(j)</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        local_number_of_times_timed(j) = sortwork_int</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        sortwork_char = local_timer_name(i)</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        local_timer_name(i) = local_timer_name(j)</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        local_timer_name(j) = sortwork_char</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;  <span class="keywordflow">IF</span> (timer_kind  ==  1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(20x,a,i6)&#39;</span>) <span class="stringliteral">&#39;Non-Inclusive Timer Summary for PE &#39;</span>,<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a></div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(3x,a,14x,a,2x,a,4x,a,3x,a,2x,a,2x,a,4x,a,4x,a)&#39;</span>)                 &amp;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;      <span class="stringliteral">&#39;ROUTINE&#39;</span>,<span class="stringliteral">&#39;CALLS&#39;</span>,<span class="stringliteral">&#39;TOT CPU&#39;</span>,<span class="stringliteral">&#39;AVERAGE&#39;</span>,<span class="stringliteral">&#39;TOT WALL&#39;</span>,<span class="stringliteral">&#39;AVERAGE&#39;</span>,              &amp;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;      <span class="stringliteral">&#39;% CPU&#39;</span>,<span class="stringliteral">&#39;% WALL&#39;</span>,<span class="stringliteral">&#39;SPEED-UP&#39;</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;  <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(20x,a,i6)&#39;</span>) <span class="stringliteral">&#39;Inclusive Timer Summary for PE &#39;</span>,<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(3x,a,14x,a,2x,a,4x,a,3x,a,2x,a,2x,a)&#39;</span>)                           &amp;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;      <span class="stringliteral">&#39;ROUTINE&#39;</span>,<span class="stringliteral">&#39;CALLS&#39;</span>,<span class="stringliteral">&#39;TOT CPU&#39;</span>,<span class="stringliteral">&#39;AVERAGE&#39;</span>,<span class="stringliteral">&#39;TOT WALL&#39;</span>,                        &amp;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                                  <span class="stringliteral">&#39;AVERAGE&#39;</span>,<span class="stringliteral">&#39;SPEED-UP&#39;</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;  <span class="keywordflow">DO</span> i=1,number_of_timers</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="keywordflow">IF</span> (local_number_of_times_timed(i)  /=  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;      average_cpu_elapsed =  local_cpu_time_elapsed(i)/                        &amp;</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                             local_number_of_times_timed(i)</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;      average_wallclock_elapsed = local_wallclock_time_elapsed(i)/             &amp;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                                  local_number_of_times_timed(i)</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;       average_cpu_elapsed = 0.0</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;       average_wallclock_elapsed = 0.0</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    <span class="keywordflow">IF</span> (local_wallclock_time_elapsed(i)  &gt;   0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;      speed_up=local_cpu_time_elapsed(i)/                                      &amp;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;               local_wallclock_time_elapsed(i)</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;      speed_up=1.0</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="keywordflow">IF</span> (timer_kind  ==  1) <span class="keywordflow">THEN</span>  <span class="comment">! non-inclusive timer has some</span></div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="comment">!                                      ! extra output</span></div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;      percent_of_cpu_total = 100.0*local_cpu_time_elapsed(i)/                  &amp;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                             total_cpu_time</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;      percent_of_wallclock_total =                                             &amp;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        100.0*local_wallclock_time_elapsed(i)/                                 &amp;</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        total_wallclock_time</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;      <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(i3,1x,a20,1x,i4,4(2x,f8.2),2(2x,f6.2),4x,f6.2)&#39;</span>)               &amp;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                  i,local_timer_name(i),                                       &amp;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                  local_number_of_times_timed(i),                              &amp;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                  local_cpu_time_elapsed(i),average_cpu_elapsed,               &amp;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                  local_wallclock_time_elapsed(i),                             &amp;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                  average_wallclock_elapsed,                                   &amp;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                  percent_of_cpu_total,                                        &amp;</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                  percent_of_wallclock_total,speed_up</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;      <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <span class="keywordflow">ELSE</span> <span class="comment">! inclusive timer has slightly less to output</span></div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;      <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(i3,1x,a20,1x,i4,4(2x,f8.2),4x,f6.2)&#39;</span>)                          &amp;</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                  i,local_timer_name(i),                                       &amp;</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                  local_number_of_times_timed(i),                              &amp;</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                  local_cpu_time_elapsed(i),average_cpu_elapsed,               &amp;</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                  local_wallclock_time_elapsed(i),                             &amp;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                  average_wallclock_elapsed,speed_up</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;      <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;<span class="preprocessor">#if !defined(UTILIO) &amp;&amp; !defined(FLDIO) \</span></div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="preprocessor"></span>&amp;&amp;  <span class="comment">!defined(UTILHIST) &amp;&amp; !defined(FLUXPROC)</span></div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="comment">! We only want to process the statistics of the timings for real mpp</span></div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="comment">! jobs where nproc &gt; 1.  Any utilities where UTILIO, FLDIO, UTILHIST and</span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="comment">! FLUXPROC are defined for the cpp use nproc = 1 as parameter in parvars.h.</span></div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;<span class="comment">! And now to assemble an overall timing assesment on PE0</span></div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="comment">! Each PE sends it total wallclock and cpu time spent in each routine</span></div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="comment">! to PE0, which calculates the average, s.d., max and min, and</span></div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="comment">! sorts on the basis of the average wallclock time</span></div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="comment">! We&#39;ll use the list of routines that PE0 already has as the master</span></div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;<span class="comment">! list.</span></div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;  <span class="keywordflow">IF</span> (<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>  ==  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*)</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>( <span class="stringliteral">&#39;MPP Timing information : &#39;</span>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(I6,A,I4,A,I4)&#39;</span>)nproc,<span class="stringliteral">&#39; processors in atmosphere configuration &#39;</span> &amp;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;        ,nproc_x,<span class="stringliteral">&#39; x &#39;</span>,nproc_y</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <span class="keywordflow">IF</span> (<a class="code" href="namespaceios__common.xhtml#a2c973e11abf690e8e0215ca4d7e669de">l_ios_active</a>()) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;      <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(I4,A,I2,A,I2,A)&#39;</span>)<span class="keyword">SIZE</span>(<a class="code" href="namespaceios__common.xhtml#af0311e65c07a278167172c181b8f3d9a" title="Which global ranks in the application do IO. ">io_servers</a>),                              &amp;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        <span class="stringliteral">&#39; IO servers in configuration &#39;</span>                                         &amp;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        ,<a class="code" href="namespaceios__common.xhtml#a11a7b0ca6c5328a01b6f8f7c9abae1f8">ios_server_groups</a>,<span class="stringliteral">&#39; x &#39;</span>,<a class="code" href="namespaceios__common.xhtml#af10dbbd2f66ff01dd74e518bc3690497">ios_tasks_per_server</a>,                          &amp;</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        <span class="stringliteral">&#39; are not included in stats&#39;</span></div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;      <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (global_procs /= model_procs) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;      <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(I4,A)&#39;</span>)global_procs-model_procs, &amp;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;          <span class="stringliteral">&#39; processes are not included in stats (misconfigured IO servers?)&#39;</span></div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;      <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;<span class="comment">! write out number of threads, warn user if thread number has been! changed during run of um</span></div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    <span class="keyword">CALL </span>fort_get_env(<span class="stringliteral">&#39;OMP_NUM_THREADS&#39;</span>,15,env_num_threads,8,err)</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;<span class="comment">! check for intel&#39;s KMP_NUM_THREADS</span></div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <span class="keywordflow">IF</span> (err /= 0) <span class="keywordflow">THEN</span>      <span class="keyword">CALL </span>fort_get_env(<span class="stringliteral">&#39;KMP_NUM_THREADS&#39;</span>,15,env_num_threads,8,err)</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;<span class="keywordflow">    ENDIF</span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    <span class="keywordflow">IF</span> (err  ==  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;      <span class="keyword">READ</span>(env_num_threads,<span class="stringliteral">&#39;(I4)&#39;</span>) atm_num_threads</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;        omp_max_threads = atm_num_threads</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;<span class="comment">! Only want OpenMP section executing if OpenMP is compiled in,</span></div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;<span class="comment">! so protect by sentinal</span></div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="comment">!$ omp_max_threads = omp_get_max_threads()</span></div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;           <span class="keywordflow">IF</span>( omp_max_threads /= atm_num_threads) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;         <span class="comment">!$      cmessage = &#39;Environment variable &#39;//                                   &amp;</span></div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="comment">!$        &#39;OMP_NUM_THREADS does not match current number of threads&#39;</span></div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;<span class="comment">!$        ICODE = -100</span></div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;<span class="comment">!$        CALL ereport(routinename,ICODE,cmessage)</span></div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;<span class="comment">!$        WRITE(umMessage,*) &#39;Number of threads : &#39;, omp_max_threads</span></div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;<span class="comment">!$        CALL umPrint(umMessage,src=&#39;timer_output&#39;)</span></div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;<span class="comment">!$        WRITE(umMessage,*) &#39;Environment variable OMP_NUM_THREADS : &#39;,        &amp;</span></div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;<span class="comment">!$               atm_num_threads</span></div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;<span class="comment">!$        CALL umPrint(umMessage,src=&#39;timer_output&#39;)</span></div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;      <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;<span class="comment">!$        WRITE(umMessage,*) &#39;Number of OMP threads : &#39;, atm_num_threads</span></div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;<span class="comment">!$        CALL umPrint(umMessage,src=&#39;timer_output&#39;)</span></div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="keywordflow">   END IF</span></div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    summ_n_timers=number_of_timers</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    <span class="keywordflow">DO</span> i=1,summ_n_timers</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;      summ_section(i)=local_timer_name(i)</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="comment">! tell everyone else how many routines to do summary on - and which</span></div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;<span class="comment">! routines they are</span></div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;  <span class="keyword">CALL </span>gc_ibcast(3213,1,0,nproc,info,summ_n_timers)</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;  <span class="keyword">CALL </span>gc_cbcast(3214,20*summ_n_timers,0,nproc,info,                           &amp;</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                 summ_section)</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;  <span class="keywordflow">DO</span> i=1,summ_n_timers</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    <span class="keyword">CALL </span>gc_gsync (nproc,info)</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;<span class="comment">! which section_ref is this for me?</span></div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    routine_id=0</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    <span class="keywordflow">DO</span> j=1,number_of_timers</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;      <span class="keywordflow">IF</span> (local_timer_name(j)  ==  summ_section(i))                            &amp;</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;        routine_id=j</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    <span class="keywordflow">IF</span> (routine_id  &gt;   0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;      wallclock_times(<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>)=                                                   &amp;</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;        local_wallclock_time_elapsed(routine_id)</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;      cpu_times(<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>)=local_cpu_time_elapsed(routine_id)</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;      wallclock_times(<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>)=0.0</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;      cpu_times(<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>)=0.0</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;<span class="comment">! send my information to PE 0.</span></div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    <span class="keyword">CALL </span>gc_rsend(1000+<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>,1,0,info,wallclock_times(<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>),                    &amp;</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                wallclock_times(<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>))</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    <span class="keyword">CALL </span>gc_gsync(nproc,info)</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    <span class="keywordflow">IF</span> (<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>  ==  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;      <span class="keywordflow">DO</span> j=0,nproc-1</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;        <span class="keyword">CALL </span>gc_rrecv(1000+j,1,j,info,wallclock_times(j),                      &amp;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                      wallclock_times(j))</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    <span class="keyword">CALL </span>gc_gsync(nproc,info)</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    <span class="keyword">CALL </span>gc_rsend(10000+<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>,1,0,info,cpu_times(<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>),                         &amp;</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                cpu_times(<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>))</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    <span class="keyword">CALL </span>gc_gsync(nproc,info)</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    <span class="keywordflow">IF</span> (<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>  ==  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;      <span class="keywordflow">DO</span> j=0,nproc-1</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;        <span class="keyword">CALL </span>gc_rrecv(10000+j,1,j,info,cpu_times(j),                           &amp;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;                      cpu_times(j))</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    <span class="keywordflow">IF</span> (<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>  ==  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;<span class="comment">! collect all the information - and start calculating the statistics</span></div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;      wallclock_mean(i)=0.0</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;      cpu_total(i)=0.0</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;      wallclock_max(i)=-1.0e30</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;      wallclock_min(i)=1.0e30</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;      cpu_max(i)=-1.0e30</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;      cpu_min(i)=1.0e30</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;      <span class="keywordflow">DO</span> j=0,nproc-1</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;        wallclock_mean(i)=wallclock_mean(i)+wallclock_times(j)</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;        cpu_total(i)=cpu_total(i)+cpu_times(j)</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        <span class="keywordflow">IF</span> (wallclock_times(j) &gt;  wallclock_max(i)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;          wallclock_max(i)=wallclock_times(j)</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;          wallclock_max_pe(i)=j</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;        <span class="keywordflow">IF</span> (wallclock_times(j) &lt;  wallclock_min(i)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;          wallclock_min(i)=wallclock_times(j)</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;          wallclock_min_pe(i)=j</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;        <span class="keywordflow">IF</span> (cpu_times(j) &gt;  cpu_max(i)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;          cpu_max(i)=cpu_times(j)</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;          cpu_max_pe(i)=j</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;        <span class="keywordflow">IF</span> (cpu_times(j) &lt;  cpu_min(i)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;          cpu_min(i)=cpu_times(j)</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;          cpu_min_pe(i)=j</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;<span class="keywordflow">      END DO</span> <span class="comment">! loop over processors</span></div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;<span class="comment">! and calculate the statistics</span></div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;<span class="comment">! first calculate the means</span></div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;      wallclock_mean(i)=wallclock_mean(i)/nproc</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;      cpu_mean(i)=cpu_total(i)/nproc</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;<span class="comment">! To stop a divide by zero later:</span></div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;      <span class="keywordflow">IF</span> (wallclock_mean(i)  ==  0.0) wallclock_mean(i)=1.0e-20</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;      <span class="keywordflow">IF</span> (cpu_mean(i)  ==  0.0) cpu_mean(i)=1.0e-20</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;<span class="comment">! and now the standard deviation</span></div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;      wallclock_sd(i)=0.0</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;      cpu_sd(i)=0.0</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;      <span class="keywordflow">DO</span> j=0,nproc-1</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;        wallclock_sd(i)=wallclock_sd(i)+                                       &amp;</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;          (wallclock_times(j)-wallclock_mean(i))*                              &amp;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;          (wallclock_times(j)-wallclock_mean(i))</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;        cpu_sd(i)=cpu_sd(i)+(cpu_times(j)-cpu_mean(i))*                        &amp;</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;                      (cpu_times(j)-cpu_mean(i))</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;      wallclock_sd(i)=sqrt(wallclock_sd(i)/nproc)</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;      cpu_sd(i)=sqrt(cpu_sd(i)/nproc)</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;<span class="comment">! Calculate the median</span></div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;      <span class="keywordflow">DO</span> j=0,nproc-2</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;        <span class="keywordflow">DO</span> k=j+1,nproc-1</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;          <span class="keywordflow">IF</span> (wallclock_times(k)  &gt;   wallclock_times(j)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;            sortwork_real=wallclock_times(j)</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;            wallclock_times(j)=wallclock_times(k)</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;            wallclock_times(k)=sortwork_real</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;          <span class="keywordflow">IF</span> (cpu_times(k)  &gt;   cpu_times(j)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;            sortwork_real=cpu_times(j)</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;            cpu_times(j)=cpu_times(k)</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;            cpu_times(k)=sortwork_real</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;<span class="keywordflow">        END DO</span></div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;      <span class="keywordflow">IF</span> (mod(nproc,2)  ==  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;        wallclock_median(i)=(wallclock_times((nproc/2)-1)+                     &amp;</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;                             wallclock_times(nproc/2))*0.5</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;        cpu_median(i)=(cpu_times((nproc/2)-1)+                                 &amp;</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;                       cpu_times(nproc/2))*0.5</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;      <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;        wallclock_median(i)=wallclock_times(nproc/2)</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;        cpu_median(i)=cpu_times(nproc/2)</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;<span class="keywordflow">    END IF</span> <span class="comment">! am I PE 0?</span></div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;<span class="keywordflow">  END DO</span> <span class="comment">! loop over sections</span></div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;<span class="comment">! Sort and output the information on PE 0</span></div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;  <span class="keywordflow">IF</span> (<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>  ==  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    <span class="keywordflow">DO</span> i=1,summ_n_timers-1</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;      <span class="keywordflow">DO</span> j=(i+1),summ_n_timers</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;        <span class="keywordflow">IF</span> (wallclock_max(j)  &gt;   wallclock_max(i)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;<span class="comment">! Swap the entries I and J</span></div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;        sortwork_char=summ_section(i)</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;        summ_section(i)=summ_section(j)</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;        summ_section(j)=sortwork_char</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;        sortwork_real=wallclock_mean(i)</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;        wallclock_mean(i)=wallclock_mean(j)</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;        wallclock_mean(j)=sortwork_real</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;        sortwork_real=wallclock_median(i)</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;        wallclock_median(i)=wallclock_median(j)</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;        wallclock_median(j)=sortwork_real</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;        sortwork_real=wallclock_sd(i)</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;        wallclock_sd(i)=wallclock_sd(j)</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;        wallclock_sd(j)=sortwork_real</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;        sortwork_real=wallclock_max(i)</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;        wallclock_max(i)=wallclock_max(j)</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;        wallclock_max(j)=sortwork_real</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;        sortwork_real=wallclock_min(i)</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;        wallclock_min(i)=wallclock_min(j)</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;        wallclock_min(j)=sortwork_real</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;        sortwork_int=wallclock_min_pe(i)</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;        wallclock_min_pe(i)=wallclock_min_pe(j)</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;        wallclock_min_pe(j)=sortwork_int</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;        sortwork_int=wallclock_max_pe(i)</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;        wallclock_max_pe(i)=wallclock_max_pe(j)</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;        wallclock_max_pe(j)=sortwork_int</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;        sortwork_real=cpu_mean(i)</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;        cpu_mean(i)=cpu_mean(j)</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;        cpu_mean(j)=sortwork_real</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;        sortwork_real=cpu_median(i)</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;        cpu_median(i)=cpu_median(j)</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;        cpu_median(j)=sortwork_real</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;        sortwork_real=cpu_sd(i)</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;        cpu_sd(i)=cpu_sd(j)</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;        cpu_sd(j)=sortwork_real</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;        sortwork_real=cpu_max(i)</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;        cpu_max(i)=cpu_max(j)</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;        cpu_max(j)=sortwork_real</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;        sortwork_real=cpu_min(i)</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;        cpu_min(i)=cpu_min(j)</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;        cpu_min(j)=sortwork_real</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;        sortwork_int=cpu_min_pe(i)</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;        cpu_min_pe(i)=cpu_min_pe(j)</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;        cpu_min_pe(j)=sortwork_int</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;        sortwork_int=cpu_max_pe(i)</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;        cpu_max_pe(i)=cpu_max_pe(j)</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;        cpu_max_pe(j)=sortwork_int</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;<span class="comment">! and write out the information</span></div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*)</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    <span class="keywordflow">IF</span> (timer_kind  ==  1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;      <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;MPP : Non Inclusive timer summary&#39;</span></div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;      <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;      <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;MPP : Inclusive timer summary&#39;</span></div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;      <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*)</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*)  <span class="stringliteral">&#39;WALLCLOCK  TIMES&#39;</span></div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(4X,a,19X,a,3X,a,7X,a,3X,a,6X,a,3X,a,8X,a,3X,a)&#39;</span>)                 &amp;</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;      <span class="stringliteral">&#39;ROUTINE&#39;</span>,<span class="stringliteral">&#39;MEAN&#39;</span>,<span class="stringliteral">&#39;MEDIAN&#39;</span>,<span class="stringliteral">&#39;SD&#39;</span>,<span class="stringliteral">&#39;% of mean&#39;</span>,<span class="stringliteral">&#39;MAX&#39;</span>,<span class="stringliteral">&#39;(PE)&#39;</span>,<span class="stringliteral">&#39;MIN&#39;</span>,<span class="stringliteral">&#39;(PE)&#39;</span></div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    <span class="keywordflow">DO</span> i=1,summ_n_timers</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;      <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,                                                                 &amp;</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;      <span class="stringliteral">&#39;(I3,1X,A20,1X,3(1X,F8.2),5X,F6.2,a,2(1X,F8.2,1X,a,I6,a) )&#39;</span>)             &amp;</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;                 i,summ_section(i),                                            &amp;</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;                 wallclock_mean(i),wallclock_median(i),                        &amp;</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;                 wallclock_sd(i),                                              &amp;</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;                 (wallclock_sd(i)/wallclock_mean(i))*100.0,<span class="stringliteral">&#39;%&#39;</span>,                &amp;</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;                 wallclock_max(i),<span class="stringliteral">&#39;(&#39;</span>,wallclock_max_pe(i),<span class="stringliteral">&#39;)&#39;</span>,                 &amp;</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;                 wallclock_min(i),<span class="stringliteral">&#39;(&#39;</span>,wallclock_min_pe(i),<span class="stringliteral">&#39;)&#39;</span></div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;      <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*)</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*)  <span class="stringliteral">&#39;CPU TIMES (sorted by wallclock times)&#39;</span></div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(4X,a,19X,a,3X,a,7X,a,3X,a,6X,a,3X,a,8X,a,3X,a)&#39;</span>)                 &amp;</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;     <span class="stringliteral">&#39;ROUTINE&#39;</span>,<span class="stringliteral">&#39;MEAN&#39;</span>,<span class="stringliteral">&#39;MEDIAN&#39;</span>,<span class="stringliteral">&#39;SD&#39;</span>,<span class="stringliteral">&#39;% of mean&#39;</span>,<span class="stringliteral">&#39;MAX&#39;</span>,<span class="stringliteral">&#39;(PE)&#39;</span>,<span class="stringliteral">&#39;MIN&#39;</span>,<span class="stringliteral">&#39;(PE)&#39;</span></div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    <span class="keywordflow">DO</span> i=1,summ_n_timers</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;      <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,                                                                 &amp;</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;      <span class="stringliteral">&#39;(I3,1X,A20,1X,3(1X,F8.2),5X,F6.2,a,2(1X,F8.2,1X,a,I6,a) )&#39;</span>)             &amp;</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;                 i,summ_section(i),                                            &amp;</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;                 cpu_mean(i),cpu_median(i),                                    &amp;</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;                 cpu_sd(i),                                                    &amp;</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;                 (cpu_sd(i)/cpu_mean(i))*100.0,<span class="stringliteral">&#39;%&#39;</span>,                            &amp;</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;                 cpu_max(i),<span class="stringliteral">&#39;(&#39;</span>,cpu_max_pe(i),<span class="stringliteral">&#39;)&#39;</span>,                             &amp;</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;                 cpu_min(i),<span class="stringliteral">&#39;(&#39;</span>,cpu_min_pe(i),<span class="stringliteral">&#39;)&#39;</span></div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;      <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;  <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*)</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;  <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;timer_output&#39;</span>)</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;<span class="preprocessor"></span></div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;<span class="keywordflow">END DO</span> <span class="comment">! loop over timer kind</span></div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;<span class="comment">! Finally copy the timer info into the last_* arrays so that the</span></div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;<span class="comment">! intermediate timer can calculate the timings since this point</span></div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;<span class="keywordflow">DO</span> i=1,in_number_of_timers</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;  last_in_number_of_times_timed(i)=in_number_of_times_timed(i)</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;  last_in_cpu_time_elapsed(i)=in_cpu_time_elapsed(i)</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;  last_in_wallclock_time_elapsed(i)=                                           &amp;</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;    in_wallclock_time_elapsed(i)</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;<span class="keywordflow">DO</span> i=1,ni_number_of_timers</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;  last_ni_number_of_times_timed(i)=ni_number_of_times_timed(i)</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;  last_ni_cpu_time_elapsed(i)=ni_cpu_time_elapsed(i)</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;  last_ni_wallclock_time_elapsed(i)=                                           &amp;</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;    ni_wallclock_time_elapsed(i)</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160; 9999 <span class="keywordflow">CONTINUE</span></div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;<span class="keywordflow">END IF</span> <span class="comment">! L_IO_Server</span></div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;<span class="keyword">DEALLOCATE</span>(cpu_times)     <span class="keyword">DEALLOCATE</span>(wallclock_times)</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;<span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;TIMER_OUTPUT&#39;</span>,zhook_out,zhook_handle)</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;<span class="keywordflow">RETURN</span></div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;<span class="keyword">END SUBROUTINE </span><a class="code" href="timer__output_8f90.xhtml#a8925eb1b78c550384b5a548047aec8c1" title="SUBROUTINE TIMER_OUTPUT -!&gt; ">timer_output</a></div></div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
