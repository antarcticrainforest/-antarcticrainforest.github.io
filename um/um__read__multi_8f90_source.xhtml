<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>UM General Atmosphere: /home/wilfred/PhD/UM/src/control/mpp/um_read_multi.f90 Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="unified_model_logo_2.jpeg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">UM General Atmosphere
   &#160;<span id="projectnumber">8.6</span>
   </div>
   <div id="projectbrief">UK Met Offices Unified Model</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_b81b067251166617f9d0a8c0cfc3a4a9.xhtml">control</a></li><li class="navelem"><a class="el" href="dir_14a8e295637c738acc16dab33472505b.xhtml">mpp</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">um_read_multi.f90</div>  </div>
</div><!--header-->
<div class="contents">
<a href="um__read__multi_8f90.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="keyword">SUBROUTINE </span><a class="code" href="um__read__multi_8f90.xhtml#a9feb8d67a971df4da0762e811c1c8163" title="Parallel UM interface to BUFFIN - for use by the UM only. ">um_read_multi</a>(nft,d1,isize,unpack_size,len_io,local_len,  &amp;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;                         lookup,fixhd12,                             &amp;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;                         addr_info,n_levels,                         &amp;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;                         icode,cmessage)</div><div class="line"><a name="l00011"></a><span class="lineno"><a class="line" href="um__read__multi_8f90.xhtml#a9feb8d67a971df4da0762e811c1c8163">   11</a></span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="keywordtype">USE </span>um_parvars</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespacedecomp__db.xhtml" title="This file belongs in section: MPP. ">decomp_db</a></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="keywordtype">USE </span>yomhook<span class="keywordtype">, ONLY</span>: lhook, dr_hook</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keywordtype">USE </span>parkind1<span class="keywordtype">, ONLY</span>: jprb, jpim</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespaceio.xhtml" title="Code Owner: See Unified Model Code owners HTML page. ">io</a></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespacelookup__addresses.xhtml" title="Parameters for addressing elements in a UM file lookup table. ">lookup_addresses</a></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespacecppxref__mod.xhtml" title="Code Owner: See Unified Model Code Owners HTML page. ">cppxref_mod</a><span class="keywordtype">, ONLY</span>:                                               &amp;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <a class="code" href="namespacecppxref__mod.xhtml#af57185f8bd6471c59e021839b65568ee">ppx_atm_tall</a>, <a class="code" href="namespacecppxref__mod.xhtml#ac431b87d080e44fd0bffdd4a9119d921">ppx_atm_cuall</a>, <a class="code" href="namespacecppxref__mod.xhtml#a6fc3b22758e9414eceae30e1acc84e3d">ppx_atm_cvall</a>,                      &amp;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <a class="code" href="namespacecppxref__mod.xhtml#a6099b9bccdb65a03d528d15d8f377ab1">ppx_atm_ozone</a>,<a class="code" href="namespacecppxref__mod.xhtml#ac755995feaadbb456e2ed909dfe0ff9e">ppx_atm_tzonal</a></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespaceumprintmgr.xhtml" title="This file belongs in section: Misc. ">umprintmgr</a><span class="keywordtype">, ONLY</span> :      &amp;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>,                &amp;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">! Description:</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> ::  nft         <span class="comment">!  FORTRAN unit number</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> ::  isize       <span class="comment">!  no. of words to be read in                                    !  (global field)</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> ::  unpack_size <span class="comment">!  no. of words after any unpacking (global)</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(OUT)</span> :: len_io      <span class="comment">!  no. of words read in (global field)</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(OUT)</span> :: local_len   <span class="comment">!  no. of words in local field</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: fixhd12      <span class="comment">!   12th element of fixed length header</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: n_levels     <span class="comment">!   Number of levels</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(OUT)</span> :: icode       <span class="comment">!   Return code</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">#include &quot;d1_addr.h&quot;</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="preprocessor"></span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(INOUT)</span> :: addr_info(d1_list_len)   <span class="comment">! addressing info about field</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(INOUT)</span> :: lookup(64)               <span class="comment">!   LOOKUP header from dump</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="keywordtype">CHARACTER(LEN=80)</span> ::  cmessage       <span class="comment">!  Error message</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(OUT)</span> ::  d1(*)          <span class="comment">!  Array to read data in to</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="preprocessor">#include &quot;csmid.h&quot;</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;c_mdi.h&quot;</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="preprocessor"></span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="keywordtype">INTEGER</span> :: info          <span class="comment">! GCOM return code</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="keywordtype">INTEGER</span> :: i             <span class="comment">! loop counter</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="keywordtype">INTEGER</span> :: map(n_levels) <span class="comment">! Which processor holds which level</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="keywordtype">INTEGER</span> :: orig_decomp  <span class="comment">! decomposition on entry</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="keywordtype">INTEGER</span> :: new_decomp   <span class="comment">! decomposition to change to</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="keywordtype">INTEGER</span> :: grid_code    <span class="comment">! grid code</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="keywordtype">INTEGER</span> :: grid_type    <span class="comment">! grid type</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="keywordtype">INTEGER</span> :: halo_code    <span class="comment">! halo code</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="keywordtype">REAL</span>    :: buf_icode    <span class="comment">! return code from BUFFIN</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="keywordtype">REAL</span>    :: buf(unpack_size)       <span class="comment">! buffer for reading the field into</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="keywordtype">REAL</span>    :: local_buf(unpack_size) <span class="comment">! and distributed - this is too big</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="keywordtype">REAL(KIND=jprb)</span>               :: zhook_handle</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">EXTERNAL</span> :: get_fld_type  <span class="comment">! function</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;UM_READ_MULTI&#39;</span>,zhook_in,zhook_handle)</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;len_io=isize</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;local_len=0</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;grid_code = addr_info(d1_grid_type)</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;grid_type = get_fld_type(grid_code)</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;halo_code = addr_info(d1_halo_type)</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;orig_decomp=current_decomp_type</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;new_decomp=orig_decomp</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="keywordflow">IF</span> ((addr_info(d1_imodl)  ==  atmos_im) .AND.                     &amp;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    (orig_decomp  /=  <a class="code" href="namespacedecomp__params.xhtml#afabb52a8e8d6cdfe3f3366dd918058d8" title="decomps for atmos ">decomp_standard_atmos</a>)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  new_decomp=<a class="code" href="namespacedecomp__params.xhtml#afabb52a8e8d6cdfe3f3366dd918058d8" title="decomps for atmos ">decomp_standard_atmos</a></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="keywordflow">END IF</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="keywordflow">IF</span> (new_decomp  /=  orig_decomp) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  <span class="keyword">CALL </span>change_decomposition(new_decomp,icode)</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  <span class="keywordflow">IF</span> (icode  /=  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;UM_READ_MULTI: Error changing to decomposition &#39;</span>, &amp;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                new_decomp</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;um_read_multi&#39;</span>)</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*)                                                    &amp;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;      <span class="stringliteral">&#39;Attempting to read field (Model,Section,Item) &#39;</span>,           &amp;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;      addr_info(d1_imodl),                                        &amp;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;      addr_info(d1_section),                                      &amp;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;      addr_info(d1_item)</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;um_read_multi&#39;</span>)</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    icode=1</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    cmessage=<span class="stringliteral">&#39;Failure changing decomposition&#39;</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="keywordflow">END IF</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">! First thing to do is to read the field in to PE 0</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="keywordflow">IF</span> (<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>  ==  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  <span class="keyword">CALL </span><a class="code" href="namespaceio.xhtml#a031f4e4a5342a8fe5fbbd7dab85c5e6e">set_unit_bcast_flag</a>(nft)<span class="comment">! Switch off IO broadcasting</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  <span class="keywordflow">IF</span> (mod((lookup(<a class="code" href="namespacelookup__addresses.xhtml#a506fad965bad508479cafb725dd659f1">lbpack</a>)),10)  ==  2) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">! Data is packed using CRAY 32 bit method - note that we need to read</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">! in 2*ISIZE 32 bit words using BUFFIN32_F77 (as the array is 64 bit)</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">! DEPENDS ON : buffin32_f77</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keyword">CALL </span><a class="code" href="buffin32__f77_8f90.xhtml#aea6da9e73456e731b71767f2bb9cdeae" title="Code Owner: See Unified Model Code owners HTML page. ">buffin32_f77</a>(nft,buf,2*isize,len_io,buf_icode)</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">! And then halve LEN_IO to satisfy tests against ISIZE</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    len_io = len_io/2</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">! For non-packed data</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keyword">CALL </span>buffin(nft,buf,isize,len_io,buf_icode)</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  <span class="keyword">CALL </span><a class="code" href="namespaceio.xhtml#a23feb5500a95fb68781f48561c43becc">clear_unit_bcast_flag</a>(nft)<span class="comment">! Restore broadcast behaviour</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">!       Has the data been read in OK?</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  <span class="keywordflow">IF</span> ((buf_icode  /=  -1.0) .OR. (len_io  /=  isize)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;UM_READ_MULTI: Error in call to BUFFIN&#39;</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;um_read_multi&#39;</span>)</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;LEN_IO : &#39;</span>,len_io</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;um_read_multi&#39;</span>)</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;IOSTAT : &#39;</span>,buf_icode</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;um_read_multi&#39;</span>)</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*)                                                    &amp;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;      <span class="stringliteral">&#39;Attempting to read field (Model,Section,Item) &#39;</span>,           &amp;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;      addr_info(d1_imodl),                                        &amp;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;      addr_info(d1_section),                                      &amp;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;      addr_info(d1_item)</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;um_read_multi&#39;</span>)</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    icode=100</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    cmessage=<span class="stringliteral">&#39;Failure reading in field&#39;</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment">! If it&#39;s a compressed REAL field, expand it out (except for fields</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">! we want to distribute in 32-bit)</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">! DEPENDS ON: read_unpack</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;  <span class="keywordflow">IF</span> (grid_code /= <a class="code" href="namespacecppxref__mod.xhtml#af57185f8bd6471c59e021839b65568ee">ppx_atm_tall</a>  .AND.                                 &amp;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;      grid_code /= <a class="code" href="namespacecppxref__mod.xhtml#ac431b87d080e44fd0bffdd4a9119d921">ppx_atm_cuall</a> .AND.                                 &amp;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;      grid_code /= <a class="code" href="namespacecppxref__mod.xhtml#a6fc3b22758e9414eceae30e1acc84e3d">ppx_atm_cvall</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keyword">CALL </span><a class="code" href="read__unpack_8f90.xhtml#a061b2fc7af2fdb2daf8dcd557d7e9144" title="Subroutine interface: Subroutine interface: ">read_unpack</a>(buf,isize,unpack_size,lookup,fixhd12,            &amp;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                     icode,cmessage)</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keywordflow">IF</span> (icode /= 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;      cmessage=<span class="stringliteral">&#39;Failure unpacking field&#39;</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;      <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="keywordflow">END IF</span> <span class="comment">! IF (mype  ==  0)</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">! Ensure local buffer is initialised so that expand/pack operations</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">! won&#39;t hit uninitialised memory.</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;local_buf(:) = rmdi</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">! For certain 32-bit packed fields we can distribute in 32-bit and</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">! thus unpack in parallel</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="keywordflow">IF</span> ((grid_code == <a class="code" href="namespacecppxref__mod.xhtml#af57185f8bd6471c59e021839b65568ee">ppx_atm_tall</a>  .OR.         &amp;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;     grid_code == <a class="code" href="namespacecppxref__mod.xhtml#ac431b87d080e44fd0bffdd4a9119d921">ppx_atm_cuall</a> .OR.         &amp;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;     grid_code == <a class="code" href="namespacecppxref__mod.xhtml#a6fc3b22758e9414eceae30e1acc84e3d">ppx_atm_cvall</a> ) .AND.      &amp;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;     mod((lookup(<a class="code" href="namespacelookup__addresses.xhtml#a506fad965bad508479cafb725dd659f1">lbpack</a>)),10)  ==  2) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;     <span class="comment">! Scatter followed by unpack for this case</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">! DEPENDS ON: scatter_field_mpl32</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;     <span class="keyword">CALL </span><a class="code" href="scatter__field__mpl32_8f90.xhtml#ac30c7524d0d2a7b06b492218578409d9" title="(c) CROWN COPYRIGHT Met Office. ALL RIGHTS RESERVED. (c) CROWN COPYRIGHT Met Office. ALL RIGHTS RESERVED. For further details please refer to the file copyright.txt scatters a field from one processor to many processors ">scatter_field_mpl32</a>( local_buf, buf,                           &amp;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                               lasize(1,grid_type,halo_code),            &amp;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                               lasize(2,grid_type,halo_code),            &amp;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                               glsize(1,grid_type), glsize(2,grid_type), &amp;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                               grid_type, halo_code, 0,                  &amp;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                               gc_all_proc_group, icode, cmessage)</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;     local_len=addr_info(d1_length)/addr_info(d1_no_levels)</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment">! DEPENDS ON: expand21</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;     <span class="keyword">CALL </span><a class="code" href="expand21_8f90.xhtml#ae17b02afacdabc296f92b32a4d6ce156" title="SUBROUTINE EXPAND21. ">expand21</a>(local_len, local_buf, d1)</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;               <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  <span class="comment">! For atmosphere zonal ozone fields - set to zonal grid type</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;  <span class="keywordflow">IF</span> (( grid_code  ==  <a class="code" href="namespacecppxref__mod.xhtml#a6099b9bccdb65a03d528d15d8f377ab1">ppx_atm_ozone</a>) .AND.           &amp;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;      ( lookup(<a class="code" href="namespacelookup__addresses.xhtml#a9ae4b281a4481f6737cda3288e5d7971">lbnpt</a>)  ==  1)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    addr_info(d1_grid_type)=<a class="code" href="namespacecppxref__mod.xhtml#ac755995feaadbb456e2ed909dfe0ff9e">ppx_atm_tzonal</a></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  <span class="comment">! Create map showing which processor contains which level.</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  <span class="comment">! At present, all levels are stored on PE 0</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;  <span class="keywordflow">DO</span> i=1,n_levels</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    map(i)=0</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;  <span class="comment">! Now decompose the field in buf to the local D1 arrays</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">! DEPENDS ON: general_scatter_field</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;  <span class="keyword">CALL </span><a class="code" href="general__scatter__field_8f90.xhtml#addbc42988fd8d40d21f64cd157ca3bbb" title="Scatters any type of field from one processor to many processors. ">general_scatter_field</a>( d1, buf, local_len, lookup(<a class="code" href="namespacelookup__addresses.xhtml#ab82991ff70c45e8f733b4446f83e0556">lblrec</a>),       &amp;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                              n_levels, addr_info, map, icode, cmessage)</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;  <span class="keywordflow">IF</span> (icode  ==  1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;UM_READ_MULTI: Call to GENERAL_SCATTER_FIELD failed&#39;</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;um_read_multi&#39;</span>)</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;Return code was &#39;</span>,icode</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;um_read_multi&#39;</span>)</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;Error message was &#39;</span>,cmessage</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;um_read_multi&#39;</span>)</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;Field number &#39;</span>,lookup(<a class="code" href="namespacelookup__addresses.xhtml#a4f2a173b22a48250d86265493664e6ad">item_code</a>)</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;um_read_multi&#39;</span>)</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;Grid type &#39;</span>, grid_code</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;um_read_multi&#39;</span>)</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;Dimensioned : &#39;</span>,                                    &amp;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                 lookup(<a class="code" href="namespacelookup__addresses.xhtml#a9ae4b281a4481f6737cda3288e5d7971">lbnpt</a>),<span class="stringliteral">&#39; x &#39;</span>,lookup(<a class="code" href="namespacelookup__addresses.xhtml#a54e6ad5def513311547cbefc60aee032">lbrow</a>)</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;um_read_multi&#39;</span>)</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    icode=300</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    cmessage=<span class="stringliteral">&#39;Failure decomposing field&#39;</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="keywordflow">END IF</span>  <span class="comment">! default expand method</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment">! A sync can help avoid MPI congestion here.</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="keyword">CALL </span>gc_gsync(nproc, icode)</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="keywordflow">IF</span> (new_decomp  /=  orig_decomp) <span class="keywordflow">THEN</span>  <span class="comment">! change back</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;  <span class="keyword">CALL </span>change_decomposition(orig_decomp,icode)</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="keywordflow">END IF</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;9999  <span class="keywordflow">CONTINUE</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;UM_READ_MULTI&#39;</span>,zhook_out,zhook_handle)</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="keywordflow">RETURN</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="keyword">END SUBROUTINE </span><a class="code" href="um__read__multi_8f90.xhtml#a9feb8d67a971df4da0762e811c1c8163" title="Parallel UM interface to BUFFIN - for use by the UM only. ">um_read_multi</a></div></div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
