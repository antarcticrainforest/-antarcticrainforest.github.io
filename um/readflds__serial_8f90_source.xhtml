<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>UM General Atmosphere: /home/wilfred/PhD/UM/src/control/dump_io/readflds_serial.f90 Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="unified_model_logo_2.jpeg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">UM General Atmosphere
   &#160;<span id="projectnumber">8.6</span>
   </div>
   <div id="projectbrief">UK Met Offices Unified Model</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_b81b067251166617f9d0a8c0cfc3a4a9.xhtml">control</a></li><li class="navelem"><a class="el" href="dir_dc377c3c325b720b1e9a3b21c5b1edf6.xhtml">dump_io</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">readflds_serial.f90</div>  </div>
</div><!--header-->
<div class="contents">
<a href="readflds__serial_8f90.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="keyword">SUBROUTINE </span><a class="code" href="readflds__serial_8f90.xhtml#a2bf8ecae753b0a9590f9ab41fa717634" title="Reads in a number of fields from UM format file. ">readflds_serial</a> (nftin, number_of_fields,              &amp;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;                            first_field, lookup, len1_lookup_arg, &amp;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;                            d1, fixhd,                            &amp;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;                            expand, icode, cmessage)</div><div class="line"><a name="l00011"></a><span class="lineno"><a class="line" href="readflds__serial_8f90.xhtml#a2bf8ecae753b0a9590f9ab41fa717634">   11</a></span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;  <span class="keywordtype">USE </span>yomhook<span class="keywordtype">, ONLY</span>: lhook, dr_hook</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;  <span class="keywordtype">USE </span>parkind1<span class="keywordtype">, ONLY</span>: jprb, jpim</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespaceio.xhtml" title="Code Owner: See Unified Model Code owners HTML page. ">io</a></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespaceereport__mod.xhtml" title="This file belongs in section: Misc. ">ereport_mod</a><span class="keywordtype">, ONLY</span> : <a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacelookup__addresses.xhtml" title="Parameters for addressing elements in a UM file lookup table. ">lookup_addresses</a></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespaceumprintmgr.xhtml" title="This file belongs in section: Misc. ">umprintmgr</a><span class="keywordtype">, ONLY</span> :      &amp;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;      <a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>,                &amp;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;      <a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;  <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">! Description:</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;  <span class="keywordtype">INTEGER</span> :: nftin               <span class="comment">! IN: unit number to read data from</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  <span class="keywordtype">INTEGER</span> :: number_of_fields    <span class="comment">! IN: number of fields to read in</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  <span class="keywordtype">INTEGER</span> :: first_field         <span class="comment">! IN: first field to read in</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  <span class="keywordtype">INTEGER</span> :: len1_lookup_arg     <span class="comment">! IN: first dimension of LOOKUP table</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;  <span class="keywordtype">INTEGER</span> :: lookup(len1_lookup_arg,*)  <span class="comment">! IN: lookup table starting</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                                 <span class="comment">!     at field 1</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  <span class="keywordtype">INTEGER</span> :: fixhd(*)            <span class="comment">! IN: fixed length header</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  <span class="keywordtype">INTEGER</span> :: expand        <span class="comment">! IN: (=1 if WGDOS or RLE packed data</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                           <span class="comment">!      is to be expanded)</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  <span class="keywordtype">INTEGER</span> :: icode         <span class="comment">! OUT: return code</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;  <span class="keywordtype">REAL</span> :: d1(*)            <span class="comment">! OUT: array to return the data in</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  <span class="keywordtype">CHARACTER(LEN=80)</span> :: cmessage <span class="comment">! OUT: Error message if ICODE &lt;&gt; 0</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="preprocessor">#include &quot;c_mdi.h&quot;</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="preprocessor"></span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  <span class="keywordtype">INTEGER</span> :: k                <span class="comment">! loop over fields to read in</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  <span class="keywordtype">INTEGER</span> :: pack_code        <span class="comment">! packing code for field</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  <span class="keywordtype">INTEGER</span> :: field_start      <span class="comment">! location of field on disk</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  <span class="keywordtype">INTEGER</span> :: data_size        <span class="comment">! number of words of data on disk</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                              <span class="comment">! (including padding for WFIO)</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  <span class="keywordtype">INTEGER</span> :: data_read_size   <span class="comment">! number of words to read from disk</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  <span class="keywordtype">INTEGER</span> :: data_full_size   <span class="comment">! number of words after any unpacking</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;  <span class="keywordtype">INTEGER</span> :: len_io           <span class="comment">! number of words read from disk</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  <span class="keywordtype">INTEGER</span> :: field_item       <span class="comment">! Item number of field</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;  <span class="keywordtype">INTEGER</span> :: field_sect       <span class="comment">! Section number of field</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  <span class="keywordtype">INTEGER</span> :: field_model      <span class="comment">! Model ID of field</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  <span class="keywordtype">INTEGER</span> :: i                <span class="comment">! loop index</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  <span class="keywordtype">REAL</span>    :: a_io             <span class="comment">! Return code from BUFFIN</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  <span class="keywordtype">CHARACTER(LEN=*)</span>, <span class="keywordtype">PARAMETER</span> :: routinename = <span class="stringliteral">&#39;READFLDS_SERIAL&#39;</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  <span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  <span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  <span class="keywordtype">REAL(KIND=jprb)</span>               :: zhook_handle</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;READFLDS_SERIAL&#39;</span>,zhook_in,zhook_handle)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="keywordflow">IF</span> (fixhd(12) &lt; 403) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;READFLDS_SERIAL: file created by UM version &#39;</span>, fixhd(12)</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;readflds_serial&#39;</span>)</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;  icode = 10</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  cmessage = <span class="stringliteral">&#39;READFLDS_SERIAL: Cannot read files from before vn4.3&#39;</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;  <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a> ( routinename, icode, cmessage )</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="keywordflow">END IF</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="keywordflow">DO</span> k = first_field, first_field+number_of_fields-1</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;  field_item  = mod(lookup(42,k),1000)</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  field_sect  = (lookup(42,k)-field_item)/1000</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  field_model = lookup(45,k)</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  pack_code   = mod((lookup(<a class="code" href="namespacelookup__addresses.xhtml#a506fad965bad508479cafb725dd659f1">lbpack</a>,k)),10)</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">!  !   Determine location of the field on disk</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">!  </span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  field_start = lookup(<a class="code" href="namespacelookup__addresses.xhtml#afbf7195b85d47a8f92d0769c84f846a4">lbegin</a>,k) <span class="comment">! position of field in file</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  <span class="keywordflow">IF</span> (field_start &lt;= 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;READFLDS_SERIAL: start address =&#39;</span>,field_start</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;readflds_serial&#39;</span>)</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    icode = 20</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    cmessage = <span class="stringliteral">&#39;READFLDS_SERIAL: start address of field not given&#39;</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a> ( routinename, icode, cmessage )</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">!   -!   Determine data sizes</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">!   -</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">! DATA_SIZE : contains the number of words of data used to store the</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">! field on disk (needs to be halved if 32 bit packing has been used)</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  <span class="keywordflow">IF</span> (pack_code == 2) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    data_size = (lookup(<a class="code" href="namespacelookup__addresses.xhtml#ab82991ff70c45e8f733b4446f83e0556">lblrec</a>,k)+1)/2</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    data_size = lookup(<a class="code" href="namespacelookup__addresses.xhtml#ab82991ff70c45e8f733b4446f83e0556">lblrec</a>,k)</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">! DATA_FULL_SIZE : is the number of words required to store the field</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">! in memory after any unpacking is done.</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">! This is to give buf the correct size in RDUNPCK, as</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">! buf will be the final expanded size of whole field</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">! including extra data</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">! WARNING LBEXT - may be -32768 MISSING VALUE !</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  <span class="keywordflow">IF</span> ((pack_code == 4) .AND. (lookup(<a class="code" href="namespacelookup__addresses.xhtml#a36fe53c5769dee10ac1c6609f9fa6c2d">lbext</a>, k) &gt; 0)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    data_full_size = max(lookup(<a class="code" href="namespacelookup__addresses.xhtml#a54e6ad5def513311547cbefc60aee032">lbrow</a>, k)*lookup(<a class="code" href="namespacelookup__addresses.xhtml#a9ae4b281a4481f6737cda3288e5d7971">lbnpt</a>, k)  &amp;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;         +lookup(<a class="code" href="namespacelookup__addresses.xhtml#a36fe53c5769dee10ac1c6609f9fa6c2d">lbext</a>, k) ,lookup(<a class="code" href="namespacelookup__addresses.xhtml#ab82991ff70c45e8f733b4446f83e0556">lblrec</a>,k))</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    data_full_size = max(lookup(<a class="code" href="namespacelookup__addresses.xhtml#a54e6ad5def513311547cbefc60aee032">lbrow</a>, k)*lookup(<a class="code" href="namespacelookup__addresses.xhtml#a9ae4b281a4481f6737cda3288e5d7971">lbnpt</a>, k)  &amp;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;         ,lookup(<a class="code" href="namespacelookup__addresses.xhtml#ab82991ff70c45e8f733b4446f83e0556">lblrec</a>,k))</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  <span class="keywordflow">IF</span> ( (lookup(<a class="code" href="namespacelookup__addresses.xhtml#a54e6ad5def513311547cbefc60aee032">lbrow</a>,k) &lt; 0) .OR. (lookup(<a class="code" href="namespacelookup__addresses.xhtml#a9ae4b281a4481f6737cda3288e5d7971">lbnpt</a>,k) &lt; 0) ) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    data_full_size = lookup(<a class="code" href="namespacelookup__addresses.xhtml#ab82991ff70c45e8f733b4446f83e0556">lblrec</a>,k)</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">! DATA_READ_SIZE : contains the number of words to data that need to</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">! be read in for a field. Each field has extra words of dummy data</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">! added at the end to ensure each field starts on a disk sector</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">! boundary. The last field on a dump does not have these extra words</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">! added</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;  <span class="keywordflow">IF</span> (k /= (first_field+number_of_fields-1)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    data_read_size = lookup(<a class="code" href="namespacelookup__addresses.xhtml#a7fbd5df41f854a6fd5c4d35c0942742e">lbnrec</a>,k)</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    data_read_size = data_size</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;  <span class="keywordflow">IF</span> (data_read_size &lt; 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;READFLDS_SERIAL: number of words to read =&#39;</span>,   &amp;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;           data_read_size</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;readflds_serial&#39;</span>)</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    icode = 30</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    cmessage = <span class="stringliteral">&#39;READFLDS_SERIAL: number of words to read not given&#39;</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a> ( routinename, icode, cmessage )</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">! data_full_size needs to be at least as big as data_read_size since</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">! it is used to dimension the BUF array (in READ_MULTI ?)</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;  data_full_size = max(data_full_size, data_read_size)</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">!   !   Move file pointer to the start of the field</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">!  </span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;  <span class="keyword">CALL </span><a class="code" href="namespaceio.xhtml#a6eff09a3646b168907ebda58a5355b2a">setpos</a> (nftin, field_start, icode)</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  <span class="keywordflow">IF</span> (icode /= 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;READFLDS_SERIAL - SETPOS failed to move to &#39;</span>,  &amp;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                 field_start,<span class="stringliteral">&#39; on unit &#39;</span>,nftin</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;readflds_serial&#39;</span>)</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;SETPOS returned error code &#39;</span>,icode</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;readflds_serial&#39;</span>)</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    icode = 40</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    cmessage = <span class="stringliteral">&#39;SETPOS failed in READFLDS_SERIAL. See output.&#39;</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a> ( routinename, icode, cmessage )</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">!  !   Read the field from disk</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">!  </span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;  <span class="keywordflow">IF</span> (pack_code == 2) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">!     Data is packed using CRAY 32 bit method - note</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment">!     that we need to read in 2*data_read_size 32 bit</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">!     words using BUFFIN32</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">! DEPENDS ON : buffin32_f77</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keyword">CALL </span><a class="code" href="buffin32__f77_8f90.xhtml#aea6da9e73456e731b71767f2bb9cdeae" title="Code Owner: See Unified Model Code owners HTML page. ">buffin32_f77</a> (nftin,d1,2*data_read_size,len_io,a_io)</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">!     And then halve LEN_IO to satisfy tests against</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">!     data_read_size</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    len_io = len_io/2</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;  <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment">!     Data is not 32-bit packed</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keyword">CALL </span>buffin (nftin,d1(1:data_read_size),data_read_size,len_io,a_io)</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">!   -!   Check that data been read in OK?</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment">!   -</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;  <span class="keywordflow">IF</span> ((a_io /= -1.0) .OR. (len_io /= data_read_size)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;READFLDS_SERIAL : Error in call to BUFFIN&#39;</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;readflds_serial&#39;</span>)</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;LEN_IO : &#39;</span>,len_io</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;readflds_serial&#39;</span>)</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;A_IO : &#39;</span>,a_io</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;readflds_serial&#39;</span>)</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;Attempting to read field (Model,Section,Item) &#39;</span>,  &amp;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                 field_model, field_sect, field_item</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;readflds_serial&#39;</span>)</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(10(E10.5,X))&#39;</span>) d1(1:100)</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;readflds_serial&#39;</span>)</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    icode = 50</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    cmessage = <span class="stringliteral">&#39;READFLDS_SERIAL: Failure reading in field&#39;</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a> ( routinename, icode, cmessage )</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment">!   !   If it&#39;s a compressed REAL field, expand it out</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment">!  ! DEPENDS ON: READ_UNPACK</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;  <span class="keyword">CALL </span><a class="code" href="read__unpack_8f90.xhtml#a061b2fc7af2fdb2daf8dcd557d7e9144" title="Subroutine interface: Subroutine interface: ">read_unpack</a> (d1, data_read_size, data_full_size,  &amp;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                    lookup(1,k), fixhd(12),              &amp;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                    expand,                              &amp;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                    icode, cmessage)</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;  <span class="keywordflow">IF</span> (icode /= 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*)<span class="stringliteral">&#39;READFLDS_SERIAL: Failure unpacking field&#39;</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;readflds_serial&#39;</span>)</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a> ( routinename, icode, cmessage )</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="keywordflow">END DO</span> <span class="comment">! K : loop over fields</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;READFLDS_SERIAL&#39;</span>,zhook_out,zhook_handle)</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="keywordflow">RETURN</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="keyword">END SUBROUTINE </span><a class="code" href="readflds__serial_8f90.xhtml#a2bf8ecae753b0a9590f9ab41fa717634" title="Reads in a number of fields from UM format file. ">readflds_serial</a></div></div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
