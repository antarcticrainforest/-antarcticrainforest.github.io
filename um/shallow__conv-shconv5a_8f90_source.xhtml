<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>UM General Atmosphere: /home/wilfred/PhD/UM/src/atmosphere/convection/shallow_conv-shconv5a.f90 Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="unified_model_logo_2.jpeg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">UM General Atmosphere
   &#160;<span id="projectnumber">8.6</span>
   </div>
   <div id="projectbrief">UK Met Offices Unified Model</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_1df14ea1ac826f73bc3062fa8a76e0c2.xhtml">atmosphere</a></li><li class="navelem"><a class="el" href="dir_c7cc3e4dc8dce4a958919661145604f9.xhtml">convection</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">shallow_conv-shconv5a.f90</div>  </div>
</div><!--header-->
<div class="contents">
<a href="shallow__conv-shconv5a_8f90.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="keyword">SUBROUTINE </span><a class="code" href="shallow__conv-shconv5a_8f90.xhtml#a9ee8df16ba28e0c3503e5d848118c242" title="Shallow convection scheme. ">shallow_conv_5a</a>(nbl,nlev,ntra,n_cca_lev,n_sh,trlev,    &amp;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;                       bland,delthvu,exner_layer_centres,         &amp;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;                       exner_layer_boundaries, l_calc_dxek,       &amp;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;                       l_q_interact, l_tracer, ntml, ntpar,       &amp;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;                       pstar,p_layer_centres,                     &amp;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;                       p_layer_boundaries,z_theta,z_rho,          &amp;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;                       r_theta,r_rho,r2rho_th,r2rho,              &amp;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;                       dr_across_th,dr_across_rh,                 &amp;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;                       q,q1_sd,t1_sd,th,timestep,u,v,w,uw0,vw0,   &amp;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;                       wstar,wthvs,entrain_coef,delta_smag,       &amp;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;                       zlcl_uv,ztop_uv,freeze_lev,recip_pstar,qse,&amp;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;                       ! InOut</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;                       bulk_cf,cf_frozen,cf_liquid,qcf,           &amp;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;                       qcl,tracer,w2p,                            &amp;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;                       ! Out</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;                       cape_out,cclwp,ccw,cca,                    &amp;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;                       dbcfbydt,dcffbydt,dcflbydt,dqbydt,dqcfbydt,&amp;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;                       dqclbydt,dthbydt,                          &amp;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;                       dubydt,dvbydt,dtrabydt,                    &amp;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;                       detrain_up,detrain_dwn,                    &amp;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;                       entrain_up,entrain_dwn,                    &amp;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;                       iccb,icct,lcca,                            &amp;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;                       lcbase,lctop,rain,snow,                    &amp;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;                       rain_3d, snow_3d, up_flux, up_flux_half,   &amp;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;                       dwn_flux,uw_shall,vw_shall,tcw,cca_2d,     &amp;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;                       kterm, ind_shall,                          &amp;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;                       rbuoy_p_out,the_out,thp_out,qe_out,qp_out  &amp;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;                       )</div><div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="shallow__conv-shconv5a_8f90.xhtml#a9ee8df16ba28e0c3503e5d848118c242">   35</a></span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keywordtype">USE </span>atmos_constants_mod<span class="keywordtype">, ONLY</span>:                                    &amp;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    cp, r, kappa, pref, repsilon, c_virtual</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="keywordtype">USE </span>water_constants_mod<span class="keywordtype">, ONLY</span>: lc, lf, tm</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespacecv__run__mod.xhtml" title="*****************************COPYRIGHT************************************** ************************...">cv_run_mod</a><span class="keywordtype">, ONLY</span>:                                             &amp;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <a class="code" href="namespacecv__run__mod.xhtml#a9fa9c42ad2da411d2451fd13fbf43514">l_mom</a>, <a class="code" href="namespacecv__run__mod.xhtml#a3be02974c6903b96e25497f83d4efdb0">l_safe_conv</a>, <a class="code" href="namespacecv__run__mod.xhtml#ad05f8f4bd83f1f04931699d48092e779">l_cv_conserve_check</a>,                      &amp;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="namespacecv__run__mod.xhtml#abcd0633ecc8169d21bde31d396987ab3">sh_pert_opt</a>, <a class="code" href="namespacecv__run__mod.xhtml#adf12c4d96378c409f40e87de2282a982">bl_cnv_mix</a>, <a class="code" href="namespacecv__run__mod.xhtml#a5fea1dcfdbe431050f3fd9e4b0354a57">icvdiag</a>,                             &amp;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <a class="code" href="namespacecv__run__mod.xhtml#ada531c8ab7a2db9fa523fe9801878406">cca2d_sh_opt</a>, <a class="code" href="namespacecv__run__mod.xhtml#a74dd2e3ba506db0ec2c153104690c257">cca_sh_knob</a>, <a class="code" href="namespacecv__run__mod.xhtml#a60ac382c4e37ea7bcdfe608775d57764">ccw_sh_knob</a>, <a class="code" href="namespacecv__run__mod.xhtml#a6ea9c7e06824af2eab9cebf59f2c1272">limit_pert_opt</a>,       &amp;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <a class="code" href="namespacecv__run__mod.xhtml#adb523e824ee63bf708b36e5ef08eb898">cnv_wat_load_opt</a>, <a class="code" href="namespacecv__run__mod.xhtml#a056243df9a25e9043295c5ac8042fd5b">l_ccrad</a></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespacecv__param__mod.xhtml" title="*****************************COPYRIGHT************************************** ************************...">cv_param_mod</a><span class="keywordtype">, ONLY</span>:                                           &amp;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="namespacecv__param__mod.xhtml#af860c59572fb12f73742efd46b9cb9de">total_condensed_water</a>, <a class="code" href="namespacecv__param__mod.xhtml#a2f5ce48e76ae03ce8e15284fb9cb9f66">grant_lock</a>, <a class="code" href="namespacecv__param__mod.xhtml#a39748ffd163ce2acdaef052ac19b3621">grant_lock_no_over</a>,        &amp;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <a class="code" href="namespacecv__param__mod.xhtml#a6e77850a4e7780d41dba1387a75343a0">thpixs_shallow</a>, <a class="code" href="namespacecv__param__mod.xhtml#a25bd328e29e1e5faa8057abdc3de323c">qpixs_shallow</a>, <a class="code" href="namespacecv__param__mod.xhtml#abcb1051cbd7710f88f6e6df9df32bc38">c_mass</a>,                        &amp;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <a class="code" href="namespacecv__param__mod.xhtml#a94434cd6f0c3c5a728ded72d214239c8">max_sh_thpert</a>, <a class="code" href="namespacecv__param__mod.xhtml#a3660c75956444f1775bf01e51546f2d3">min_sh_thpert</a>, <a class="code" href="namespacecv__param__mod.xhtml#a5bb084a810395f517fbbed79555dd90d">max_sh_qpert_fac</a>, <a class="code" href="namespacecv__param__mod.xhtml#a10660500154de8d4bd6edb7e0ff9bfcd">beta_cu</a></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespacecv__dependent__switch__mod.xhtml" title="*****************************COPYRIGHT************************************** ************************...">cv_dependent_switch_mod</a><span class="keywordtype">, ONLY</span>:                                &amp;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="namespacecv__dependent__switch__mod.xhtml#a1369b0cc22efacc4b37aa3db4943e844" title="Extra switches controlling adaptive forced detrainment options. ">sh_on</a>, <a class="code" href="namespacecv__dependent__switch__mod.xhtml#ad1bb03a58af33967bf5ee0e649ef2a6e">mdet_sh_on</a>, <a class="code" href="namespacecv__dependent__switch__mod.xhtml#a04d20ef5d1557d4bd84e8f621af79ff7">sh_ent_on</a>, <a class="code" href="namespacecv__dependent__switch__mod.xhtml#afe60b51a5e1c0be19e1434111beb5702">sh_sdet_on</a>, <a class="code" href="namespacecv__dependent__switch__mod.xhtml#a078163b4772812cecc5ee6b41fe4580c">sh_new_termc</a>, <a class="code" href="namespacecv__dependent__switch__mod.xhtml#a6a0879b7a28fdcb71d673d1c76810d94">sh_grey</a></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespacecv__stash__flg__mod.xhtml" title="*****************************COPYRIGHT************************************** ************************...">cv_stash_flg_mod</a><span class="keywordtype">, ONLY</span>:                                       &amp;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <a class="code" href="namespacecv__stash__flg__mod.xhtml#aaa805ef81602a9e8e678e5f68be250ee">flg_up_flx</a>, flg_up_flx_half, <a class="code" href="namespacecv__stash__flg__mod.xhtml#a645dd024842155b75c5b638f11391ac9">flg_dwn_flx</a>,                     &amp;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="namespacecv__stash__flg__mod.xhtml#a594eca06c1e2300b31f8c2bba686ff1e">flg_entr_up</a>, <a class="code" href="namespacecv__stash__flg__mod.xhtml#a23946cc9e076aa4865e7ed4049aa6e81">flg_detr_up</a>, <a class="code" href="namespacecv__stash__flg__mod.xhtml#a9986060bf6c1a80468d9ae32b6bafcf9">flg_entr_dwn</a>, <a class="code" href="namespacecv__stash__flg__mod.xhtml#ad0f02382d0dbfd786770638461d8ec1f">flg_detr_dwn</a>,         &amp;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <a class="code" href="namespacecv__stash__flg__mod.xhtml#ad13801fb31f0f607d924aba4b0ab0839">flg_uw_shall</a>, <a class="code" href="namespacecv__stash__flg__mod.xhtml#a866a659288edb036141e19b4892f24d9">flg_vw_shall</a>, <a class="code" href="namespacecv__stash__flg__mod.xhtml#a37b3464d529c8ecb00a46ae1312081bc">flg_mf_shall</a>, <a class="code" href="namespacecv__stash__flg__mod.xhtml#a50f06f66e4ccdedcd3c49d357976dbf7">flg_w_eqn</a></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespacebl__option__mod.xhtml" title="*****************************COPYRIGHT******************************** *****************************C...">bl_option_mod</a><span class="keywordtype">, ONLY</span>:                                          &amp;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <a class="code" href="namespacebl__option__mod.xhtml#a27098d154e3dacd839ec2f7041dd468d">kprof_cu</a>, <a class="code" href="namespacebl__option__mod.xhtml#a86e9bc58fc73bfa0e100aaf8b753c84e" title="Declarations: ">off</a></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="keywordtype">USE </span>earth_constants_mod<span class="keywordtype">, ONLY</span>: g</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="keywordtype">USE </span>yomhook<span class="keywordtype">, ONLY</span>: lhook, dr_hook</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="keywordtype">USE </span>parkind1<span class="keywordtype">, ONLY</span>: jprb, jpim</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespaceumprintmgr.xhtml" title="This file belongs in section: Misc. ">umprintmgr</a>    </div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="preprocessor">#if defined(SCMA)</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="preprocessor"></span><span class="keywordtype">USE </span><a class="code" href="namespaces__scmop__mod.xhtml">s_scmop_mod</a><span class="keywordtype">, ONLY</span>: <a class="code" href="namespaces__scmop__mod.xhtml#a0de635b7af80c9bf26aa5b874f67d655">default_streams</a>                                 &amp;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  , <a class="code" href="namespaces__scmop__mod.xhtml#adb70a12d6474a089d0a5b0f861e193c2">t_inst</a>, <a class="code" href="namespaces__scmop__mod.xhtml#a63ec75937e5bfb3e70894cb3e2a08738">t_avg</a>, <a class="code" href="namespaces__scmop__mod.xhtml#a5a13db9f3d2b54dc7f02f3fa3fc19ece">t_max</a>, <a class="code" href="namespaces__scmop__mod.xhtml#a45eef9702d217d7da71dcf394198f2d6">t_min</a>, <a class="code" href="namespaces__scmop__mod.xhtml#a5a6f815019b3004ecc7040ec4b4d1fd4">t_acc</a>, <a class="code" href="namespaces__scmop__mod.xhtml#a597140e5cb551f5f4651c9b4cd534865">t_div</a>, <a class="code" href="namespaces__scmop__mod.xhtml#acfaa64e6b4c579d708188c5774d8ac7d">t_mult</a>, <a class="code" href="namespaces__scmop__mod.xhtml#a58d068616503a332fdbc2e4c7bb9f23b">t_acc_div</a>       &amp;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  , <a class="code" href="namespaces__scmop__mod.xhtml#acaad14680fec34a8c1c206ebeb34d239">t_acc_mult</a>, <a class="code" href="namespaces__scmop__mod.xhtml#ab61b1909fcdb9b3f9552d14f2f8839fe">t_const</a>, <a class="code" href="namespaces__scmop__mod.xhtml#a25166a280622f5787108c0078a033004">only_radsteps</a>                                 &amp;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  , <a class="code" href="namespaces__scmop__mod.xhtml#a9e42893fdbe56b604355689cd9248c63">d_sl</a>, <a class="code" href="namespaces__scmop__mod.xhtml#a5914c497075c8cbd0e5cd1d211e1a123">d_soilt</a>, <a class="code" href="namespaces__scmop__mod.xhtml#ad97dd1acaa61800db9233ae60f5b1e84">d_bl</a>, <a class="code" href="namespaces__scmop__mod.xhtml#a0f351beba305dba0d9e82e98eeabd5d1">d_wet</a>, <a class="code" href="namespaces__scmop__mod.xhtml#a12df05d6be37b339aab4962186c305b6">d_all</a>, <a class="code" href="namespaces__scmop__mod.xhtml#a1462f6faadb6334b311e602285d8a286">d_soilm</a>, <a class="code" href="namespaces__scmop__mod.xhtml#a80fd65616a49171a9ac7ecac7338d70a">d_tile</a>, <a class="code" href="namespaces__scmop__mod.xhtml#a92a2c3b6b4b2b0dd800234719ca7207b">d_vis</a>, <a class="code" href="namespaces__scmop__mod.xhtml#a531939b489ce23adb71e2515981989da">d_point</a> &amp;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  , <a class="code" href="namespaces__scmop__mod.xhtml#a11d031129d23dbffdab391dd303cdd08">d_allxtra</a>, <a class="code" href="namespaces__scmop__mod.xhtml#a5de685a17fc8f67d938e5982544ec05f">d_land</a>, <a class="code" href="namespaces__scmop__mod.xhtml#a049e4924fd63af8676e1697fcde11654">d_cloud</a>                                         &amp;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  , <a class="code" href="namespaces__scmop__mod.xhtml#a6ff96781019d621303b6d86d6d2486a5">scmdiag_gen</a>, <a class="code" href="namespaces__scmop__mod.xhtml#a5564776c9d09d933db80c6c1c3c47b3d">scmdiag_rad</a>, <a class="code" href="namespaces__scmop__mod.xhtml#a6099058c886f9254fabef330fa2caedd">scmdiag_bl</a>, <a class="code" href="namespaces__scmop__mod.xhtml#aa95516bacfa8a4f2932fc3e17f5f6b65">scmdiag_surf</a>, <a class="code" href="namespaces__scmop__mod.xhtml#a89d9b3531f7c5739e1d9b9edf0583d58">scmdiag_land</a>   &amp;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  , <a class="code" href="namespaces__scmop__mod.xhtml#a762d12a388196f9c5a907e8090d18e3a">scmdiag_sea</a>, <a class="code" href="namespaces__scmop__mod.xhtml#a40ccacb1e960d2ef3da728d637e5ebe2">scmdiag_lsp</a>, <a class="code" href="namespaces__scmop__mod.xhtml#abf142f0f2bdc021960cf0c6a5ecd065b">scmdiag_conv</a>, <a class="code" href="namespaces__scmop__mod.xhtml#a73ce0babd803e10fbcb82921346b3ccc">scmdiag_lscld</a>, <a class="code" href="namespaces__scmop__mod.xhtml#a2b946f89404f7668eb56ca960c3c3de6">scmdiag_pc2</a> &amp;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  , <a class="code" href="namespaces__scmop__mod.xhtml#a61abfb55fdd33cfc5d44f00076f252c8">scmdiag_forc</a>, <a class="code" href="namespaces__scmop__mod.xhtml#a8a1879aca60631ef706c8ce42618ced6">scmdiag_incs</a>, <a class="code" href="namespaces__scmop__mod.xhtml#a765b6df27a911737054c8df3c0746c15">scmdiag_gwd</a></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="preprocessor"></span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: &amp;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;  nbl                  &amp; <span class="comment">! No. of boundary layer levels</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; ,nlev                 &amp; <span class="comment">! No. of model layers</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; ,ntra                 &amp; <span class="comment">! No. of tracer fields</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; ,n_cca_lev            &amp; <span class="comment">! No. of convective cloud amount levels (1 for 2D,</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                         <span class="comment">! nlevs for 3D)</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; ,n_sh                 &amp; <span class="comment">! No. of shallow convection points</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; ,trlev                  <span class="comment">! No. of model levels on which tracers are included</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="keywordtype">LOGICAL</span>, <span class="keywordtype">INTENT(IN)</span> :: bland(n_sh) <span class="comment">! Land/sea mask</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span>    :: delthvu(n_sh) <span class="comment">!Integral of undilute parcel</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                                     <span class="comment">! buoyancy over convective cloud</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                                     <span class="comment">! layer (Kelvin m)</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span>    ::               &amp;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  exner_layer_centres(n_sh,0:nlev)   &amp; <span class="comment">! Exner</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; ,exner_layer_boundaries(n_sh,0:nlev)  <span class="comment">! Exner at half level above</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                                       <span class="comment">! exner_layer_centres</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="keywordtype">LOGICAL</span>, <span class="keywordtype">INTENT(IN)</span> :: &amp;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  l_calc_dxek          &amp; <span class="comment">! Switch for calculation of condensate increment</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; ,l_q_interact         &amp; <span class="comment">! Switch allows overwriting parcel variables when</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                         <span class="comment">! calculating condensate incr.</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; ,l_tracer               <span class="comment">! Switch for inclusion of tracers</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: &amp;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  ntml(n_sh)           &amp; <span class="comment">! Top level of surface mixed layer defined relative to</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                         <span class="comment">! theta,q grid</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; ,ntpar(n_sh)            <span class="comment">! Top level of initial parcel ascent in BL scheme                         ! defined relative to theta,q grid</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span>    ::          &amp;  pstar(n_sh)                   &amp; <span class="comment">! Surface pressure (Pa)</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160; ,p_layer_centres(n_sh,0:nlev)  &amp; <span class="comment">! Pressure (Pa)</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; ,p_layer_boundaries(n_sh,0:nlev) <span class="comment">! Pressure at half level above</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                                  <span class="comment">! p_layer_centres (Pa)</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">! Note heights passed in but not currently used - will be</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">! required by new turbulence based scheme therefore been added to</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">! arguement list ready for future developments.</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span>    ::      &amp;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  z_theta(n_sh,nlev)        &amp; <span class="comment">! height of theta levels (m)</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160; ,z_rho(n_sh,nlev)          &amp; <span class="comment">! height of rho levels (m)</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160; ,r_theta(n_sh,0:nlev)      &amp; <span class="comment">! r on theta levels (m)</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; ,r_rho(n_sh,nlev)          &amp; <span class="comment">! r on rho levels (m)</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160; ,r2rho_th(n_sh,nlev)       &amp; <span class="comment">! r2*rho theta levels (kg/m)</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160; ,r2rho(n_sh,nlev)          &amp; <span class="comment">! r2*rho rho levels (kg/m)</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160; ,dr_across_th(n_sh,nlev)   &amp; <span class="comment">! thickness of theta levels (m)</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; ,dr_across_rh(n_sh,nlev)     <span class="comment">! thickness of rho levels (m)</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span>    :: q(n_sh,nlev) <span class="comment">! Model mixing ratio (kg/kg)</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span>    :: &amp;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;  q1_sd(n_sh)          &amp; <span class="comment">! Standard deviation of turbulent flucts. of layer 1 q</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                         <span class="comment">! (kg/kg)</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160; ,t1_sd(n_sh)            <span class="comment">! Standard deviation of turbulent flucts. of layer 1</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                         <span class="comment">! temp. (K)</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span>    :: th(n_sh,nlev) <span class="comment">! Model potential temperature (K)</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span>    :: timestep    <span class="comment">! Model timestep (s)</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span>    :: &amp;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;  u(n_sh,nlev)         &amp; <span class="comment">! Model U field (m/s)</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; ,v(n_sh,nlev)         &amp; <span class="comment">! Model V field (m/s)</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160; ,w(n_sh,nlev)           <span class="comment">! Model W field (m/s)</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span>    :: &amp;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  uw0(n_sh)            &amp; <span class="comment">! U-comp of surface stress (N/m2)</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160; ,vw0(n_sh)            &amp; <span class="comment">! V-comp of surface stress (N/m2)</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160; ,wstar(n_sh)          &amp; <span class="comment">! Convective velocity scale (m/s)</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160; ,wthvs(n_sh)          &amp; <span class="comment">! Surface flux of THV (Pa m/s2)</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160; ,entrain_coef(n_sh)   &amp; <span class="comment">! Entrainment coefficients</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; ,delta_smag(n_sh)     &amp; <span class="comment">! grid size (m)</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160; ,zlcl_uv(n_sh)        &amp; <span class="comment">! Lifting condensation level defined for the uv                         ! grid (m)</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160; ,ztop_uv(n_sh)          <span class="comment">! Top of cloud layer defined for the uv grid (m)</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: freeze_lev(n_sh) <span class="comment">! Level index for freezing level</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span> ::    &amp;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;  recip_pstar(n_sh)    &amp; <span class="comment">! Reciprocal of pstar array</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160; ,qse(n_sh,nlev)         <span class="comment">! Saturation mixing ratio of cloud environment (kg/kg)</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">! Arguments with intent INOUT:</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(INOUT)</span> ::   &amp;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;  bulk_cf(n_sh,nlev)     &amp; <span class="comment">! Bulk total cloud volume ( )</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160; ,cf_frozen(n_sh,nlev)   &amp; <span class="comment">! Frozen water cloud volume ( )</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; ,cf_liquid(n_sh,nlev)   &amp; <span class="comment">! Liq water cloud volume ( )</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160; ,qcf(n_sh,nlev)         &amp; <span class="comment">! Ice condensate mix ratio (kg/kg)</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160; ,qcl(n_sh,nlev)         &amp; <span class="comment">! Liq condensate mix ratio (kg/kg)</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160; ,tracer(n_sh,trlev,ntra)  <span class="comment">! Model tracer fields (kg/kg)</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(INOUT)</span> ::   &amp;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;  w2p (n_sh,nlev)          <span class="comment">! (Parcel vertical velocity)^2 [(m/s)^2]</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">! Arguments with intent OUT:</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(OUT)</span> :: &amp;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;  cape_out(n_sh)     &amp; <span class="comment">! Saved convective available potential energy for</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                       <span class="comment">! diagnostic output (J/kg)</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160; ,cclwp(n_sh)        &amp; <span class="comment">! Condensed water path (kg/m2)</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160; ,ccw(n_sh,nlev)     &amp; <span class="comment">! Convective cloud liquid water on model levels (kg/kg)</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; ,cca(n_sh,n_cca_lev)  <span class="comment">! Convective cloud amount on model levels (fraction)</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(OUT)</span> ::   &amp;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;  dbcfbydt(n_sh,nlev)  &amp; <span class="comment">! Increments to total cld volume due to convection(/s)</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160; ,dcffbydt(n_sh,nlev)  &amp; <span class="comment">! Increments to ice cloud volume due to convection (/s)</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160; ,dcflbydt(n_sh,nlev)  &amp; <span class="comment">! Increments to liq cloud volume due to convection (/s)</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160; ,dqbydt(n_sh,nlev)    &amp; <span class="comment">! Increments to q due to convection (kg/kg/s)</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160; ,dqcfbydt(n_sh,nlev)  &amp; <span class="comment">! Increments to ice condensate due to convection</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                         <span class="comment">! (kg/kg/s)</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160; ,dqclbydt(n_sh,nlev)  &amp; <span class="comment">! Increments to liq condensate due to convection</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                         <span class="comment">! (kg/kg/s)</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160; ,dthbydt(n_sh,nlev)   &amp; <span class="comment">! Increments to potential temp. due to convection (K/s)</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160; ,dubydt(n_sh,nlev)    &amp; <span class="comment">! Increments to U due to CMT (m/s2)</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160; ,dvbydt(n_sh,nlev)      <span class="comment">! Increments to V due to CMT (m/s2)</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(OUT)</span> ::      &amp;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  dtrabydt(n_sh,nlev,ntra)  <span class="comment">! Increment to tracer due to convection (kg/kg/s)</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(OUT)</span> ::     &amp;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;  detrain_up(n_sh,nlev)  &amp; <span class="comment">! Fractional detrainment rate into updraughts (Pa/s)</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160; ,detrain_dwn(n_sh,nlev) &amp; <span class="comment">! Fractional detrainment rate into downdraughts                           ! (Pa/s)</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160; ,entrain_up(n_sh,nlev)  &amp; <span class="comment">! Fractional entrainment rate into updraughts (Pa/s)</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160; ,entrain_dwn(n_sh,nlev)   <span class="comment">! Fractional entrainment rate into downdraughts</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                           <span class="comment">! (Pa/s)</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(OUT)</span> :: &amp;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;  iccb(n_sh)            &amp; <span class="comment">! Convective cloud base level</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160; ,icct(n_sh)              <span class="comment">! Convective cloud top level</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(OUT)</span> :: lcca(n_sh) <span class="comment">! Lowest conv. cloud amt. (%)</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(OUT)</span> :: &amp;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;  lcbase(n_sh)          &amp; <span class="comment">! Lowest conv. cloud base level ,lctop(n_sh)             ! Lowest conv. cloud top level</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(OUT)</span> :: rain(n_sh) <span class="comment">! Surface convective rainfall (kg/m2/s)</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(OUT)</span> :: snow(n_sh) <span class="comment">! Surface convective snowfall (kg/m2/s)</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(OUT)</span> :: rain_3d(n_sh,nlev) <span class="comment">! Convective rainfall flux (kg/m2/s)</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(OUT)</span> :: snow_3d(n_sh,nlev) <span class="comment">! Convective snowfall flux (kg/m2/s)</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(OUT)</span> ::       &amp;    up_flux(n_sh,nlev)       &amp; <span class="comment">! Updraught mass flux (Pa/s)</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160; ,up_flux_half(n_sh,nlev)  &amp; <span class="comment">! Updraught mass flux (Pa/s)</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160; ,dwn_flux(n_sh,nlev)        <span class="comment">! Downdraught mass flux (Pa/s)</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(OUT)</span> :: uw_shall(n_sh,nlev) <span class="comment">! X-comp. of stress</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                                         <span class="comment">! from shallow convection (kg/m/s2)</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(OUT)</span> :: vw_shall(n_sh,nlev) <span class="comment">! Y-comp. of stress</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                                         <span class="comment">! from shallow convection (kg/m/s2)</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(OUT)</span> :: tcw(n_sh)  <span class="comment">! Total condensed water(kg/m2/s)</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(OUT)</span> :: cca_2d(n_sh) <span class="comment">! 2D convective cloud amount (%)</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(OUT)</span> :: kterm(n_sh) <span class="comment">! termination level for shallow</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                                    <span class="comment">! convection</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(OUT)</span> ::      &amp;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;  ind_shall(n_sh)            <span class="comment">! 1.0 if real shallow convection else 0.0</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment">! Adaptive detrainment output variables</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(OUT)</span> ::      &amp;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;  rbuoy_p_out(n_sh,nlev)  &amp; <span class="comment">! buoyancy excess</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160; ,the_out(n_sh,nlev)      &amp; <span class="comment">! th_E in parcel routine</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160; ,thp_out(n_sh,nlev)      &amp; <span class="comment">! th_P in parcel routine</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160; ,qe_out(n_sh,nlev)       &amp; <span class="comment">! q_E in parcel routine</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160; ,qp_out(n_sh,nlev)         <span class="comment">! q_P in parcel routine</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment">! Variables defined locally</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment">! Adaptive detrainment output variables</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="keywordtype">REAL</span> ::               &amp;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;  rbuoy_p_here(n_sh)  &amp; <span class="comment">! buoyancy excess</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160; ,the_here(n_sh)      &amp; <span class="comment">! th_E in parcel routine</span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160; ,thp_here(n_sh)      &amp; <span class="comment">! th_P in parcel routine</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160; ,qe_here(n_sh)       &amp; <span class="comment">! q_E in parcel routine</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160; ,qp_here(n_sh)       &amp; <span class="comment">! q_P in parcel routine</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160; ,rbuoy_p_old(n_sh)     <span class="comment">! buoyancy excess from previous k</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment">! Height above surface of model levels ...</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="keywordtype">REAL</span> :: zkm1(n_sh)             <span class="comment">! ... k-1   [m]</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="keywordtype">REAL</span> :: zk(n_sh)               <span class="comment">! ... k     [m]</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="keywordtype">REAL</span> :: zkp12(n_sh)            <span class="comment">! ... k+1/2 [m]</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="keywordtype">REAL</span> :: zkp1(n_sh)             <span class="comment">! ... k+1   [m]</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="keywordtype">INTEGER</span> :: index1(n_sh),index2(n_sh)</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="keywordtype">INTEGER</span> :: ncposs               <span class="comment">! No. of points which may convect</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="keywordtype">INTEGER</span> :: nconv                <span class="comment">! No. of convecting points</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="keywordtype">REAL</span> :: amdetk(n_sh)            <span class="comment">! Mixing detrainment coefficient</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                                <span class="comment">! at level k multiplied by</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                                <span class="comment">! appropriate layer thickness</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="keywordtype">REAL</span> :: b_calc                  <span class="comment">! Coefficient in thpert calc.</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="keywordtype">REAL</span> :: c_calc                  <span class="comment">! Coefficient in thpert calc.</span></div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="keywordtype">REAL</span> :: cape(n_sh)              <span class="comment">! Convective available potential</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                                <span class="comment">! energy (J/kg)</span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="keywordtype">REAL</span> :: dq_sat_env              <span class="comment">! dqsat/dT  (kg/kg/K)</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="keywordtype">REAL</span> :: dcpbydt(n_sh)           <span class="comment">! Rate of change of cape (J/kg/s)</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="keywordtype">REAL</span> :: depth(n_sh)             <span class="comment">! Depth of convective cloud (m)</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="keywordtype">REAL</span> :: delexkp1(n_sh)          <span class="comment">! Difference in exner ratio</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                                <span class="comment">! across layer k+1</span></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="keywordtype">REAL</span> :: dqsthk(n_sh)            <span class="comment">! Gradient of saturation mixing</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                                <span class="comment">! ratio of cloud environment with</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                                <span class="comment">! theta in layer k (kg/kg/K)</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="keywordtype">REAL</span> :: dqsthkp1(n_sh)          <span class="comment">! Gradient of saturation mixing</span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                                <span class="comment">! ratio of cloud environment with</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                                <span class="comment">! theta in layer k+1 (kg/kg/K)</span></div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="keywordtype">REAL</span> ::               &amp;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;  ekp14(n_sh)         &amp; <span class="comment">! Entrainment coefficients at level k+1/4 multiplied</span></div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                        <span class="comment">! by appropriate layer thickness (dimensionless)</span></div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160; ,ekp34(n_sh)         &amp; <span class="comment">! Entrainment coefficients at level k+3/4 multiplied</span></div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                        <span class="comment">! by appropriate layer thickness (dimensionless)</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160; ,ekm14(n_sh)           <span class="comment">! Entrainment coefficients at level k-1+1/4 multiplied</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                        <span class="comment">! by appropriate layer thickness (dimensionless)</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="keywordtype">REAL</span> :: exk(n_sh)               <span class="comment">! Exner ratio at layer k</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="keywordtype">REAL</span> :: exkp1(n_sh)             <span class="comment">! Exner ratio at layer k+1</span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="keywordtype">REAL</span> ::                  &amp;  flxmax(n_sh)           &amp; <span class="comment">! Maximum initial convective mass flux (Pa/s)</span></div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160; ,flx_init(n_sh)         &amp; <span class="comment">! Initial mass flux at cloud base (Pa/s)</span></div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160; ,flx_init_new(n_sh)     &amp; <span class="comment">! flx_init scaled (Pa/s)</span></div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160; ,flx_init_term(n_sh)    &amp; <span class="comment">! flx_init copy on termination</span></div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160; ,flxmax_init(n_sh)      &amp; <span class="comment">! Maximum possible initial mass flux (limited to                           ! the mass inthe initial convecting layer in Pa/s)</span></div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160; ,max_cfl(n_sh)            <span class="comment">! Max cfl ratio over a convecting layer</span></div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="keywordtype">REAL</span> :: p_lcl(n_sh)             <span class="comment">! Pressure at LCL (Pa)</span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="keywordtype">REAL</span> :: precip(n_sh,nlev)       <span class="comment">! Amount of precip from each layer</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                                <span class="comment">! from each layer (kg/m/s)</span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="keywordtype">REAL</span> :: pk(n_sh)                <span class="comment">! Pressure at midpoint of layer</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                                <span class="comment">! k (Pa)</span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="keywordtype">REAL</span> :: pkp1(n_sh)              <span class="comment">! Pressure at midpoint of layer</span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                                <span class="comment">! k+1 (Pa)</span></div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="keywordtype">REAL</span> :: delpk(n_sh)             <span class="comment">! Pressure difference over layer</span></div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                                <span class="comment">! k (Pa)</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="keywordtype">REAL</span> :: delpkp1(n_sh)           <span class="comment">! Pressure difference over layer</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                                <span class="comment">! k+1 (Pa)</span></div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="keywordtype">REAL</span> :: delpkp12(n_sh)          <span class="comment">! Pressure difference between</span></div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                                <span class="comment">! layers k and k+1 (Pa)</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="keywordtype">REAL</span> :: delp_uv_k(n_sh)         <span class="comment">! Pressure difference across uv</span></div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                                <span class="comment">! layer k (Pa)</span></div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="keywordtype">REAL</span> :: delp_uv_kp1(n_sh)       <span class="comment">! Pressure difference across uv</span></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                                <span class="comment">! layer k+1 (Pa)</span></div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="keywordtype">REAL</span> :: q_lcl(n_sh)             <span class="comment">! Mixing ratio at LCL (kg/kg)</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="keywordtype">REAL</span> :: qse_lcl(n_sh)           <span class="comment">! Saturated q at LCL (kg/kg)</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="keywordtype">REAL</span> :: rhum(n_sh)              <span class="comment">! Dummy relative humidity</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                                <span class="comment">! (only used on shallow points)</span></div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="keywordtype">REAL</span> :: t_lcl(n_sh)             <span class="comment">! Temperature at LCL (K)</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="keywordtype">REAL</span> :: th_lcl(n_sh)            <span class="comment">! Theta at LCL (K)</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="keywordtype">REAL</span> :: dthv_ma                 <span class="comment">! Moist adiabtic change in thv</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                                <span class="comment">! from ntml to ntml+1 (K)</span></div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="keywordtype">REAL</span> :: thv_pert(n_sh)          <span class="comment">! Theta_v parcel pertubation (K)</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="keywordtype">REAL</span> :: thpert(n_sh)            <span class="comment">! Theta parcel pertubation (K)</span></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="keywordtype">REAL</span> :: qpert(n_sh)             <span class="comment">! q parcel pertubation (kg/kg)</span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="keywordtype">REAL</span> :: rho_k                   <span class="comment">! density on level k</span></div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;<span class="keywordtype">INTEGER</span> :: start_lev3c(n_sh)    <span class="comment">! Compressed convection</span></div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                                <span class="comment">! initiation level</span></div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;<span class="keywordtype">REAL</span> :: wsc(n_sh)               <span class="comment">! Convective velocity scale (m/s)</span></div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="keywordtype">REAL</span> :: wsc_o_mb(n_sh)          <span class="comment">! Convective velocity scale /mb</span></div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="keywordtype">LOGICAL</span> :: l_shallow(n_sh)      <span class="comment">! Dummy variable (=.T.)</span></div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="keywordtype">LOGICAL</span> :: l_mid(n_sh)          <span class="comment">! Dummy variable (=.F.)</span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="keywordtype">LOGICAL</span> :: cumulus(n_sh)        <span class="comment">! Dummy variable (=.T.)</span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="keywordtype">LOGICAL</span> ::             &amp;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;  bgmk(n_sh)           &amp; <span class="comment">! Mask for points where parcel in layer k is saturated</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160; ,bgmk_term(n_sh)      &amp; <span class="comment">! Mask at termination</span></div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160; ,bwater(n_sh,2:nlev)  &amp; <span class="comment">! Mask for points at which condensate is liquid</span></div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160; ,bwk(n_sh)            &amp; <span class="comment">! Mask for liquid condensate on k</span></div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160; ,bwkp1(n_sh)          &amp; <span class="comment">! Mask for liquid condensate on k+1</span></div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160; ,blowst(n_sh)         &amp; <span class="comment">! Dummy variable indicating low enough stability</span></div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                         <span class="comment">! for convection to occur</span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160; ,bterm(n_sh)          &amp; <span class="comment">! Mask for points which have stopped convecting</span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160; ,bconv(n_sh)          &amp; <span class="comment">! Mask for points at which convection is occurring</span></div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160; ,bcposs(n_sh)           <span class="comment">! Mask for points passing initial stability test</span></div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="comment">! Parcel variables</span></div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="keywordtype">REAL</span> :: qpi(n_sh)               <span class="comment">! Initial parcel mixing ratio</span></div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                                <span class="comment">!(kg/kg)</span></div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="keywordtype">REAL</span> :: qp(n_sh,nlev)           <span class="comment">! Parcel mixing ratio (kg/kg)</span></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="keywordtype">REAL</span> :: thpi(n_sh)              <span class="comment">! Initial parcel potential temp.</span></div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                                <span class="comment">!(K)</span></div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;<span class="keywordtype">REAL</span> :: thp(n_sh,nlev)          <span class="comment">! Parcel potential temp (K)</span></div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<span class="keywordtype">REAL</span> :: up(n_sh,nlev)           <span class="comment">! Parcel U (m/s)</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="keywordtype">REAL</span> :: vp(n_sh,nlev)           <span class="comment">! Parcel V  (m/s)</span></div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="keywordtype">REAL</span> :: trap(n_sh,nlev,ntra)    <span class="comment">! Tracer content of parcel</span></div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                                <span class="comment">! (kg/kg)</span></div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="keywordtype">REAL</span> :: expi(n_sh)              <span class="comment">! Initial parcel exner pressure</span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="keywordtype">REAL</span> :: xpk(n_sh,nlev)          <span class="comment">! Parcel cloud water (kg/kg)</span></div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="keywordtype">REAL</span> :: flx(n_sh,nlev)          <span class="comment">! Parcel massflux (Pa/s)</span></div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="keywordtype">REAL</span> :: xsbmin_v(n_sh,nlev)     <span class="comment">! Minmum parcel buoyancy excess</span></div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;<span class="keywordtype">REAL</span> :: thpixs_v(n_sh,nlev)     <span class="comment">! Theta parcel excess (K)</span></div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;<span class="keywordtype">REAL</span> :: qpixs_v(n_sh,nlev)      <span class="comment">! Q parcel excess(kg/kg)</span></div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="comment">! PC2</span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;<span class="keywordtype">REAL</span> :: qclp(n_sh,nlev)         <span class="comment">! Parcel liquid condensated mixing</span></div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                                <span class="comment">! ratio in layer k (kg/kg)</span></div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;<span class="keywordtype">REAL</span> :: qcfp(n_sh,nlev)         <span class="comment">! Parcel frozen condensated mixing</span></div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                                <span class="comment">! ratio in layer k (kg/kg)</span></div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;<span class="comment">! Parameters</span></div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">PARAMETER</span> :: cfl_limit = 1.0 <span class="comment">! Max CFL ratio allowed</span></div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="comment">! CMT variables</span></div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="keywordtype">INTEGER</span> :: nlcl_uv(n_sh)        <span class="comment">! Level index for LCL</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;<span class="keywordtype">INTEGER</span> :: ntop_uv(n_sh)        <span class="comment">! Level index for top of layer</span></div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;<span class="keywordtype">INTEGER</span> :: n_0degc(n_sh)        <span class="comment">! Level index for zero degrees</span></div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;<span class="keywordtype">INTEGER</span> :: cu_term(n_sh),cu_tend(n_sh) <span class="comment">!Indicies for CMT subs</span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;<span class="keywordtype">REAL</span> :: exk_temp                <span class="comment">! Temporary exner</span></div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;<span class="keywordtype">REAL</span> :: eflux_u_ud(n_sh)        <span class="comment">! Vertical eddy flux of momentum</span></div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                                <span class="comment">! due to UD at top of layer</span></div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                                <span class="comment">! (Pa m/s2)</span></div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;<span class="keywordtype">REAL</span> :: eflux_v_ud(n_sh)        <span class="comment">! Vertical eddy flux of momentum</span></div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                                <span class="comment">! due to UD at bottom of layer</span></div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                                <span class="comment">! (Pa m/s2)</span></div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="keywordtype">REAL</span> :: flxkp12(n_sh,nlev)      <span class="comment">! Mass flux on half level (Pa/s)</span></div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;<span class="keywordtype">REAL</span> :: mb(n_sh)                <span class="comment">! Cloud base mass flux (Pa/s)</span></div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;<span class="keywordtype">REAL</span> :: p_uv(nlev,n_sh)         <span class="comment">! Pressure of model level (Pa)</span></div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;<span class="keywordtype">REAL</span> :: phalf_uv(nlev,n_sh)     <span class="comment">! Pressure of half level (Pa)</span></div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;<span class="keywordtype">REAL</span> :: plcl_uv(n_sh)           <span class="comment">! Pressure at LCL (Pa)</span></div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;<span class="keywordtype">REAL</span> :: ptop_uv(n_sh)           <span class="comment">! Pressure at top of cloud layer</span></div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                                <span class="comment">! (Pa)</span></div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;<span class="keywordtype">REAL</span> :: p_0degc_uv(n_sh)        <span class="comment">! Pressure of zero degree level</span></div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                                <span class="comment">! (Pa)</span></div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;<span class="keywordtype">REAL</span> :: rho_uv(nlev,n_sh)       <span class="comment">! Density on uv level (kg/m3)</span></div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;<span class="keywordtype">REAL</span> :: uw(nlev,n_sh)           <span class="comment">! U- comp stress profile (N/m2)</span></div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                                <span class="comment">! (units change through calls)</span></div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;<span class="keywordtype">REAL</span> :: ue_p(nlev,n_sh)         <span class="comment">! Environment U profile (m/s)</span></div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;<span class="keywordtype">REAL</span> :: vw(nlev,n_sh)           <span class="comment">! V-comp stress profile (N/m2)</span></div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;<span class="keywordtype">REAL</span> :: ve_p(nlev,n_sh)         <span class="comment">! Environment V profile (m/s)</span></div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;<span class="keywordtype">REAL</span> :: zcld(n_sh)              <span class="comment">! Depth of cloud layer (m)</span></div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;<span class="keywordtype">LOGICAL</span> :: l_mom_gk             <span class="comment">! true if Gregory-Kershaw CMT</span></div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;<span class="comment">! CFL scaling variables</span></div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;<span class="keywordtype">INTEGER</span> :: det_lev(n_sh)        <span class="comment">! Level at which split final</span></div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                                <span class="comment">! detrainment last occurred</span></div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;<span class="keywordtype">INTEGER</span> :: nterm                <span class="comment">! No. of points where conv.</span></div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                                <span class="comment">! has terminated</span></div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;<span class="keywordtype">REAL</span> :: tempnum                 <span class="comment">! Temporary variable for storage</span></div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;<span class="keywordtype">REAL</span> :: weight_param            <span class="comment">! Weighting factor</span></div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;<span class="keywordtype">REAL</span> :: scale_f(n_sh)           <span class="comment">! store scaling factor</span></div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;<span class="keywordtype">REAL</span> :: cca_2d_term(n_sh)       <span class="comment">! store 2d CCA on termination</span></div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;<span class="comment">! Downdraught scheme variables</span></div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;<span class="keywordtype">INTEGER</span> :: nnodd                <span class="comment">! No. of downdraughts not possible</span></div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;<span class="keywordtype">INTEGER</span> :: index_nodd(n_sh)     <span class="comment">! Index of downdraughts not</span></div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                                <span class="comment">! possible</span></div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;<span class="keywordtype">INTEGER</span> :: npossdd              <span class="comment">! No. downdraughts possible</span></div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;<span class="keywordtype">INTEGER</span> :: index_possdd(n_sh)   <span class="comment">! Index of downdraughts</span></div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;<span class="keywordtype">INTEGER</span> :: kmax_term            <span class="comment">! maximum termination level + 1</span></div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;<span class="keywordtype">REAL</span> :: deltap_cld              <span class="comment">! pressure thickness of convective</span></div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                                <span class="comment">! cloud (Pa)</span></div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;<span class="comment">! Limit nlev loop to those levels actually required using ntpar</span></div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;<span class="comment">! diagnosed in conv_diag</span></div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;<span class="keywordtype">INTEGER</span> :: ntpar_max          <span class="comment">! max ntpar value</span></div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;<span class="comment">! parameters ect for qmin checks</span></div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">PARAMETER</span> :: qmin = 1.0e-8 <span class="comment">! Global minimum allowed Q</span></div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;<span class="keywordtype">REAL</span> :: qminincolumn(n_sh)     <span class="comment">! Minimum value for q in column (kg/kg)</span></div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;<span class="keywordtype">REAL</span> :: temp1(n_sh)            <span class="comment">! work array</span></div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;<span class="comment">!====================================================</span></div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;<span class="comment">! Local compressed arrays for calculation of</span></div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;<span class="comment">! parcel vertical velocity</span></div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;<span class="comment">! Compressed arrays for (Parcel vertical velocity)^2 on ...</span></div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;<span class="keywordtype">REAL</span> :: w2p_km1_c2 (n_sh)   <span class="comment">! ...layer centre k-1 [(m/s)^2]</span></div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;<span class="keywordtype">REAL</span> :: w2p_k_c2   (n_sh)   <span class="comment">! ...layer centre k   [(m/s)^2]</span></div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;<span class="keywordtype">REAL</span> :: w2p_kp1_c2 (n_sh)   <span class="comment">! ...layer centre k+1 [(m/s)^2]</span></div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;<span class="comment">! Compressed arrays for height above surface of model level ...</span></div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;<span class="keywordtype">REAL</span> :: zkm1_c2    (n_sh)   <span class="comment">! ...k-1   [m]</span></div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;<span class="keywordtype">REAL</span> :: zk_c2      (n_sh)   <span class="comment">! ...k     [m]</span></div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;<span class="keywordtype">REAL</span> :: zkp12_c2   (n_sh)   <span class="comment">! ...k+1/2 [m]</span></div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;<span class="keywordtype">REAL</span> :: zkp1_c2    (n_sh)   <span class="comment">! ...k+1   [m]</span></div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;<span class="keywordtype">INTEGER</span> :: n_wups           <span class="comment">! Sets size of arrays for</span></div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;                            <span class="comment">! vertical velocity calculation</span></div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;                            <span class="comment">! for 4a/5a convection schemes</span></div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;<span class="comment">!====================================</span></div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;<span class="comment">! Local compressed arrays</span></div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;<span class="keywordtype">LOGICAL</span> :: bconv_c2(n_sh)</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;<span class="keywordtype">LOGICAL</span> :: bgmkp1_c(n_sh), bgmkp1_c2(n_sh) <span class="comment">! Mask for points</span></div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;                                <span class="comment">! where parcel in layer k+1</span></div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;                                <span class="comment">! is saturated</span></div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;<span class="keywordtype">LOGICAL</span> :: bwk_c(n_sh), bwk_c2(n_sh) <span class="comment">! bwater mask in layer k</span></div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;<span class="keywordtype">LOGICAL</span> :: bwkp1_c(n_sh), bwkp1_c2(n_sh) <span class="comment">! bwater mask in layer k+1</span></div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;<span class="keywordtype">REAL</span> :: deltak_c2(n_sh)         <span class="comment">! Parcel forced detrainment rate</span></div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;                                <span class="comment">! in layer k multiplied by</span></div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                                <span class="comment">! appropriate layer thickness</span></div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;<span class="keywordtype">REAL</span> :: dqek_c2(n_sh)           <span class="comment">! Increment to q due to</span></div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;                                <span class="comment">! convection in layer k (kg/kg)</span></div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;<span class="keywordtype">REAL</span> :: dqekp1_c2(n_sh)         <span class="comment">! Increment to q due to</span></div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;                                <span class="comment">! convection in layer k+1 (kg/kg)</span></div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;<span class="keywordtype">REAL</span> :: dthek_c2(n_sh)          <span class="comment">! Increment to potential temp.</span></div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;                                <span class="comment">! due to convection in layer k</span></div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;<span class="keywordtype">REAL</span> :: dthekp1_c2(n_sh)        <span class="comment">! Increment to potential temp.</span></div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;                                <span class="comment">! due to convection in layer k+1</span></div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;<span class="keywordtype">REAL</span> :: dtraek_c2(n_sh,ntra)    <span class="comment">! Increment to model tracer due</span></div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;                                <span class="comment">! to conv. at level k (kg/kg/s)</span></div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;<span class="keywordtype">REAL</span> :: dtraekp1_c2(n_sh,ntra)  <span class="comment">! Increment to model tracer due</span></div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;                                <span class="comment">! to conv. at level k+1 (kg/kg/s)</span></div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;<span class="keywordtype">REAL</span> :: duek_c2(n_sh)           <span class="comment">! Increment to model U in layer k</span></div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;                                <span class="comment">! due to CMT (m/s2)</span></div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;<span class="keywordtype">REAL</span> :: duekp1_c2(n_sh)         <span class="comment">! Increment to model U in layer</span></div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;                                <span class="comment">! k+1 due to CMT (m/s2)</span></div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;<span class="keywordtype">REAL</span> :: dvek_c2(n_sh)           <span class="comment">! Increment to model V in layer k</span></div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;<span class="keywordtype">REAL</span> :: dvekp1_c2(n_sh)         <span class="comment">! Increment to model V in layer</span></div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;                                <span class="comment">! k+1 due to CMT (m/s2)</span></div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;<span class="keywordtype">REAL</span> :: flxk_c(n_sh), flxk_c2(n_sh) <span class="comment">!Parcel mass flux in layer k</span></div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;                                <span class="comment">! (Pa/s)</span></div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;<span class="keywordtype">REAL</span> :: flxkp12_c2(n_sh)        <span class="comment">! Half level mass flux (Pa/s)</span></div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;<span class="keywordtype">REAL</span> :: prekp1_c2(n_sh)         <span class="comment">! Precip. from parcel as it rises</span></div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;                                <span class="comment">! from layer k to k+1 (kg/m2/s)</span></div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;<span class="keywordtype">REAL</span> :: qpk_c(n_sh), qpk_c2(n_sh) <span class="comment">! Parcel mixing ratio in</span></div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;                                <span class="comment">! layer k(kg/kg)</span></div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;<span class="keywordtype">REAL</span> :: qpk(n_sh)               <span class="comment">!ad. entrain.</span></div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;<span class="keywordtype">REAL</span> :: qpkp1_c(n_sh), qpkp1_c2(n_sh) <span class="comment">! Parcel mixing ratio</span></div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;                                <span class="comment">! in layer k+1 (kg/kg)</span></div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;<span class="keywordtype">REAL</span> :: qek_c(n_sh), qek_c2(n_sh) <span class="comment">! Env. mixing ratio in</span></div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;                                <span class="comment">! layer k (kg/kg)</span></div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;<span class="keywordtype">REAL</span> :: qek(n_sh)               <span class="comment">!ad. entrain.</span></div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;<span class="keywordtype">REAL</span> :: qekp1_c(n_sh), qekp1_c2(n_sh) <span class="comment">! Env. mixing ratio in</span></div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;                                <span class="comment">! layer k+1 (kgkg-1)</span></div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;<span class="keywordtype">REAL</span> :: qekp1(n_sh)               <span class="comment">!ad. entrain.</span></div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;<span class="keywordtype">REAL</span> :: qsek_c2(n_sh)           <span class="comment">! Saturation mixing ratio of</span></div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;                                <span class="comment">! cld. env. in layer k (kg/kg)</span></div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;<span class="keywordtype">REAL</span> :: qsek(n_sh)              <span class="comment">!ad. entrain.</span></div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;<span class="keywordtype">REAL</span> :: qsekp1_c(n_sh), qsekp1_c2(n_sh) <span class="comment">! Saturation mixing ratio</span></div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;                                <span class="comment">! of cld. env. in layer k+1</span></div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;                                <span class="comment">! (kg/kg)</span></div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;<span class="keywordtype">REAL</span> :: qsekp1(n_sh)            <span class="comment">!ad. entrain.</span></div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;<span class="keywordtype">REAL</span> :: thek_c(n_sh), thek_c2(n_sh) <span class="comment">! Env. potential temp</span></div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;                                <span class="comment">! in layer k (K)</span></div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;<span class="keywordtype">REAL</span> :: thek(n_sh)              <span class="comment">!ad. entrain.</span></div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;<span class="keywordtype">REAL</span> :: thekp1_c(n_sh), thekp1_c2(n_sh) <span class="comment">! Env. potential temp i</span></div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;                                <span class="comment">! in layer k (K)</span></div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;<span class="keywordtype">REAL</span> :: thekp1(n_sh)            <span class="comment">!ad. entrain.</span></div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;<span class="keywordtype">REAL</span> :: thpk_c(n_sh), thpk_c2(n_sh) <span class="comment">! Parcel potential temp</span></div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;                                <span class="comment">! in layer k (K)</span></div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;<span class="keywordtype">REAL</span> :: thpk(n_sh)              <span class="comment">!ad. entrain.</span></div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;<span class="keywordtype">REAL</span> :: thpkp1_c(n_sh), thpkp1_c2(n_sh)<span class="comment">! Parcel potential temp</span></div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;                                <span class="comment">! in layer k (K)</span></div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;<span class="keywordtype">REAL</span> :: traek_c(n_sh,ntra), traek_c2(n_sh,ntra) <span class="comment">! Tracer content</span></div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;                                <span class="comment">! cld. env. in layer k (kgkg-1)</span></div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;<span class="keywordtype">REAL</span> :: traekp1_c(n_sh,ntra), traekp1_c2(n_sh,ntra) <span class="comment">! Tracer</span></div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                                <span class="comment">! content of cloud env.</span></div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;                                <span class="comment">! in layer k+1 (kg/kg)</span></div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;<span class="keywordtype">REAL</span> :: trapk_c(n_sh,ntra), trapk_c2(n_sh,ntra) <span class="comment">! Tracer cont.</span></div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;                                <span class="comment">! of parcel in layer k (kg/kg)</span></div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;<span class="keywordtype">REAL</span> :: trapkp1_c(n_sh,ntra), trapkp1_c2(n_sh,ntra) <span class="comment">! Tracer cont.</span></div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;                                <span class="comment">! of parcel in layer k+1 (kg/kg)</span></div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;<span class="keywordtype">REAL</span> :: rbuoy_c(n_sh), rbuoy_c2(n_sh) <span class="comment">! Buoyancy of parcel at k+1 (Kelvin)</span></div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;<span class="keywordtype">REAL</span> :: uek_c(n_sh), uek_c2(n_sh) <span class="comment">! Model U field on layer k (m/s)</span></div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;<span class="keywordtype">REAL</span> :: uekp1_c(n_sh), uekp1_c2(n_sh)<span class="comment">! Model U field on layer k+1 (m/s)</span></div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;<span class="keywordtype">REAL</span> :: vek_c(n_sh), vek_c2(n_sh) <span class="comment">! Model V field on layer k (m/s)</span></div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;<span class="keywordtype">REAL</span> :: vekp1_c(n_sh), vekp1_c2(n_sh) <span class="comment">! Model V field on layer k+1 (m/s)</span></div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;<span class="keywordtype">REAL</span> :: upk_c(n_sh), upk_c2(n_sh) <span class="comment">! Parcel U in layer k</span></div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;                                  <span class="comment">! after entrainment (m/s)</span></div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;<span class="keywordtype">REAL</span> :: upkp1_c(n_sh), upkp1_c2(n_sh) <span class="comment">! Parcel U in layer k+1</span></div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;                                      <span class="comment">! after entrainment (m/s)</span></div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;<span class="keywordtype">REAL</span> :: vpk_c(n_sh), vpk_c2(n_sh) <span class="comment">! Parcel V in layer k</span></div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;                                  <span class="comment">! after entrainment (m/s)</span></div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;<span class="keywordtype">REAL</span> :: vpkp1_c(n_sh), vpkp1_c2(n_sh) <span class="comment">! Parcel V in layer k+1</span></div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;                                      <span class="comment">! after entrainment (m/s)</span></div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;<span class="keywordtype">REAL</span> :: xsqkp1_c(n_sh), xsqkp1_c2(n_sh) <span class="comment">! Excess water vapour</span></div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;                                        <span class="comment">! in parcel at k+1 (kg/kg)</span></div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;<span class="comment">! PC2 compression arrays</span></div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;<span class="keywordtype">REAL</span> :: qclek_c(n_sh), qclek_c2(n_sh) <span class="comment">! Environment liquid</span></div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;                                      <span class="comment">! condensate mixing ratio in</span></div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;                                      <span class="comment">! layer k (kg/kg)</span></div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;<span class="keywordtype">REAL</span> :: qclekp1_c(n_sh), qclekp1_c2(n_sh) <span class="comment">! Environment liquid</span></div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;                                <span class="comment">! condensate mixing ratio in</span></div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;                                <span class="comment">! layer k+1 (kg/kg)</span></div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;<span class="keywordtype">REAL</span> :: qcfek_c(n_sh), qcfek_c2(n_sh) <span class="comment">! Environment frozen</span></div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;                                <span class="comment">! condensate mixing ratio in</span></div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;                                <span class="comment">! layer k (kg/kg)</span></div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;<span class="keywordtype">REAL</span> :: qcfekp1_c(n_sh), qcfekp1_c2(n_sh) <span class="comment">! Environment frozen</span></div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;                                <span class="comment">! condensate mixing ratio in</span></div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;                                <span class="comment">! layer k+1 (kg/kg)</span></div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;<span class="keywordtype">REAL</span> :: qclpk_c(n_sh), qclpk_c2(n_sh) <span class="comment">! Parcel liquid</span></div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;                                <span class="comment">! condensate mixing ratio in</span></div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;                                <span class="comment">! layer k (kg/kg)</span></div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;<span class="keywordtype">REAL</span> :: qclpkp1_c(n_sh), qclpkp1_c2(n_sh) <span class="comment">! Parcel liquid</span></div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;                                <span class="comment">! condensate mixing ratio in</span></div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;                                <span class="comment">! layer k+1 (kg/kg)</span></div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;<span class="keywordtype">REAL</span> :: qcfpk_c(n_sh), qcfpk_c2(n_sh) <span class="comment">! Parcel frozen</span></div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;                                <span class="comment">! condensate mixing ratio in</span></div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;                                <span class="comment">! layer k (kg/kg)</span></div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;<span class="keywordtype">REAL</span> :: qcfpkp1_c(n_sh), qcfpkp1_c2(n_sh) <span class="comment">! Parcel frozen</span></div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;                                <span class="comment">! condensate mixing ratio in</span></div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;                                <span class="comment">! layer k+1 (kg/kg)</span></div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;<span class="keywordtype">REAL</span> :: cflek_c2(n_sh),cflekp1_c2(n_sh) <span class="comment">! Environment liquid water</span></div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;                                <span class="comment">! cloud volume ( )</span></div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;<span class="keywordtype">REAL</span> :: cffek_c2(n_sh),cffekp1_c2(n_sh) <span class="comment">! Environment frozen water</span></div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;                                <span class="comment">! cloud volume ( )</span></div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;<span class="keywordtype">REAL</span> :: bcfek_c2(n_sh),bcfekp1_c2(n_sh) <span class="comment">! Environment bulk total</span></div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;                                <span class="comment">! cloud volume ( )</span></div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;<span class="keywordtype">REAL</span> :: dqclek_c2(n_sh),dqclekp1_c2(n_sh) <span class="comment">! Environment increments</span></div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;                                <span class="comment">! to liquid condensate mixing</span></div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;                                <span class="comment">! ratio to convection (kg/kg/s)</span></div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;<span class="keywordtype">REAL</span> :: dqcfek_c2(n_sh),dqcfekp1_c2(n_sh) <span class="comment">! Environment increments</span></div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;                                <span class="comment">! to frozen condensate mixing</span></div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;                                <span class="comment">! ratio to convection (kg/kg/s)</span></div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;<span class="keywordtype">REAL</span> :: dcflek_c2(n_sh),dcflekp1_c2(n_sh) <span class="comment">! Environment increments</span></div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;                                <span class="comment">! to liquid water cloud volume due</span></div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;                                <span class="comment">! to convection (/s)</span></div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;<span class="keywordtype">REAL</span> :: dcffek_c2(n_sh),dcffekp1_c2(n_sh) <span class="comment">! Environment increments</span></div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;                                <span class="comment">! to frozen water cloud volume due</span></div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;                                <span class="comment">! to convection (/s)</span></div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;<span class="keywordtype">REAL</span> :: dbcfek_c2(n_sh),dbcfekp1_c2(n_sh) <span class="comment">! Environment increments</span></div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;                                <span class="comment">! to bulk total cloud volume due</span></div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;                                <span class="comment">! to convection (/s)</span></div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;<span class="keywordtype">REAL</span> :: amdetk_c2(n_sh)</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;<span class="keywordtype">LOGICAL</span> :: bgmk_c2(n_sh)</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;<span class="keywordtype">LOGICAL</span> :: bland_c2(n_sh)</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;<span class="keywordtype">LOGICAL</span> :: blowst_c2(n_sh)</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;<span class="keywordtype">LOGICAL</span> :: bterm_c2(n_sh)</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;<span class="keywordtype">REAL</span> :: cape_c2(n_sh)</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;<span class="keywordtype">REAL</span> :: cca_2d_c2(n_sh)</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;<span class="keywordtype">REAL</span> :: cclwp_c2(n_sh)</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;<span class="keywordtype">REAL</span> :: ccw_c2(n_sh)</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;<span class="keywordtype">LOGICAL</span> :: cumulus_c(n_sh), cumulus_c2(n_sh)</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;<span class="keywordtype">REAL</span> :: dcpbydt_c2(n_sh)</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;<span class="keywordtype">REAL</span> :: delexkp1_c2(n_sh)</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;<span class="keywordtype">REAL</span> :: delpk_c2(n_sh)</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;<span class="keywordtype">REAL</span> :: delpkp1_c2(n_sh)</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;<span class="keywordtype">REAL</span> :: delp_uv_k_c2(n_sh)</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;<span class="keywordtype">REAL</span> :: delp_uv_kp1_c2(n_sh)</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;<span class="keywordtype">REAL</span> :: depth_c2(n_sh)</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;<span class="keywordtype">REAL</span> :: dptot_c2(n_sh)</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;<span class="keywordtype">REAL</span> :: dqsthkp1_c2(n_sh)</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;<span class="keywordtype">REAL</span> :: dqsthk_c2(n_sh)</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;<span class="keywordtype">REAL</span> :: eflux_u_ud_c2(n_sh)</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;<span class="keywordtype">REAL</span> :: eflux_v_ud_c2(n_sh)</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;<span class="keywordtype">REAL</span> :: ekp14_c(n_sh),ekp14_c2(n_sh)</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;<span class="keywordtype">REAL</span> :: ekp34_c(n_sh),ekp34_c2(n_sh)</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;<span class="keywordtype">REAL</span> :: exk_c2(n_sh)</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;<span class="keywordtype">REAL</span> :: exkp1_c(n_sh),exkp1_c2(n_sh)</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;<span class="keywordtype">REAL</span> :: expi_c2(n_sh)</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;<span class="keywordtype">INTEGER</span> :: icct_c2(n_sh)</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;<span class="keywordtype">INTEGER</span> :: iccb_c2(n_sh)</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;<span class="keywordtype">INTEGER</span> :: lctop_c2(n_sh)</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;<span class="keywordtype">INTEGER</span> :: lcbase_c2(n_sh)</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;<span class="keywordtype">REAL</span> :: lcca_c2(n_sh)</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;<span class="keywordtype">LOGICAL</span> :: l_shallow_c2(n_sh)</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;<span class="keywordtype">LOGICAL</span> :: l_mid_c2(n_sh)</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;<span class="keywordtype">REAL</span> :: max_cfl_c2(n_sh)</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;<span class="keywordtype">REAL</span> :: pk_c(n_sh),pk_c2(n_sh)</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;<span class="keywordtype">REAL</span> :: pkp1_c(n_sh),pkp1_c2(n_sh)</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;<span class="keywordtype">REAL</span> :: pstar_c2(n_sh)</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;<span class="keywordtype">REAL</span> :: q1_sd_c2(n_sh)</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;<span class="keywordtype">REAL</span> :: qpi_c2(n_sh)</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;<span class="keywordtype">REAL</span> :: qpixs_v_c2(n_sh)</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;<span class="keywordtype">REAL</span> :: relh_c2(n_sh)</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;<span class="keywordtype">REAL</span> :: rbuoy_p_here_c2(n_sh)</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;<span class="keywordtype">REAL</span> :: the_here_c2(n_sh)</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;<span class="keywordtype">REAL</span> :: thp_here_c2(n_sh)</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;<span class="keywordtype">REAL</span> :: qe_here_c2(n_sh)</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;<span class="keywordtype">REAL</span> :: qp_here_c2(n_sh)</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;<span class="keywordtype">REAL</span> :: rbuoy_p_old_c2(n_sh)</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;<span class="keywordtype">REAL</span> :: tcw_c2(n_sh)</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;<span class="keywordtype">REAL</span> :: thpi_c2(n_sh)</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;<span class="keywordtype">REAL</span> :: thpixs_v_c2(n_sh)</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;<span class="keywordtype">REAL</span> :: t1_sd_c2(n_sh)</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;<span class="keywordtype">REAL</span> :: xpk_c(n_sh),xpk_c2(n_sh)</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;<span class="keywordtype">REAL</span> :: xsbmin_v_c2(n_sh)</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;<span class="keywordtype">REAL</span> :: qsat_lcl(n_sh)         <span class="comment">! not used</span></div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;<span class="keywordtype">LOGICAL</span> :: b_nodd(n_sh)   <span class="comment">! points with no downdraught</span></div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;<span class="keywordtype">LOGICAL</span> :: b_dd(n_sh)     <span class="comment">! points with downdraught on termination</span></div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;<span class="keywordtype">INTEGER</span> :: n_real_sh   <span class="comment">! real shallow ascents i.e. terminate above ntml</span></div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;<span class="comment">!===============================================================</span></div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;<span class="comment">! CCRad Variables local variables</span></div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;<span class="comment">!===============================================================</span></div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;<span class="keywordtype">REAL</span>   :: overlap_fac(n_sh)  <span class="comment">! Factor designed to improve</span></div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;                             <span class="comment">! shallow Cu cover by allowing</span></div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;                             <span class="comment">! for non-vertical clouds.</span></div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;<span class="keywordtype">REAL</span>   :: zpr         <span class="comment">! method (BL Fluxes) only if</span></div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;                      <span class="comment">!   l_ccrad = T .AND. cca2d_sh_opt  = 1</span></div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;<span class="comment">!===============================================================</span></div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;<span class="comment">! End CCRad Variables local variables</span></div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;<span class="comment">!===============================================================</span></div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;<span class="comment">! Loop counters</span></div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;<span class="keywordtype">INTEGER</span> :: i,i2,j,k,ktra,kt</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;<span class="preprocessor">#if defined(SCMA)</span></div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;<span class="preprocessor"></span><span class="keywordtype">REAL</span> :: rout(n_sh)</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;<span class="keywordtype">REAL</span> :: r2out(n_sh,nlev+1)</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;<span class="keywordtype">CHARACTER (LEN=15)</span> :: sname</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;<span class="keywordtype">CHARACTER (LEN=100)</span> :: lname</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;<span class="keywordtype">CHARACTER (LEN=11)</span> :: units</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;<span class="preprocessor"></span></div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;<span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;<span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;<span class="keywordtype">REAL(KIND=jprb)</span>               :: zhook_handle</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;<span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;SHALLOW_CONV_5A&#39;</span>,zhook_in,zhook_handle)</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;<span class="comment">! The version of Convec2 used by the 5a scheme is also</span></div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;<span class="comment">! called by the 4a scheme. Assigning dimensioning of</span></div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;<span class="comment">! W-eqn arrays to be set by n_wups so that n_wups can</span></div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;<span class="comment">! be set to 1 if being use by the 4a scheme</span></div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;n_wups = n_sh</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;<span class="comment">!initialise SCM diagnostics</span></div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;<span class="keywordflow">DO</span> k = 1,nlev</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;  <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;    rbuoy_p_out(i,k)=0.0</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;    the_out(i,k)=th(i,k)</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;    thp_out(i,k)=th(i,k)</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;    qe_out(i,k)=q(i,k)</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;    qp_out(i,k)=q(i,k)</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;<span class="comment">! Initialise logicals</span></div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;<span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;  blowst(i)    = .true.</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;  bterm(i)     = .false.</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;  bconv(i)     = .false.</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;  bcposs(i)    = .false.</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;  cumulus(i)   = .true.</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;  l_shallow(i) = .true.</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;  l_mid(i)     = .false.</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;  b_nodd(i)    = .false.</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;  b_dd(i)      = .false.</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;<span class="comment">! 1.0  Create saturation mixing ratio arrays</span></div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;<span class="comment">! Re-calculate XSBMIN and THPIXS constants based on layer thickness (Pa)</span></div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;<span class="keywordflow">DO</span> k = 1,nlev-1</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;  <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;    xsbmin_v(i,k) = min( ((p_layer_centres(i,k) -                 &amp;</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;              p_layer_centres(i,k+1))/5000.0),1.0) *0.2</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;    thpixs_v(i,k) = min( ((p_layer_centres(i,k) -                 &amp;</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;              p_layer_centres(i,k+1))/5000.0),1.0) * <a class="code" href="namespacecv__param__mod.xhtml#a6e77850a4e7780d41dba1387a75343a0">thpixs_shallow</a></div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;    qpixs_v(i,k)  = <a class="code" href="namespacecv__param__mod.xhtml#a25bd328e29e1e5faa8057abdc3de323c">qpixs_shallow</a></div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;<span class="keywordflow">END DO</span>  <span class="comment">! nlev</span></div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;<span class="comment">! Calculate convective velocity scale and cloud base mass flux</span></div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;<span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;  wsc(i) = (delthvu(i) * <a class="code" href="namespacecv__param__mod.xhtml#abcb1051cbd7710f88f6e6df9df32bc38">c_mass</a> * wstar(i) * g / (th(i,ntml(i)) &amp;</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;               * (1.0 + c_virtual * q(i,ntml(i)))))**0.3333</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;  mb(i)  = <a class="code" href="namespacecv__param__mod.xhtml#abcb1051cbd7710f88f6e6df9df32bc38">c_mass</a> * wstar(i)</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;  zcld(i) = ztop_uv(i) - zlcl_uv(i)</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;  wsc_o_mb(i) = wsc(i)/mb(i)</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;  kterm(i) = 0</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;<span class="comment">! Define the LCL</span></div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;<span class="keywordflow">IF</span> ( <a class="code" href="namespacecv__run__mod.xhtml#abcd0633ecc8169d21bde31d396987ab3">sh_pert_opt</a> == 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;<span class="comment">!         Define the LCL at the half level above ntml. Find</span></div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;<span class="comment">!         environmental T at p_lcl by approximating theta there with</span></div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;<span class="comment">!         th(i,k) + constant*(th(i,k+1)-th(i,k))  where constant is</span></div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;<span class="comment">!         tunable.  Similarly for q.</span></div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;  <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;    k =ntml(i)</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;    p_lcl(i)  = p_layer_boundaries(i,k)</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;    th_lcl(i) = th(i,k) + 0.1 * (th(i,k+1) - th(i,k))</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;    t_lcl(i)  = th_lcl(i) * ((p_lcl(i) / pref)**kappa)</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;    q_lcl(i)  = q(i,k) + 0.1 * (q(i,k+1) - q(i,k))</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;<span class="keywordflow">ELSE</span>  <span class="comment">! Sh_pert_Opt = 1</span></div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;<span class="comment">!         Define the LCL at the half level above ntml. Find</span></div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;<span class="comment">!         environmental T at p_lcl by approximating theta there with</span></div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;<span class="comment">!         th(i,k) Similarly for q.</span></div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;  <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;    k =ntml(i)</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;    p_lcl(i)  = p_layer_boundaries(i,k)</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;    th_lcl(i) = th(i,k)</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;    t_lcl(i)  = th_lcl(i) * ((p_lcl(i) / pref)**kappa)</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;    q_lcl(i)  = q(i,k)</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;<span class="keywordflow">END IF</span></div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;<span class="comment">! Calculate saturation mixing ratio at LCL</span></div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;<span class="comment">! DEPENDS ON: qsat_mix</span></div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;<span class="keyword">CALL </span><a class="code" href="qsat__mix_8f90.xhtml#ab2c9bd03497c107afdc2ea71e3887626" title="Saturation Specific Humidity/mixing Scheme(Qsat):Vapour to Liquid/Ice. ">qsat_mix</a>(qse_lcl,t_lcl,p_lcl,n_sh,.false.)</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;<span class="comment">! Note: In terms of array indices p and phalf follow the convention</span></div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;<span class="comment">!       used in the boundary layer scheme. phalf(k,*) refers to the</span></div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;<span class="comment">!       lower boundary of uv layer k. This follows the convention for</span></div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;<span class="comment">!       um UM4.5 and before</span></div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;<span class="comment">!       Also note that p_layer_boundaries(0) and p_layer_centres(0)</span></div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;<span class="comment">!       = pstar, so p_uv(k,1) and phalf_uv(k,1) will be equal.</span></div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;<span class="comment">!       Because of the definition of nlcl, the pressure of the top of</span></div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;<span class="comment">!       the mixed layer is phalf_uv(nlcl,*)</span></div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;l_mom_gk = .false.       <span class="comment">! not Gregory-Kershaw CMT</span></div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;                         <span class="comment">! Shallow code uses turbulence based CMT</span></div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;<span class="keywordflow">IF</span> (<a class="code" href="namespacecv__run__mod.xhtml#a9fa9c42ad2da411d2451fd13fbf43514">l_mom</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;<span class="comment">! Initialize arrays required for Convective Momentum Transport(CMT)</span></div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;  k=1</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;  <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;    p_uv(k,i)     = p_layer_boundaries(i,k-1)</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;    phalf_uv(k,i) = p_layer_centres(i,k-1)</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;    ue_p(k,i)     = u(i,k)</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;    ve_p(k,i)     = v(i,k)</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;  <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;    nlcl_uv(i)    = ntml(i) + 1</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;    ntop_uv(i)    = ntpar(i) + 1</div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;    n_0degc(i)    = freeze_lev(i)</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;</div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;  <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;    <span class="keywordflow">DO</span> k = 2,nlev</div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;      p_uv(k,i)     = p_layer_boundaries(i,k-1)</div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;      phalf_uv(k,i) = p_layer_centres(i,k-1)</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;      ue_p(k,i)     = u(i,k)</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;      ve_p(k,i)     = v(i,k)</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;      exk_temp      = (p_uv(k,i)/pref)**kappa</div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;      rho_uv(k,i)   = 2.0 * p_uv(k,i) / (r * exk_temp * (th(i,k-1) + th(i,k)))</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;    plcl_uv(i)      = phalf_uv(nlcl_uv(i),i)</div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;    ptop_uv(i)      = phalf_uv(ntop_uv(i),i)</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;    p_0degc_uv(i)   = phalf_uv(n_0degc(i),i)</div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;    rho_uv(1,i)     = rho_uv(2,i)</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;<span class="keywordflow">END IF</span>     <span class="comment">!L_mom</span></div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;</div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;<span class="comment">! Calculate theta and q pertubations (pertubation is based on</span></div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;<span class="comment">! environment buoyancy gradient)</span></div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;<span class="comment">! Reset th and q xs&#39;s at ntml</span></div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;<span class="keywordflow">IF</span> ( <a class="code" href="namespacecv__run__mod.xhtml#abcd0633ecc8169d21bde31d396987ab3">sh_pert_opt</a> == 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;  <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;</div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;    k = ntml(i)</div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;</div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;    <span class="keywordflow">IF</span> (t_lcl(i) &gt;  tm) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;      dq_sat_env = repsilon * lc * qse_lcl(i)                     &amp;</div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;                      / (r * t_lcl(i) * t_lcl(i))</div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;</div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;      <span class="comment">! Estimate of moist adiabatic lapse rate</span></div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;</div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;      dthv_ma    = ( (lc/cp) - (1.+c_virtual)*th(i,k) )*          &amp;</div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;                   dq_sat_env*(g/cp)/(1.0+(lc/cp)*dq_sat_env)</div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;    <span class="keywordflow">ELSE</span></div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;      dq_sat_env = repsilon * (lc+lf) * qse_lcl(i)                &amp;</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;                      / (r * t_lcl(i) * t_lcl(i))</div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;</div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;      <span class="comment">! Estimate of moist adiabatic lapse rate (in K/m)</span></div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;</div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;      dthv_ma    = ( ((lc+lf)/cp) - (1.0+c_virtual)*th(i,k) )*    &amp;</div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;                   dq_sat_env*(g/cp)/(1.0+((lc+lf)/cp)*dq_sat_env)</div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;</div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;    b_calc   = t_lcl(i) * c_virtual * dq_sat_env + 1.0            &amp;</div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;                        + c_virtual * qse_lcl(i)</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;</div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;    <span class="comment">! Calculate theta_v perturbation:</span></div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;</div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;    <span class="keywordflow">IF</span> (<a class="code" href="namespacebl__option__mod.xhtml#a27098d154e3dacd839ec2f7041dd468d">kprof_cu</a> == <a class="code" href="namespacebl__option__mod.xhtml#a86e9bc58fc73bfa0e100aaf8b753c84e" title="Declarations: ">off</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;      thv_pert(i) = -0.17 * wthvs(i) / mb(i)                      &amp;</div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;                    + (th(i,k+1) * (1.0 + c_virtual               &amp;</div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;                    * q(i,k+1)) - th(i,k)                         &amp;</div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;                    * (1.0 + c_virtual * q(i,k)))</div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;    <span class="keywordflow">ELSE</span></div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;      <span class="comment">! &quot;entrainment flux&quot; at LCL given by BL scheme</span></div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;      thv_pert(i) =  (th(i,k+1) * (1.0 + c_virtual                 &amp;</div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;                    * q(i,k+1)) - th(i,k)                          &amp;</div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;                    * (1.0 + c_virtual * q(i,k)))</div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;</div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;    c_calc   = th_lcl(i) * c_virtual * (qse_lcl(i) - q_lcl(i))    &amp;</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;                         - thv_pert(i)</div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;</div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;    thpert(i) = -c_calc / b_calc  <span class="comment">! ignore term in thpert**2</span></div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;    thpixs_v(i,k) = thpert(i)</div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;</div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;    qpert(i)  = qse_lcl(i) + ((p_lcl(i) / pref)                   &amp;</div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;                           **kappa) * thpert(i) * dq_sat_env      &amp;</div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;                           - q_lcl(i)</div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;</div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;    qpixs_v(i,ntml(i))  = qpert(i)</div><div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;</div><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;<span class="keywordflow">  END DO</span> <span class="comment">!n_sh</span></div><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;</div><div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;<span class="keywordflow">ELSE</span> <span class="comment">! Sh_pert_opt = 1</span></div><div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;  <span class="keywordflow">IF</span> (<a class="code" href="namespacecv__run__mod.xhtml#a6ea9c7e06824af2eab9cebf59f2c1272">limit_pert_opt</a> == 1 .OR. <a class="code" href="namespacecv__run__mod.xhtml#a6ea9c7e06824af2eab9cebf59f2c1272">limit_pert_opt</a> == 2) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;    <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;</div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;      k = ntml(i)</div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;</div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;      <span class="keywordflow">IF</span> (t_lcl(i) &gt;  tm) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;        dq_sat_env = repsilon * lc * qse_lcl(i)                     &amp;</div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;                        / (r * t_lcl(i) * t_lcl(i))</div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;</div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;<span class="comment">!             Estimate of moist adiabatic lapse rate</span></div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;</div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;        dthv_ma    = ( (lc/cp) - (1.+c_virtual)*th(i,k) )*          &amp;</div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;                     dq_sat_env*(g/cp)/(1.+(lc/cp)*dq_sat_env)</div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;      <span class="keywordflow">ELSE</span></div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;        dq_sat_env = repsilon * (lc+lf) * qse_lcl(i)                &amp;</div><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;                        / (r * t_lcl(i) * t_lcl(i))</div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;</div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;<span class="comment">!             Estimate of moist adiabatic lapse rate (in K/m)</span></div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;</div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;        dthv_ma    = ( ((lc+lf)/cp) - (1.+c_virtual)*th(i,k) )*     &amp;</div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;                     dq_sat_env*(g/cp)/(1.+((lc+lf)/cp)*dq_sat_env)</div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;</div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;      b_calc   = t_lcl(i) * c_virtual * dq_sat_env + 1.0            &amp;</div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;                          + c_virtual * qse_lcl(i)</div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;</div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;</div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;<span class="comment">!           Calculate theta_v perturbation:</span></div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;<span class="comment">!           First convert moist adiabatic lapse rate to thv difference</span></div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;<span class="comment">!           between levels k and k+1</span></div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;</div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;      rho_k = p_layer_centres(i,k) /                              &amp;</div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;             (r * th(i,k) * (p_layer_centres(i,k)/ pref)**kappa)</div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;      dthv_ma = -dthv_ma*                                         &amp;</div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;             (p_layer_centres(i,k+1)-p_layer_centres(i,k)) /      &amp;</div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;             (rho_k*g)</div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;</div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;<span class="comment">!           Make perturbation relative to a target lapse rate (namely</span></div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;<span class="comment">!           0.6*dthv_ma, which is approximately what is seen in LES)</span></div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;      <span class="keywordflow">IF</span> (<a class="code" href="namespacebl__option__mod.xhtml#a27098d154e3dacd839ec2f7041dd468d">kprof_cu</a> == <a class="code" href="namespacebl__option__mod.xhtml#a86e9bc58fc73bfa0e100aaf8b753c84e" title="Declarations: ">off</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;        thv_pert(i) = -0.17 * wthvs(i) / mb(i) +  0.6*dthv_ma     &amp;</div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;                    - (  th(i,k+1)*(1.0 + c_virtual*q(i,k+1))     &amp;</div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;                    - th(i,k)  *(1.0 + c_virtual*q(i,k))  )</div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;</div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;      <span class="keywordflow">ELSE</span></div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;        <span class="comment">! &quot;entrainment flux&quot; at LCL done by BL scheme</span></div><div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;        thv_pert(i) = 0.6*dthv_ma                                 &amp;</div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;                    - (  th(i,k+1)*(1.0 + c_virtual*q(i,k+1))     &amp;</div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;                    - th(i,k)  *(1.0 + c_virtual*q(i,k))  )</div><div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;</div><div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;</div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;<span class="comment">!           limit thv_pert to physically sensible values</span></div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;</div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;      thv_pert(i) = max(min(thv_pert(i), <a class="code" href="namespacecv__param__mod.xhtml#a94434cd6f0c3c5a728ded72d214239c8">max_sh_thpert</a>),          &amp;</div><div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;                        <a class="code" href="namespacecv__param__mod.xhtml#a3660c75956444f1775bf01e51546f2d3">min_sh_thpert</a>)</div><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;</div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;      c_calc   = th_lcl(i) * c_virtual * (qse_lcl(i) - q_lcl(i))  &amp;</div><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;               - thv_pert(i)</div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;</div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;      thpert(i) = max(min(-c_calc / b_calc, <a class="code" href="namespacecv__param__mod.xhtml#a94434cd6f0c3c5a728ded72d214239c8">max_sh_thpert</a>),       &amp;</div><div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;                      <a class="code" href="namespacecv__param__mod.xhtml#a3660c75956444f1775bf01e51546f2d3">min_sh_thpert</a>)  <span class="comment">! ignore term in thpert**2</span></div><div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;</div><div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;      thpixs_v(i,k) = thpert(i)</div><div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;</div><div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;      qpert(i)  = max(min(qse_lcl(i) + ((p_lcl(i) / pref)         &amp;</div><div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;                        **kappa) * thpert(i) * dq_sat_env         &amp;</div><div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;                        - q_lcl(i),                               &amp;</div><div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;                        <a class="code" href="namespacecv__param__mod.xhtml#a5bb084a810395f517fbbed79555dd90d">max_sh_qpert_fac</a> * qse_lcl(i)),0.0)</div><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;</div><div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;      qpixs_v(i,ntml(i))  = qpert(i)</div><div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;</div><div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;<span class="keywordflow">    END DO</span> <span class="comment">!n_sh</span></div><div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;</div><div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;  <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (<a class="code" href="namespacecv__run__mod.xhtml#a6ea9c7e06824af2eab9cebf59f2c1272">limit_pert_opt</a> == 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;    <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;</div><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;      k = ntml(i)</div><div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;</div><div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;      <span class="keywordflow">IF</span> (t_lcl(i) &gt;  tm) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;        dq_sat_env = repsilon * lc * qse_lcl(i)                     &amp;</div><div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;                        / (r * t_lcl(i) * t_lcl(i))</div><div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;</div><div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;<span class="comment">!             Estimate of moist adiabatic lapse rate</span></div><div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;</div><div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;        dthv_ma    = ( (lc/cp) - (1.0+c_virtual)*th(i,k) )*         &amp;</div><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;                     dq_sat_env*(g/cp)/(1.0+(lc/cp)*dq_sat_env)</div><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;      <span class="keywordflow">ELSE</span></div><div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;        dq_sat_env = repsilon * (lc+lf) * qse_lcl(i)                &amp;</div><div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;                        / (r * t_lcl(i) * t_lcl(i))</div><div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;</div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;<span class="comment">!             Estimate of moist adiabatic lapse rate (in K/m)</span></div><div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;</div><div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;        dthv_ma    = ( ((lc+lf)/cp) - (1.0+c_virtual)*th(i,k) )*    &amp;</div><div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;                     dq_sat_env*(g/cp)/(1.0+((lc+lf)/cp)*dq_sat_env)</div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;</div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;      b_calc   = t_lcl(i) * c_virtual * dq_sat_env + 1.0            &amp;</div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;                          + c_virtual * qse_lcl(i)</div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;</div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;</div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;<span class="comment">!           Calculate theta_v perturbation:</span></div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;</div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;<span class="comment">!           First convert moist adiabatic lapse rate to thv difference</span></div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;<span class="comment">!           between levels k and k+1</span></div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;</div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;      rho_k = p_layer_centres(i,k) /                              &amp;</div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;             (r * th(i,k) * (p_layer_centres(i,k)/ pref)**kappa)</div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;      dthv_ma = -dthv_ma*                                         &amp;</div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;             (p_layer_centres(i,k+1)-p_layer_centres(i,k)) /      &amp;</div><div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;             (rho_k*g)</div><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;</div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;<span class="comment">!           Make perturbation relative to a target lapse rate (namely</span></div><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;<span class="comment">!           0.6*dthv_ma, which is approximately what is seen in LES)</span></div><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;</div><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;      <span class="keywordflow">IF</span> (<a class="code" href="namespacebl__option__mod.xhtml#a27098d154e3dacd839ec2f7041dd468d">kprof_cu</a> == <a class="code" href="namespacebl__option__mod.xhtml#a86e9bc58fc73bfa0e100aaf8b753c84e" title="Declarations: ">off</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;        thv_pert(i) = -0.17 * wthvs(i) / mb(i) +  0.6*dthv_ma     &amp;</div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;                    - (  th(i,k+1)*(1.0 + c_virtual*q(i,k+1))     &amp;</div><div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;                    - th(i,k)  *(1.0 + c_virtual*q(i,k))  )</div><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;</div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;      <span class="keywordflow">ELSE</span></div><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;        <span class="comment">! &quot;entrainment flux&quot; at LCL done by BL scheme</span></div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;        thv_pert(i) = 0.6*dthv_ma                                 &amp;</div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;                    - (  th(i,k+1)*(1.0 + c_virtual*q(i,k+1))     &amp;</div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;                    - th(i,k)  *(1.0 + c_virtual*q(i,k))  )</div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;</div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;</div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;      c_calc   = th_lcl(i) * c_virtual * (qse_lcl(i) - q_lcl(i))  &amp;</div><div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;                         - thv_pert(i)</div><div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;</div><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;      thpert(i) = -c_calc / b_calc  <span class="comment">! ignore term in thpert**2</span></div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;</div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;      thpixs_v(i,k) = thpert(i)</div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;</div><div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;      qpert(i)  = qse_lcl(i) + ((p_lcl(i) / pref)                 &amp;</div><div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;                             **kappa) * thpert(i) * dq_sat_env    &amp;</div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;                             - q_lcl(i)</div><div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;</div><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;      qpixs_v(i,ntml(i))  = qpert(i)</div><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;</div><div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;<span class="keywordflow">    END DO</span> <span class="comment">!n_sh</span></div><div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;</div><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;</div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;<span class="keywordflow">END IF</span></div><div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;</div><div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;<span class="comment">! Set bwater=.true. on points where water will condense rather than</span></div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;<span class="comment">! ice.</span></div><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;<span class="comment">! SUBROUTINE FLAG_WET</span></div><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;<span class="comment">! UM Documentation paper 27, section (2B)</span></div><div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;</div><div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;<span class="comment">! DEPENDS ON: flag_wet</span></div><div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;<span class="keyword">CALL </span><a class="code" href="flag__wet-flagw3c_8f90.xhtml#a521379d7c8baed5c40f3e63ce2763102" title="Calculate a mask for when condensation is liquid. ">flag_wet</a>(n_sh,n_sh,nlev,th,exner_layer_centres,bwater)</div><div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;</div><div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;</div><div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;<span class="comment">! 2.0  Array Initialisation</span></div><div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;</div><div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;</div><div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;</div><div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;<span class="comment">! 2.1  Initialise precipitation, dth/dt, dq/dt, du/dt, dv/dt, tracer</span></div><div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;<span class="comment">!      increment arrays and cca</span></div><div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;<span class="comment">!      and dqcl/dt, dqcf/dt, dcfl/dt, dcff/dt, dbcf/dt</span></div><div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;</div><div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;</div><div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;<span class="keywordflow">DO</span> k = 1,nlev</div><div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;  <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;    qp(i,k)     = 0.0</div><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;    thp(i,k)    = 0.0</div><div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;    precip(i,k) = 0.0</div><div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;    ccw(i,k)    = 0.0</div><div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;    xpk(i,k)    = 0.0</div><div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;    dthbydt(i,k) = 0.0</div><div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;    dqbydt(i,k)  = 0.0</div><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;    dqclbydt(i,k) = 0.0</div><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;    dqcfbydt(i,k) = 0.0</div><div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;    dbcfbydt(i,k) = 0.0</div><div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;    dcflbydt(i,k) = 0.0</div><div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;    dcffbydt(i,k) = 0.0</div><div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;    flxkp12(i,k)  = 0.0</div><div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;</div><div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;<span class="keywordflow">IF</span> (<a class="code" href="namespacecv__run__mod.xhtml#a9fa9c42ad2da411d2451fd13fbf43514">l_mom</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;  <span class="keywordflow">DO</span> k = 1,nlev</div><div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;    <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;      dubydt(i,k) = 0.0</div><div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;      dvbydt(i,k) = 0.0</div><div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;<span class="keywordflow">END IF</span>  <span class="comment">! L_mom</span></div><div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;</div><div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;<span class="comment">! No need to initialise dtrabydt as done in glue_conv</span></div><div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;</div><div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;</div><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;<span class="comment">! 2.2  Initialise diagnostic arrays selected by STASH flags</span></div><div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;</div><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;</div><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;<span class="keywordflow">IF</span> (<a class="code" href="namespacecv__stash__flg__mod.xhtml#aaa805ef81602a9e8e678e5f68be250ee">flg_up_flx</a> .OR. <a class="code" href="namespacecv__stash__flg__mod.xhtml#a37b3464d529c8ecb00a46ae1312081bc">flg_mf_shall</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;  <span class="keywordflow">DO</span> k = 1,nlev</div><div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;    <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;      up_flux(i,k) = 0.0</div><div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;<span class="keywordflow">END IF</span></div><div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;<span class="keywordflow">IF</span> (flg_up_flx_half) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;  <span class="keywordflow">DO</span> k = 1,nlev</div><div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;    <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;      up_flux_half(i,k) = 0.0</div><div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;<span class="keywordflow">END IF</span></div><div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;<span class="keywordflow">IF</span> (<a class="code" href="namespacecv__stash__flg__mod.xhtml#a645dd024842155b75c5b638f11391ac9">flg_dwn_flx</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;  <span class="keywordflow">DO</span> k = 1,nlev</div><div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;    <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;      dwn_flux(i,k) = 0.0</div><div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;<span class="keywordflow">END IF</span></div><div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;<span class="keywordflow">IF</span> (<a class="code" href="namespacecv__stash__flg__mod.xhtml#a594eca06c1e2300b31f8c2bba686ff1e">flg_entr_up</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;  <span class="keywordflow">DO</span> k = 1,nlev</div><div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;    <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;      entrain_up(i,k) = 0.0</div><div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;<span class="keywordflow">END IF</span></div><div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;<span class="keywordflow">IF</span> (<a class="code" href="namespacecv__stash__flg__mod.xhtml#a23946cc9e076aa4865e7ed4049aa6e81">flg_detr_up</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;  <span class="keywordflow">DO</span> k = 1,nlev</div><div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;    <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;      detrain_up(i,k) = 0.0</div><div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;<span class="keywordflow">END IF</span></div><div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;<span class="keywordflow">IF</span> (<a class="code" href="namespacecv__stash__flg__mod.xhtml#a9986060bf6c1a80468d9ae32b6bafcf9">flg_entr_dwn</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;  <span class="keywordflow">DO</span> k = 1,nlev</div><div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;    <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;     entrain_dwn(i,k) = 0.0</div><div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;<span class="keywordflow">END IF</span></div><div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;<span class="keywordflow">IF</span> (<a class="code" href="namespacecv__stash__flg__mod.xhtml#ad0f02382d0dbfd786770638461d8ec1f">flg_detr_dwn</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;  <span class="keywordflow">DO</span> k = 1,nlev</div><div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;    <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;      detrain_dwn(i,k) = 0.0</div><div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;<span class="keywordflow">END IF</span></div><div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;</div><div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;<span class="keywordflow">IF</span> (<a class="code" href="namespacecv__run__mod.xhtml#a9fa9c42ad2da411d2451fd13fbf43514">l_mom</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;  <span class="keywordflow">IF</span> (<a class="code" href="namespacecv__stash__flg__mod.xhtml#ad13801fb31f0f607d924aba4b0ab0839">flg_uw_shall</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;    <span class="keywordflow">DO</span> k = 1,nlev</div><div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;      <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;        uw_shall(i,k) = 0.0</div><div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;  <span class="keywordflow">IF</span> (<a class="code" href="namespacecv__stash__flg__mod.xhtml#a866a659288edb036141e19b4892f24d9">flg_vw_shall</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;    <span class="keywordflow">DO</span> k = 1,nlev</div><div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;      <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;        vw_shall(i,k) = 0.0</div><div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;<span class="keywordflow">END IF</span>  <span class="comment">! L_mom</span></div><div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;</div><div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;</div><div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;<span class="comment">! 2.3  Initialise radiation diagnostics</span></div><div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;</div><div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;<span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;  cca_2d(i) = 0.0</div><div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;  iccb(i)   = 0</div><div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;  icct(i)   = 0</div><div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;  tcw(i)    = 0.0</div><div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;  cclwp(i)  = 0.0</div><div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;  lcca(i)   = 0.0</div><div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;  lctop(i)  = 0</div><div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;  lcbase(i) = 0</div><div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;</div><div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;<span class="keywordflow">DO</span> k=1, n_cca_lev</div><div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;  <span class="keywordflow">DO</span> i=1, n_sh</div><div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;    cca(i,k) = 0.0</div><div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;</div><div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;</div><div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;<span class="comment">! 2.4  Initialise gridbox mean diagnostics - done in glue routine</span></div><div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;</div><div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;</div><div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;<span class="comment">! 2.5  Initialise diagnostics for scaling calculations</span></div><div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;</div><div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;</div><div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;<span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;  flx_init(i)     = 0.0</div><div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;  flx_init_new(i) = 0.0</div><div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;  cape(i)      = 0.0</div><div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;  cape_out(i)  = 0.0</div><div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;  dcpbydt(i)   = 0.0</div><div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;  max_cfl(i)   = 0.0</div><div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;  det_lev(i)   = 0</div><div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;  cca_2d_term(i) = 0.0</div><div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;  flx_init_term(i) = 0.0</div><div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;</div><div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;</div><div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;<span class="comment">! 2.6  Initialise eddy flux arrays for updraught</span></div><div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;</div><div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;</div><div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;  eflux_u_ud(i) = 0.0</div><div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;  eflux_v_ud(i) = 0.0</div><div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;</div><div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;</div><div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;<span class="comment">! 2.7  Initialise surface precipitation arrays</span></div><div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;</div><div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;</div><div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;  rain(i) = 0.0</div><div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;  snow(i) = 0.0</div><div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;</div><div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;<span class="comment">! set SCM adaptive diagnostics for level k = 1</span></div><div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;</div><div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;<span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;  rbuoy_p_here(i) = 0.0</div><div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;  the_here(i) = th(i,1)</div><div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;  thp_here(i) = th(i,1)</div><div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;  qe_here(i) = q(i,1)</div><div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;  qp_here(i) = q(i,1)</div><div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;  rbuoy_p_old(i) = 0.0</div><div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;<span class="comment">!initialise ekm14</span></div><div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;<span class="keywordflow">DO</span> i =1, n_sh</div><div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;  ekm14(i) =0.0</div><div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;<span class="comment">!Initialise adaptive entrainment variables</span></div><div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;<span class="keywordflow">DO</span> i = 1, n_sh</div><div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;  thek(i)=th(i,1)</div><div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;  qek(i)=q(i,1)</div><div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;  qsek(i)=qse(i,1)</div><div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;  thekp1(i)=th(i,2)</div><div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;  qekp1(i)=q(i,2)</div><div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;  qsekp1(i)=qse(i,2)</div><div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;  thpk(i)=thp(i,1)</div><div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;  qpk(i)=qp(i,1)</div><div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;  bwk(i)=bwater(i,2)</div><div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;  bwkp1(i)=bwater(i,2)</div><div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;  <span class="comment">!Note that unlike p_layer_boundaries, where k indexing is offset</span></div><div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;  <span class="comment">!by one compared to the dynamics numbering, z retains the numbering</span></div><div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;  <span class="comment">!convention for dynamics variables i.e. for theta levels, k-&gt;k</span></div><div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;  <span class="comment">!and for rho levels k+1/2 -&gt; k+1</span></div><div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;  zkm1(i)  = 0.0</div><div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;  zk(i)    = z_theta(i,1)</div><div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;  zkp12(i) = z_rho(i,2)</div><div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;  zkp1(i)  = z_theta(i,2)</div><div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;</div><div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;</div><div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;<span class="comment">! 3.0  Main loop over all levels</span></div><div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;</div><div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;<span class="comment">! To reduce cost limit level loop to NTPAR_MAX maximum NTPAR value.</span></div><div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;<span class="comment">! NTPAR is the top of the parcel ascent for shallow convection.</span></div><div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;</div><div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;<span class="keywordflow">IF</span> (<a class="code" href="namespacecv__dependent__switch__mod.xhtml#a1369b0cc22efacc4b37aa3db4943e844" title="Extra switches controlling adaptive forced detrainment options. ">sh_on</a> == 1 .OR. <a class="code" href="namespacecv__dependent__switch__mod.xhtml#a6a0879b7a28fdcb71d673d1c76810d94">sh_grey</a> == 1) <span class="keywordflow">THEN</span>                        <span class="comment">! Adaptive forced detrainment or grey shallow param</span></div><div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;                      <span class="comment">! No limit on convection top</span></div><div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;  ntpar_max = nlev-3  <span class="comment">! What is a sensible value to have here?</span></div><div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;</div><div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;<span class="keywordflow">ELSE</span>                  <span class="comment">! Top limited</span></div><div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;</div><div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;  ntpar_max=0</div><div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;  <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;    <span class="keywordflow">IF</span> (ntpar(i) &gt;  ntpar_max) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;      ntpar_max=ntpar(i)</div><div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;<span class="keywordflow">END IF</span></div><div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;</div><div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;<span class="comment">! Add a level (needed to ensure tracers give same answers on different</span></div><div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;<span class="comment">! CPU configurations). Not sure why.</span></div><div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;ntpar_max=ntpar_max+1</div><div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;</div><div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;<span class="comment">! This test should not really be required as don&#39;t expect any</span></div><div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;<span class="comment">! shallow convection to reach model top unless a very funny set of</span></div><div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;<span class="comment">! model levels (very shallow atmosphere).</span></div><div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;</div><div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;<span class="keywordflow">IF</span> (ntpar_max == nlev) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;  ntpar_max=nlev-1</div><div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;<span class="keywordflow">END IF</span></div><div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;</div><div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;<span class="comment">!      Do k = 2,nlev-1       ! original level loop</span></div><div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;</div><div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;<span class="keywordflow">DO</span> k = 2,ntpar_max</div><div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;</div><div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;<span class="comment">! initialize SCM diagnostics for this pass through the loop</span></div><div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;<span class="comment">!NB do not re-initialise rbuoy_p_old &#39;cos value from k-1 needed</span></div><div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;  <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;    rbuoy_p_here(i) = 0.0</div><div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;    the_here(i) = th(i,k)</div><div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;    thp_here(i) = th(i,k)</div><div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;    qe_here(i) = q(i,k)</div><div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;    qp_here(i) = q(i,k)</div><div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;    rbuoy_p_here_c2(i) = 0.0</div><div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;    the_here_c2(i) = 0.0</div><div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;    thp_here_c2(i) = 0.0</div><div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;    qe_here_c2(i) = 0.0</div><div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;    qp_here_c2(i) = 0.0</div><div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;  <span class="comment">!Initialise adaptive entrainment variables</span></div><div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;  <span class="keywordflow">DO</span> i = 1, n_sh</div><div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;    thek(i)=th(i,k)</div><div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;    qek(i)=q(i,k)</div><div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;    qsek(i)=qse(i,k)</div><div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;    thekp1(i)=th(i,k+1)</div><div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;    qekp1(i)=q(i,k+1)</div><div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;    qsekp1(i)=qse(i,k+1)</div><div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;    <span class="keywordflow">IF</span>(k  ==  2) <span class="keywordflow">THEN</span>      <span class="comment">!set to environmental values</span></div><div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;      thpk(i)=th(i,2)</div><div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;      qpk(i)=q(i,2)</div><div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;    <span class="keywordflow">ELSE</span></div><div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;      thpk(i)=thp(i,k)</div><div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;      qpk(i)=qp(i,k)</div><div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;    bwk(i)=bwater(i,k)</div><div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;    bwkp1(i)=bwater(i,k+1)</div><div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;    <span class="comment">!Note that unlike p_layer_boundaries, where k indexing is offset</span></div><div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;    <span class="comment">!by one compared to the dynamics numbering, z retains the numbering</span></div><div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;    <span class="comment">!convention for dynamics variables i.e. for theta levels, k-&gt;k</span></div><div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;    <span class="comment">!and for rho levels k+1/2 -&gt; k+1</span></div><div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;    zkm1(i)  = z_theta(i,k-1)</div><div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;    zk(i)    = z_theta(i,k)</div><div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;    zkp12(i) = z_rho(i,k+1)</div><div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;    zkp1(i)  = z_theta(i,k+1)</div><div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;</div><div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;  <span class="comment">! Set relative humidity in layer k (rhum)</span></div><div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;</div><div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;  <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;    rhum(i) = q(i,k) / qse(i,k)</div><div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;</div><div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;</div><div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;<span class="comment">! 3.1  Calculate layer dependent constants (pressure,</span></div><div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;<span class="comment">!      layer thickness, entrainment coefficients, detrainment</span></div><div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;<span class="comment">!      coefficients)</span></div><div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;</div><div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;</div><div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;<span class="comment">! DEPENDS ON: layer_cn</span></div><div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;  <span class="keyword">CALL </span><a class="code" href="layer__cn__5a_8f90.xhtml#a08e669794e8e7dec99cc71b0c9906f64" title="Calculates layer dependent constants for model layer k. ">layer_cn</a>(k,n_sh,nlev                                       &amp;</div><div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;,                   <a class="code" href="namespacecv__dependent__switch__mod.xhtml#ad1bb03a58af33967bf5ee0e649ef2a6e">mdet_sh_on</a>, <a class="code" href="namespacecv__dependent__switch__mod.xhtml#a04d20ef5d1557d4bd84e8f621af79ff7">sh_ent_on</a>                         &amp;</div><div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;,                   ntml,ntpar                                    &amp;</div><div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;,                   .true.,.false.,.false.                        &amp;</div><div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;,                   bconv,bwk,bwkp1                               &amp;</div><div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;,                   exner_layer_boundaries                        &amp;</div><div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;,                   exner_layer_centres                           &amp;</div><div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;,                   p_layer_boundaries,p_layer_centres            &amp;</div><div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;,                   recip_pstar,entrain_coef,rhum                 &amp;</div><div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;,                   zk, zkp12, zkp1                               &amp;</div><div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;,                   thek, qek,qsek, thekp1,qekp1,qsekp1           &amp;</div><div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;,                   thpk,qpk , qsat_lcl, ekm14                    &amp;</div><div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;,                   pkp1,delpkp1,exkp1                            &amp;</div><div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;,                   pk,delpk,delpkp12,exk,delexkp1                &amp;</div><div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;,                   delp_uv_k, delp_uv_kp1                        &amp;</div><div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;,                   ekp14,ekp34,amdetk)</div><div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;</div><div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;<span class="comment">! Set ekm14 for next pass through loop</span></div><div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;  <span class="keywordflow">DO</span> i = 1, n_sh</div><div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;    ekm14(i) = ekp14(i)</div><div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;</div><div class="line"><a name="l01550"></a><span class="lineno"> 1550</span>&#160;<span class="comment">! Calculate dqs/dth for layers k and k+1 (subroutine DQS_DTH)</span></div><div class="line"><a name="l01551"></a><span class="lineno"> 1551</span>&#160;</div><div class="line"><a name="l01552"></a><span class="lineno"> 1552</span>&#160;  <span class="keywordflow">IF</span> (k == 2) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;<span class="comment">! DEPENDS ON: dqs_dth</span></div><div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;    <span class="keyword">CALL </span><a class="code" href="dqs__dth-5a_8f90.xhtml#a4d930a969004b9c670ef8686a87fdbe6" title="Calculates gradient of saturation mixing ratio. ">dqs_dth</a>(dqsthk,k,th(1,k),qse(1,k),exk,n_sh)</div><div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;  <span class="keywordflow">ELSE</span></div><div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;    <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;      dqsthk(i) = dqsthkp1(i)</div><div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;</div><div class="line"><a name="l01561"></a><span class="lineno"> 1561</span>&#160;<span class="comment">! DEPENDS ON: dqs_dth</span></div><div class="line"><a name="l01562"></a><span class="lineno"> 1562</span>&#160;  <span class="keyword">CALL </span><a class="code" href="dqs__dth-5a_8f90.xhtml#a4d930a969004b9c670ef8686a87fdbe6" title="Calculates gradient of saturation mixing ratio. ">dqs_dth</a>(dqsthkp1,k+1,th(1,k+1),qse(1,k+1),exkp1,n_sh)</div><div class="line"><a name="l01563"></a><span class="lineno"> 1563</span>&#160;</div><div class="line"><a name="l01564"></a><span class="lineno"> 1564</span>&#160;<span class="comment">! Set other grid dependent constants</span></div><div class="line"><a name="l01565"></a><span class="lineno"> 1565</span>&#160;</div><div class="line"><a name="l01566"></a><span class="lineno"> 1566</span>&#160;  <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;</div><div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;    <span class="comment">! Maximum initial convective mass flux</span></div><div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;</div><div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;    flxmax(i) = delpk(i) / ((1.0 + ekp14(i)) * timestep)</div><div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;</div><div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;</div><div class="line"><a name="l01574"></a><span class="lineno"> 1574</span>&#160;<span class="comment">! Set initial parcel properties (theta,q,tracer,momentum) if convection</span></div><div class="line"><a name="l01575"></a><span class="lineno"> 1575</span>&#160;<span class="comment">! is not occurring at level k</span></div><div class="line"><a name="l01576"></a><span class="lineno"> 1576</span>&#160;</div><div class="line"><a name="l01577"></a><span class="lineno"> 1577</span>&#160;  <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;<span class="comment">! not convecting and not convected in column before</span></div><div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;<span class="comment">! PC2 qclp and qcfp zero at this point but will add an initial</span></div><div class="line"><a name="l01580"></a><span class="lineno"> 1580</span>&#160;<span class="comment">! value at cloud base</span></div><div class="line"><a name="l01581"></a><span class="lineno"> 1581</span>&#160;    <span class="keywordflow">IF</span> ( .NOT. bconv(i).AND.det_lev(i) == 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01582"></a><span class="lineno"> 1582</span>&#160;      expi(i)  = exk(i)</div><div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160;      xpk(i,k) = 0.0</div><div class="line"><a name="l01584"></a><span class="lineno"> 1584</span>&#160;      qclp(i,k) = 0.0</div><div class="line"><a name="l01585"></a><span class="lineno"> 1585</span>&#160;      qcfp(i,k) = 0.0</div><div class="line"><a name="l01586"></a><span class="lineno"> 1586</span>&#160;      flx(i,k) = 0.0</div><div class="line"><a name="l01587"></a><span class="lineno"> 1587</span>&#160;      bgmk(i)       = .false.</div><div class="line"><a name="l01588"></a><span class="lineno"> 1588</span>&#160;      bgmk_term(i)  = .false.</div><div class="line"><a name="l01589"></a><span class="lineno"> 1589</span>&#160;      depth(i) = 0.0</div><div class="line"><a name="l01590"></a><span class="lineno"> 1590</span>&#160;      thpi(i)  = th(i,k) + thpixs_v(i,k)</div><div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;      thp(i,k) = thpi(i)</div><div class="line"><a name="l01592"></a><span class="lineno"> 1592</span>&#160;      qpi(i)   = q(i,k) + qpixs_v(i,k)</div><div class="line"><a name="l01593"></a><span class="lineno"> 1593</span>&#160;      qp(i,k)  = qpi(i)</div><div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;      <span class="keywordflow">IF</span> (l_mom_gk) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;        up(i,k) = u(i,k)</div><div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;        vp(i,k) = v(i,k)</div><div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l01598"></a><span class="lineno"> 1598</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l01599"></a><span class="lineno"> 1599</span>&#160;<span class="keywordflow">  END DO</span>  <span class="comment">! n_sh</span></div><div class="line"><a name="l01600"></a><span class="lineno"> 1600</span>&#160;  <span class="keywordflow">IF</span> (l_tracer) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160;    <span class="keywordflow">DO</span> ktra=1,ntra</div><div class="line"><a name="l01602"></a><span class="lineno"> 1602</span>&#160;      <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l01603"></a><span class="lineno"> 1603</span>&#160;        <span class="keywordflow">IF</span> ( .NOT. bconv(i)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01604"></a><span class="lineno"> 1604</span>&#160;           trap(i,k,ktra)  = tracer(i,k,ktra)</div><div class="line"><a name="l01605"></a><span class="lineno"> 1605</span>&#160;<span class="keywordflow">        END IF</span>  <span class="comment">!not bconv</span></div><div class="line"><a name="l01606"></a><span class="lineno"> 1606</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l01607"></a><span class="lineno"> 1607</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l01608"></a><span class="lineno"> 1608</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l01609"></a><span class="lineno"> 1609</span>&#160;</div><div class="line"><a name="l01610"></a><span class="lineno"> 1610</span>&#160;</div><div class="line"><a name="l01611"></a><span class="lineno"> 1611</span>&#160;<span class="comment">! Scale entrainment coefficients with cloud base mass flux</span></div><div class="line"><a name="l01612"></a><span class="lineno"> 1612</span>&#160;<span class="comment">! and convective velocity scale</span></div><div class="line"><a name="l01613"></a><span class="lineno"> 1613</span>&#160;</div><div class="line"><a name="l01614"></a><span class="lineno"> 1614</span>&#160;  <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l01615"></a><span class="lineno"> 1615</span>&#160;</div><div class="line"><a name="l01616"></a><span class="lineno"> 1616</span>&#160;    <span class="keywordflow">IF</span> (k  &gt;=  ntml(i)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01617"></a><span class="lineno"> 1617</span>&#160;      <span class="comment">! If original entrainment coefficient then scale as before else leave</span></div><div class="line"><a name="l01618"></a><span class="lineno"> 1618</span>&#160;      <span class="comment">! as calculated by layer_cn.</span></div><div class="line"><a name="l01619"></a><span class="lineno"> 1619</span>&#160;      <span class="keywordflow">IF</span> (entrain_coef(i) &lt; 0.0 ) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01620"></a><span class="lineno"> 1620</span>&#160;        ekp14(i)  = ekp14(i) * wsc_o_mb(i)</div><div class="line"><a name="l01621"></a><span class="lineno"> 1621</span>&#160;        ekp34(i)  = ekp34(i) * wsc_o_mb(i)</div><div class="line"><a name="l01622"></a><span class="lineno"> 1622</span>&#160;        amdetk(i) = amdetk(i) * wsc_o_mb(i)</div><div class="line"><a name="l01623"></a><span class="lineno"> 1623</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l01624"></a><span class="lineno"> 1624</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l01625"></a><span class="lineno"> 1625</span>&#160;</div><div class="line"><a name="l01626"></a><span class="lineno"> 1626</span>&#160;    <span class="comment">! Carry out initial test to see if convection is possible from layer</span></div><div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;    <span class="comment">! k to k+1. Set bcposs = .T. if</span></div><div class="line"><a name="l01628"></a><span class="lineno"> 1628</span>&#160;    <span class="comment">! 1. the point was convecting (bconv = .T.) and did not terminate</span></div><div class="line"><a name="l01629"></a><span class="lineno"> 1629</span>&#160;    <span class="comment">! in the previous layer  OR</span></div><div class="line"><a name="l01630"></a><span class="lineno"> 1630</span>&#160;    <span class="comment">! 2. k = ntml</span></div><div class="line"><a name="l01631"></a><span class="lineno"> 1631</span>&#160;</div><div class="line"><a name="l01632"></a><span class="lineno"> 1632</span>&#160;    bcposs(i) = bconv(i) .OR. k  ==  ntml(i)</div><div class="line"><a name="l01633"></a><span class="lineno"> 1633</span>&#160;</div><div class="line"><a name="l01634"></a><span class="lineno"> 1634</span>&#160;<span class="keywordflow">  END DO</span>  <span class="comment">! n_sh</span></div><div class="line"><a name="l01635"></a><span class="lineno"> 1635</span>&#160;</div><div class="line"><a name="l01636"></a><span class="lineno"> 1636</span>&#160;<span class="comment">! Calculate number of points which may convect (ncposs) and</span></div><div class="line"><a name="l01637"></a><span class="lineno"> 1637</span>&#160;<span class="comment">! set compression indices (index1)</span></div><div class="line"><a name="l01638"></a><span class="lineno"> 1638</span>&#160;</div><div class="line"><a name="l01639"></a><span class="lineno"> 1639</span>&#160;  ncposs = 0</div><div class="line"><a name="l01640"></a><span class="lineno"> 1640</span>&#160;  <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l01641"></a><span class="lineno"> 1641</span>&#160;    <span class="keywordflow">IF</span> (bcposs(i)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01642"></a><span class="lineno"> 1642</span>&#160;      ncposs = ncposs + 1</div><div class="line"><a name="l01643"></a><span class="lineno"> 1643</span>&#160;      index1(ncposs) = i</div><div class="line"><a name="l01644"></a><span class="lineno"> 1644</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l01645"></a><span class="lineno"> 1645</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l01646"></a><span class="lineno"> 1646</span>&#160;</div><div class="line"><a name="l01647"></a><span class="lineno"> 1647</span>&#160;<span class="comment">! Compress points where convection may occur</span></div><div class="line"><a name="l01648"></a><span class="lineno"> 1648</span>&#160;</div><div class="line"><a name="l01649"></a><span class="lineno"> 1649</span>&#160;  <span class="keywordflow">IF</span> (ncposs  &gt;   0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01650"></a><span class="lineno"> 1650</span>&#160;    <span class="keywordflow">DO</span> i = 1,ncposs</div><div class="line"><a name="l01651"></a><span class="lineno"> 1651</span>&#160;      thek_c(i)   = th(index1(i),k)</div><div class="line"><a name="l01652"></a><span class="lineno"> 1652</span>&#160;      thekp1_c(i) = th(index1(i),k+1)</div><div class="line"><a name="l01653"></a><span class="lineno"> 1653</span>&#160;      qek_c(i)    = q(index1(i),k)</div><div class="line"><a name="l01654"></a><span class="lineno"> 1654</span>&#160;      qekp1_c(i)  = q(index1(i),k+1)</div><div class="line"><a name="l01655"></a><span class="lineno"> 1655</span>&#160;      qsekp1_c(i) = qse(index1(i),k+1)</div><div class="line"><a name="l01656"></a><span class="lineno"> 1656</span>&#160;      thpk_c(i)   = thp(index1(i),k)</div><div class="line"><a name="l01657"></a><span class="lineno"> 1657</span>&#160;      qpk_c(i)    = qp(index1(i),k)</div><div class="line"><a name="l01658"></a><span class="lineno"> 1658</span>&#160;      xpk_c(i)    = xpk(index1(i),k)</div><div class="line"><a name="l01659"></a><span class="lineno"> 1659</span>&#160;      bwk_c(i)    = bwater(index1(i),k)</div><div class="line"><a name="l01660"></a><span class="lineno"> 1660</span>&#160;      bwkp1_c(i)  = bwater(index1(i),k+1)</div><div class="line"><a name="l01661"></a><span class="lineno"> 1661</span>&#160;      pk_c(i)     = pk(index1(i))</div><div class="line"><a name="l01662"></a><span class="lineno"> 1662</span>&#160;      pkp1_c(i)   = pkp1(index1(i))</div><div class="line"><a name="l01663"></a><span class="lineno"> 1663</span>&#160;      ekp14_c(i)  = ekp14(index1(i))</div><div class="line"><a name="l01664"></a><span class="lineno"> 1664</span>&#160;      ekp34_c(i)  = ekp34(index1(i))</div><div class="line"><a name="l01665"></a><span class="lineno"> 1665</span>&#160;      exkp1_c(i)  = exkp1(index1(i))</div><div class="line"><a name="l01666"></a><span class="lineno"> 1666</span>&#160;      bgmkp1_c(i) = bgmk(index1(i)) <span class="comment">! bgmk into lift_par,</span></div><div class="line"><a name="l01667"></a><span class="lineno"> 1667</span>&#160;      cumulus_c(i) = .true.         <span class="comment">! bgmkp1_c out</span></div><div class="line"><a name="l01668"></a><span class="lineno"> 1668</span>&#160;      uek_c(i)    = u(index1(i),k)</div><div class="line"><a name="l01669"></a><span class="lineno"> 1669</span>&#160;      uekp1_c(i)  = u(index1(i),k+1)</div><div class="line"><a name="l01670"></a><span class="lineno"> 1670</span>&#160;      vek_c(i)    = v(index1(i),k)</div><div class="line"><a name="l01671"></a><span class="lineno"> 1671</span>&#160;      vekp1_c(i)  = v(index1(i),k+1)</div><div class="line"><a name="l01672"></a><span class="lineno"> 1672</span>&#160;      upk_c(i)    = up(index1(i),k)</div><div class="line"><a name="l01673"></a><span class="lineno"> 1673</span>&#160;      vpk_c(i)    = vp(index1(i),k)</div><div class="line"><a name="l01674"></a><span class="lineno"> 1674</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l01675"></a><span class="lineno"> 1675</span>&#160;    <span class="keywordflow">IF</span> (l_q_interact .OR. <a class="code" href="namespacecv__run__mod.xhtml#adb523e824ee63bf708b36e5ef08eb898">cnv_wat_load_opt</a> == 1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01676"></a><span class="lineno"> 1676</span>&#160;      <span class="keywordflow">DO</span> i = 1,ncposs</div><div class="line"><a name="l01677"></a><span class="lineno"> 1677</span>&#160;<span class="comment">!           PC2 variables or needed for water loading</span></div><div class="line"><a name="l01678"></a><span class="lineno"> 1678</span>&#160;        qclekp1_c(i)  = qcl(index1(i),k+1)</div><div class="line"><a name="l01679"></a><span class="lineno"> 1679</span>&#160;        qcfekp1_c(i)  = qcf(index1(i),k+1)</div><div class="line"><a name="l01680"></a><span class="lineno"> 1680</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l01681"></a><span class="lineno"> 1681</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l01682"></a><span class="lineno"> 1682</span>&#160;    <span class="keywordflow">IF</span> (l_q_interact) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01683"></a><span class="lineno"> 1683</span>&#160;      <span class="keywordflow">DO</span> i = 1,ncposs</div><div class="line"><a name="l01684"></a><span class="lineno"> 1684</span>&#160;<span class="comment">!           PC2 variables</span></div><div class="line"><a name="l01685"></a><span class="lineno"> 1685</span>&#160;        qclek_c(i)    = qcl(index1(i),k)</div><div class="line"><a name="l01686"></a><span class="lineno"> 1686</span>&#160;        qcfek_c(i)    = qcf(index1(i),k)</div><div class="line"><a name="l01687"></a><span class="lineno"> 1687</span>&#160;        qclpk_c(i)    = qclp(index1(i),k)</div><div class="line"><a name="l01688"></a><span class="lineno"> 1688</span>&#160;        qcfpk_c(i)    = qcfp(index1(i),k)</div><div class="line"><a name="l01689"></a><span class="lineno"> 1689</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l01690"></a><span class="lineno"> 1690</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l01691"></a><span class="lineno"> 1691</span>&#160;    <span class="keywordflow">IF</span> (l_tracer) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01692"></a><span class="lineno"> 1692</span>&#160;      <span class="keywordflow">DO</span> ktra = 1,ntra</div><div class="line"><a name="l01693"></a><span class="lineno"> 1693</span>&#160;        <span class="keywordflow">DO</span> i = 1,ncposs</div><div class="line"><a name="l01694"></a><span class="lineno"> 1694</span>&#160;          traek_c(i,ktra) = tracer(index1(i),k,ktra)</div><div class="line"><a name="l01695"></a><span class="lineno"> 1695</span>&#160;          traekp1_c(i,ktra) = tracer(index1(i),k+1,ktra)</div><div class="line"><a name="l01696"></a><span class="lineno"> 1696</span>&#160;          trapk_c(i,ktra) = trap(index1(i),k,ktra)</div><div class="line"><a name="l01697"></a><span class="lineno"> 1697</span>&#160;<span class="keywordflow">        END DO</span></div><div class="line"><a name="l01698"></a><span class="lineno"> 1698</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l01699"></a><span class="lineno"> 1699</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l01700"></a><span class="lineno"> 1700</span>&#160;<span class="keywordflow">  END IF</span>  <span class="comment">! ncposs&gt;0</span></div><div class="line"><a name="l01701"></a><span class="lineno"> 1701</span>&#160;</div><div class="line"><a name="l01702"></a><span class="lineno"> 1702</span>&#160;</div><div class="line"><a name="l01703"></a><span class="lineno"> 1703</span>&#160;<span class="comment">! 3.2  Lift parcel from layer k to layer k+1</span></div><div class="line"><a name="l01704"></a><span class="lineno"> 1704</span>&#160;</div><div class="line"><a name="l01705"></a><span class="lineno"> 1705</span>&#160;</div><div class="line"><a name="l01706"></a><span class="lineno"> 1706</span>&#160;<span class="comment">! DEPENDS ON: lift_par_5a</span></div><div class="line"><a name="l01707"></a><span class="lineno"> 1707</span>&#160;  <span class="keyword">CALL </span><a class="code" href="lift__par-5a_8f90.xhtml#a49f13ff1e05951a73240dc2dda0ec840" title="(C) Crown copyright Met office. All rights reserved. (C) Crown copyright Met office. All rights reserved. ">lift_par_5a</a>(ncposs,n_sh,thpkp1_c,qpkp1_c,xsqkp1_c,         &amp;</div><div class="line"><a name="l01708"></a><span class="lineno"> 1708</span>&#160;           bgmkp1_c,bwkp1_c,bwk_c,thpk_c,qpk_c,xpk_c,thekp1_c,    &amp;</div><div class="line"><a name="l01709"></a><span class="lineno"> 1709</span>&#160;           qekp1_c,thek_c,qek_c,qsekp1_c,                         &amp;</div><div class="line"><a name="l01710"></a><span class="lineno"> 1710</span>&#160;           qclpkp1_c,qclpk_c,qclekp1_c,qclek_c,l_q_interact,      &amp;</div><div class="line"><a name="l01711"></a><span class="lineno"> 1711</span>&#160;           qcfpkp1_c,qcfpk_c,qcfekp1_c,qcfek_c,                   &amp;</div><div class="line"><a name="l01712"></a><span class="lineno"> 1712</span>&#160;           pk_c,pkp1_c,exkp1_c,ekp14_c,ekp34_c,l_mom_gk,upkp1_c,  &amp;</div><div class="line"><a name="l01713"></a><span class="lineno"> 1713</span>&#160;           vpkp1_c,upk_c,vpk_c,uek_c,uekp1_c,vek_c,vekp1_c,       &amp;</div><div class="line"><a name="l01714"></a><span class="lineno"> 1714</span>&#160;           l_tracer,ntra,trapkp1_c,trapk_c,traekp1_c,             &amp;</div><div class="line"><a name="l01715"></a><span class="lineno"> 1715</span>&#160;           traek_c)</div><div class="line"><a name="l01716"></a><span class="lineno"> 1716</span>&#160;</div><div class="line"><a name="l01717"></a><span class="lineno"> 1717</span>&#160;<span class="comment">! Loop over points which may convect (ncposs)</span></div><div class="line"><a name="l01718"></a><span class="lineno"> 1718</span>&#160;</div><div class="line"><a name="l01719"></a><span class="lineno"> 1719</span>&#160;<span class="comment">! NEC compiler directive</span></div><div class="line"><a name="l01720"></a><span class="lineno"> 1720</span>&#160;<span class="comment">!CDIR NODEP</span></div><div class="line"><a name="l01721"></a><span class="lineno"> 1721</span>&#160;</div><div class="line"><a name="l01722"></a><span class="lineno"> 1722</span>&#160;  <span class="keywordflow">DO</span> i = 1,ncposs</div><div class="line"><a name="l01723"></a><span class="lineno"> 1723</span>&#160;</div><div class="line"><a name="l01724"></a><span class="lineno"> 1724</span>&#160;    <span class="comment">! Calculate buoyancy (virt. potential temp.) of parcel in layer k+1</span></div><div class="line"><a name="l01725"></a><span class="lineno"> 1725</span>&#160;</div><div class="line"><a name="l01726"></a><span class="lineno"> 1726</span>&#160;    <span class="keywordflow">IF</span> (<a class="code" href="namespacecv__run__mod.xhtml#adb523e824ee63bf708b36e5ef08eb898">cnv_wat_load_opt</a> == 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01727"></a><span class="lineno"> 1727</span>&#160;      rbuoy_c(i) = thpkp1_c(i) * (1.0 + c_virtual *qpkp1_c(i))      &amp;</div><div class="line"><a name="l01728"></a><span class="lineno"> 1728</span>&#160;                 - thekp1_c(i) * (1.0 + c_virtual *qekp1_c(i))</div><div class="line"><a name="l01729"></a><span class="lineno"> 1729</span>&#160;    <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (<a class="code" href="namespacecv__run__mod.xhtml#adb523e824ee63bf708b36e5ef08eb898">cnv_wat_load_opt</a> == 1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01730"></a><span class="lineno"> 1730</span>&#160;      <span class="comment">! Include water loading using. The best guess for the parcel&#39;s qcl+qcf</span></div><div class="line"><a name="l01731"></a><span class="lineno"> 1731</span>&#160;      <span class="comment">! level k+1 is the total parcel condensate at level k.</span></div><div class="line"><a name="l01732"></a><span class="lineno"> 1732</span>&#160;      rbuoy_c(i) = thpkp1_c(i) * (1.0 + c_virtual *qpkp1_c(i)       &amp;</div><div class="line"><a name="l01733"></a><span class="lineno"> 1733</span>&#160;                 - xpk_c(i))                                        &amp;</div><div class="line"><a name="l01734"></a><span class="lineno"> 1734</span>&#160;                 - thekp1_c(i) * (1.0 + c_virtual *qekp1_c(i)       &amp;</div><div class="line"><a name="l01735"></a><span class="lineno"> 1735</span>&#160;                 - qclekp1_c(i) - qcfekp1_c(i))</div><div class="line"><a name="l01736"></a><span class="lineno"> 1736</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l01737"></a><span class="lineno"> 1737</span>&#160;</div><div class="line"><a name="l01738"></a><span class="lineno"> 1738</span>&#160;<span class="comment">! Allow parcel to convect from ntml.</span></div><div class="line"><a name="l01739"></a><span class="lineno"> 1739</span>&#160;<span class="comment">! Flag convecting points with logical array bconv</span></div><div class="line"><a name="l01740"></a><span class="lineno"> 1740</span>&#160;</div><div class="line"><a name="l01741"></a><span class="lineno"> 1741</span>&#160;    <span class="keywordflow">IF</span> (k  ==  ntml(index1(i))) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01742"></a><span class="lineno"> 1742</span>&#160;      bconv(index1(i)) = .true.</div><div class="line"><a name="l01743"></a><span class="lineno"> 1743</span>&#160;</div><div class="line"><a name="l01744"></a><span class="lineno"> 1744</span>&#160;<span class="comment">! Set parcel mass flux</span></div><div class="line"><a name="l01745"></a><span class="lineno"> 1745</span>&#160;<span class="comment">! UM Documentation paper 27, section 1.5</span></div><div class="line"><a name="l01746"></a><span class="lineno"> 1746</span>&#160;</div><div class="line"><a name="l01747"></a><span class="lineno"> 1747</span>&#160;      flxk_c(i) = mb(index1(i)) * g *                             &amp;</div><div class="line"><a name="l01748"></a><span class="lineno"> 1748</span>&#160;                      p_layer_centres(index1(i),k) / (r *         &amp;</div><div class="line"><a name="l01749"></a><span class="lineno"> 1749</span>&#160;                        thpk_c(i) * (p_layer_centres(index1(i),k) &amp;</div><div class="line"><a name="l01750"></a><span class="lineno"> 1750</span>&#160;                          / pref)**kappa)</div><div class="line"><a name="l01751"></a><span class="lineno"> 1751</span>&#160;</div><div class="line"><a name="l01752"></a><span class="lineno"> 1752</span>&#160;<span class="comment">! Write compressed mass flux back to full array</span></div><div class="line"><a name="l01753"></a><span class="lineno"> 1753</span>&#160;</div><div class="line"><a name="l01754"></a><span class="lineno"> 1754</span>&#160;      flx(index1(i),k) = flxk_c(i)</div><div class="line"><a name="l01755"></a><span class="lineno"> 1755</span>&#160;</div><div class="line"><a name="l01756"></a><span class="lineno"> 1756</span>&#160;<span class="comment">! At ntml set mixing detrainment rate equal to zero</span></div><div class="line"><a name="l01757"></a><span class="lineno"> 1757</span>&#160;<span class="comment">! Store diagnostics linked to initial convective mass flux for</span></div><div class="line"><a name="l01758"></a><span class="lineno"> 1758</span>&#160;<span class="comment">! calculation of final closure.</span></div><div class="line"><a name="l01759"></a><span class="lineno"> 1759</span>&#160;</div><div class="line"><a name="l01760"></a><span class="lineno"> 1760</span>&#160;      amdetk(index1(i))      = 0.0</div><div class="line"><a name="l01761"></a><span class="lineno"> 1761</span>&#160;      flx_init(index1(i))    = flxk_c(i)</div><div class="line"><a name="l01762"></a><span class="lineno"> 1762</span>&#160;      flxmax_init(index1(i)) = flxmax(index1(i))</div><div class="line"><a name="l01763"></a><span class="lineno"> 1763</span>&#160;</div><div class="line"><a name="l01764"></a><span class="lineno"> 1764</span>&#160;      blowst(index1(i)) = .true.</div><div class="line"><a name="l01765"></a><span class="lineno"> 1765</span>&#160;</div><div class="line"><a name="l01766"></a><span class="lineno"> 1766</span>&#160;      <span class="keywordflow">IF</span> (l_q_interact) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01767"></a><span class="lineno"> 1767</span>&#160;</div><div class="line"><a name="l01768"></a><span class="lineno"> 1768</span>&#160;<span class="comment">!           Initialize QCLP(*,K) and QCFP(*,K) at start level and</span></div><div class="line"><a name="l01769"></a><span class="lineno"> 1769</span>&#160;<span class="comment">!           perform the Parcel Lift again for such points: needed</span></div><div class="line"><a name="l01770"></a><span class="lineno"> 1770</span>&#160;<span class="comment">!           for PC2.   Duplicates code from</span></div><div class="line"><a name="l01771"></a><span class="lineno"> 1771</span>&#160;<span class="comment">!           Convection Parcel Lifting Scheme, LIFPAR.</span></div><div class="line"><a name="l01772"></a><span class="lineno"> 1772</span>&#160;<span class="comment">!           Assume &quot;if k eq ntml&quot; equiv &quot;if bwork(i,3) in convec4a</span></div><div class="line"><a name="l01773"></a><span class="lineno"> 1773</span>&#160;<span class="comment">!           Use non-compressed arrays for variables not updated</span></div><div class="line"><a name="l01774"></a><span class="lineno"> 1774</span>&#160;<span class="comment">!           in or since LIFT_PAR</span></div><div class="line"><a name="l01775"></a><span class="lineno"> 1775</span>&#160;</div><div class="line"><a name="l01776"></a><span class="lineno"> 1776</span>&#160;        qclpk_c(i)  = qcl(index1(i),k) +                          &amp;</div><div class="line"><a name="l01777"></a><span class="lineno"> 1777</span>&#160;                     (1.0 + ekp14(index1(i))) *                   &amp;</div><div class="line"><a name="l01778"></a><span class="lineno"> 1778</span>&#160;                     (qcl(index1(i),k+1) - qcl(index1(i),k))</div><div class="line"><a name="l01779"></a><span class="lineno"> 1779</span>&#160;        qclpkp1_c(i) = ( qclpk_c(i) +                             &amp;</div><div class="line"><a name="l01780"></a><span class="lineno"> 1780</span>&#160;               (ekp14(index1(i)) * qcl(index1(i),k)) +            &amp;</div><div class="line"><a name="l01781"></a><span class="lineno"> 1781</span>&#160;               (ekp34(index1(i)) *  (1.0 + ekp14(index1(i)))      &amp;</div><div class="line"><a name="l01782"></a><span class="lineno"> 1782</span>&#160;                 * qcl(index1(i),k+1)) )/                         &amp;</div><div class="line"><a name="l01783"></a><span class="lineno"> 1783</span>&#160;          ( (1.0 + ekp14(index1(i))) * (1.0 + ekp34(index1(i))) )</div><div class="line"><a name="l01784"></a><span class="lineno"> 1784</span>&#160;</div><div class="line"><a name="l01785"></a><span class="lineno"> 1785</span>&#160;        qcfpk_c(i) = qcf(index1(i),k) +                           &amp;</div><div class="line"><a name="l01786"></a><span class="lineno"> 1786</span>&#160;                    (1.0 + ekp14(index1(i))) *                    &amp;</div><div class="line"><a name="l01787"></a><span class="lineno"> 1787</span>&#160;                    (qcf(index1(i),k+1) - qcf(index1(i),k))</div><div class="line"><a name="l01788"></a><span class="lineno"> 1788</span>&#160;        qcfpkp1_c(i) = ( qcfpk_c(i) +                             &amp;</div><div class="line"><a name="l01789"></a><span class="lineno"> 1789</span>&#160;               (ekp14(index1(i)) * qcf(index1(i),k)) +            &amp;</div><div class="line"><a name="l01790"></a><span class="lineno"> 1790</span>&#160;               (ekp34(index1(i)) * (1.0 + ekp14(index1(i)))       &amp;</div><div class="line"><a name="l01791"></a><span class="lineno"> 1791</span>&#160;                 * qcf(index1(i),k+1)) )/                         &amp;</div><div class="line"><a name="l01792"></a><span class="lineno"> 1792</span>&#160;          ( (1.0 + ekp14(index1(i))) * (1.0 + ekp34(index1(i))) )</div><div class="line"><a name="l01793"></a><span class="lineno"> 1793</span>&#160;</div><div class="line"><a name="l01794"></a><span class="lineno"> 1794</span>&#160;<span class="comment">! Working through the algebra of the above equations, we see that</span></div><div class="line"><a name="l01795"></a><span class="lineno"> 1795</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l01796"></a><span class="lineno"> 1796</span>&#160;<span class="comment">!   ekp14(index1(i))     = 0 =&gt; qclpkp1_c(i) = qcl(index1(i),k+1)</span></div><div class="line"><a name="l01797"></a><span class="lineno"> 1797</span>&#160;<span class="comment">!   ekp34(index1(i))     = 0 =&gt; qclpkp1_c(i) = qcl(index1(i),k+1)</span></div><div class="line"><a name="l01798"></a><span class="lineno"> 1798</span>&#160;<span class="comment">!   qcl  (index1(i),k)   = 0 =&gt; qclpkp1_c(i) = qcl(index1(i),k+1)</span></div><div class="line"><a name="l01799"></a><span class="lineno"> 1799</span>&#160;<span class="comment">!   qcl  (index1(i),k+1) = 0 =&gt; qclpkp1_c(i) = 0</span></div><div class="line"><a name="l01800"></a><span class="lineno"> 1800</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l01801"></a><span class="lineno"> 1801</span>&#160;<span class="comment">! and similarly for the qcf variables. In finite arithmetic, however, these</span></div><div class="line"><a name="l01802"></a><span class="lineno"> 1802</span>&#160;<span class="comment">! relationships break down. To avoid problems later on, we enforce them</span></div><div class="line"><a name="l01803"></a><span class="lineno"> 1803</span>&#160;<span class="comment">! directly.</span></div><div class="line"><a name="l01804"></a><span class="lineno"> 1804</span>&#160;</div><div class="line"><a name="l01805"></a><span class="lineno"> 1805</span>&#160;        <span class="keywordflow">IF</span> (ekp14(index1(i))   == 0.0 .OR. &amp;</div><div class="line"><a name="l01806"></a><span class="lineno"> 1806</span>&#160;            ekp34(index1(i))   == 0.0 .OR. &amp;</div><div class="line"><a name="l01807"></a><span class="lineno"> 1807</span>&#160;            qcl(index1(i),k) == 0.0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01808"></a><span class="lineno"> 1808</span>&#160;          qclpkp1_c(i) = qcl(index1(i),k+1)</div><div class="line"><a name="l01809"></a><span class="lineno"> 1809</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l01810"></a><span class="lineno"> 1810</span>&#160;        <span class="keywordflow">IF</span> (qcl(index1(i),k+1) == 0.0) qclpkp1_c(i) = 0.0</div><div class="line"><a name="l01811"></a><span class="lineno"> 1811</span>&#160;</div><div class="line"><a name="l01812"></a><span class="lineno"> 1812</span>&#160;        <span class="keywordflow">IF</span> (ekp14(index1(i))   == 0.0 .OR. &amp;</div><div class="line"><a name="l01813"></a><span class="lineno"> 1813</span>&#160;            ekp34(index1(i))   == 0.0 .OR. &amp;</div><div class="line"><a name="l01814"></a><span class="lineno"> 1814</span>&#160;            qcf(index1(i),k) == 0.0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01815"></a><span class="lineno"> 1815</span>&#160;          qcfpkp1_c(i) = qcf(index1(i),k+1)</div><div class="line"><a name="l01816"></a><span class="lineno"> 1816</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l01817"></a><span class="lineno"> 1817</span>&#160;        <span class="keywordflow">IF</span> (qcf(index1(i),k+1) == 0.0) qcfpkp1_c(i) = 0.0</div><div class="line"><a name="l01818"></a><span class="lineno"> 1818</span>&#160;</div><div class="line"><a name="l01819"></a><span class="lineno"> 1819</span>&#160;<span class="keywordflow">      END IF</span> <span class="comment">! l_q_interact</span></div><div class="line"><a name="l01820"></a><span class="lineno"> 1820</span>&#160;</div><div class="line"><a name="l01821"></a><span class="lineno"> 1821</span>&#160;    <span class="keywordflow">ELSE</span></div><div class="line"><a name="l01822"></a><span class="lineno"> 1822</span>&#160;      blowst(index1(i)) = .false.   <span class="comment">! not initial layer</span></div><div class="line"><a name="l01823"></a><span class="lineno"> 1823</span>&#160;</div><div class="line"><a name="l01824"></a><span class="lineno"> 1824</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l01825"></a><span class="lineno"> 1825</span>&#160;</div><div class="line"><a name="l01826"></a><span class="lineno"> 1826</span>&#160;<span class="comment">! Reset threashold for forced detrainment to the initial</span></div><div class="line"><a name="l01827"></a><span class="lineno"> 1827</span>&#160;<span class="comment">! (potentially negative) buoyancy</span></div><div class="line"><a name="l01828"></a><span class="lineno"> 1828</span>&#160;</div><div class="line"><a name="l01829"></a><span class="lineno"> 1829</span>&#160;    xsbmin_v(index1(i),k) = thv_pert(index1(i))</div><div class="line"><a name="l01830"></a><span class="lineno"> 1830</span>&#160;</div><div class="line"><a name="l01831"></a><span class="lineno"> 1831</span>&#160;<span class="keywordflow">  END DO</span>  <span class="comment">!ncposs</span></div><div class="line"><a name="l01832"></a><span class="lineno"> 1832</span>&#160;</div><div class="line"><a name="l01833"></a><span class="lineno"> 1833</span>&#160;<span class="comment">! L_q_interact_if0:</span></div><div class="line"><a name="l01834"></a><span class="lineno"> 1834</span>&#160;  <span class="keywordflow">IF</span> (l_q_interact) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01835"></a><span class="lineno"> 1835</span>&#160;<span class="comment">! !     Follow-on calculation from QCLP(*,K) and QCFP(*,K) initialization.</span></div><div class="line"><a name="l01836"></a><span class="lineno"> 1836</span>&#160;<span class="comment">!       Duplicates code from Convection Parcel Lifting Scheme, LIFPAR.</span></div><div class="line"><a name="l01837"></a><span class="lineno"> 1837</span>&#160;<span class="comment">! ! ntml is level from which convection starts [dp/sh conv only]</span></div><div class="line"><a name="l01838"></a><span class="lineno"> 1838</span>&#160;</div><div class="line"><a name="l01839"></a><span class="lineno"> 1839</span>&#160;    <span class="keywordflow">DO</span> i=1, ncposs</div><div class="line"><a name="l01840"></a><span class="lineno"> 1840</span>&#160;      <span class="keywordflow">IF</span> (k  ==  ntml(index1(i))) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01841"></a><span class="lineno"> 1841</span>&#160;      <span class="comment">!       !       CURRENTLY MIXED PHASE PARCEL IS FORBIDDEN. MELT OR FREEZE THE</span></div><div class="line"><a name="l01842"></a><span class="lineno"> 1842</span>&#160;      <span class="comment">!       ENTRAINED LAYER CLOUD AND ADJUST PARCEL TEMPERATURE ACCORDINGLY.</span></div><div class="line"><a name="l01843"></a><span class="lineno"> 1843</span>&#160;      <span class="comment">!        IF (bwater(index1(i),k+1) .AND. qcfpkp1_c(i)  &gt;   0.0) THEN</span></div><div class="line"><a name="l01844"></a><span class="lineno"> 1844</span>&#160;          qclpkp1_c(i) = qclpkp1_c(i) + qcfpkp1_c(i)</div><div class="line"><a name="l01845"></a><span class="lineno"> 1845</span>&#160;          thpkp1_c(i)  = ( thpkp1_c(i) - ( qcfpkp1_c(i) * lf /      &amp;</div><div class="line"><a name="l01846"></a><span class="lineno"> 1846</span>&#160;                                   (cp * exkp1(index1(i))) ) )</div><div class="line"><a name="l01847"></a><span class="lineno"> 1847</span>&#160;          qcfpkp1_c(i) = 0.0</div><div class="line"><a name="l01848"></a><span class="lineno"> 1848</span>&#160;        <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (.NOT. bwater(index1(i),k+1) .AND.                  &amp;</div><div class="line"><a name="l01849"></a><span class="lineno"> 1849</span>&#160;               qclpkp1_c(i)  &gt;   0.0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01850"></a><span class="lineno"> 1850</span>&#160;          qcfpkp1_c(i) = qclpkp1_c(i) + qcfpkp1_c(i)</div><div class="line"><a name="l01851"></a><span class="lineno"> 1851</span>&#160;          thpkp1_c(i)  = ( thpkp1_c(i) + ( qclpkp1_c(i) * lf /      &amp;</div><div class="line"><a name="l01852"></a><span class="lineno"> 1852</span>&#160;                                   (cp * exkp1(index1(i))) ) )</div><div class="line"><a name="l01853"></a><span class="lineno"> 1853</span>&#160;          qclpkp1_c(i) = 0.0</div><div class="line"><a name="l01854"></a><span class="lineno"> 1854</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l01855"></a><span class="lineno"> 1855</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l01856"></a><span class="lineno"> 1856</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l01857"></a><span class="lineno"> 1857</span>&#160;<span class="keywordflow">  END IF</span>  <span class="comment">! L_q_interact_if0</span></div><div class="line"><a name="l01858"></a><span class="lineno"> 1858</span>&#160;</div><div class="line"><a name="l01859"></a><span class="lineno"> 1859</span>&#160;<span class="comment">! Calculate number of points which are convecting  (nconv)</span></div><div class="line"><a name="l01860"></a><span class="lineno"> 1860</span>&#160;<span class="comment">! set compression indices (index2).</span></div><div class="line"><a name="l01861"></a><span class="lineno"> 1861</span>&#160;</div><div class="line"><a name="l01862"></a><span class="lineno"> 1862</span>&#160;  nconv = 0</div><div class="line"><a name="l01863"></a><span class="lineno"> 1863</span>&#160;  <span class="keywordflow">DO</span> i = 1,ncposs</div><div class="line"><a name="l01864"></a><span class="lineno"> 1864</span>&#160;    <span class="keywordflow">IF</span> (bconv(index1(i))) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01865"></a><span class="lineno"> 1865</span>&#160;      nconv = nconv + 1</div><div class="line"><a name="l01866"></a><span class="lineno"> 1866</span>&#160;      index2(nconv) = i</div><div class="line"><a name="l01867"></a><span class="lineno"> 1867</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l01868"></a><span class="lineno"> 1868</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l01869"></a><span class="lineno"> 1869</span>&#160;</div><div class="line"><a name="l01870"></a><span class="lineno"> 1870</span>&#160;<span class="comment">! Second compression to form arrays of length nconv to be passed</span></div><div class="line"><a name="l01871"></a><span class="lineno"> 1871</span>&#160;<span class="comment">! into CONVEC2</span></div><div class="line"><a name="l01872"></a><span class="lineno"> 1872</span>&#160;<span class="comment">! Input variables to CONVEC2</span></div><div class="line"><a name="l01873"></a><span class="lineno"> 1873</span>&#160;</div><div class="line"><a name="l01874"></a><span class="lineno"> 1874</span>&#160;  <span class="keywordflow">IF</span> (nconv  &gt;   0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01875"></a><span class="lineno"> 1875</span>&#160;    <span class="keywordflow">DO</span> i = 1,nconv</div><div class="line"><a name="l01876"></a><span class="lineno"> 1876</span>&#160;      thek_c2(i)   = thek_c(index2(i))</div><div class="line"><a name="l01877"></a><span class="lineno"> 1877</span>&#160;      thekp1_c2(i) = thekp1_c(index2(i))</div><div class="line"><a name="l01878"></a><span class="lineno"> 1878</span>&#160;      qek_c2(i)    = qek_c(index2(i))</div><div class="line"><a name="l01879"></a><span class="lineno"> 1879</span>&#160;      qekp1_c2(i)  = qekp1_c(index2(i))</div><div class="line"><a name="l01880"></a><span class="lineno"> 1880</span>&#160;      dqsthkp1_c2(i) = dqsthkp1(index1(index2(i)))</div><div class="line"><a name="l01881"></a><span class="lineno"> 1881</span>&#160;      qsekp1_c2(i)   = qsekp1_c(index2(i))</div><div class="line"><a name="l01882"></a><span class="lineno"> 1882</span>&#160;      pstar_c2(i)    = pstar(index1(index2(i)))</div><div class="line"><a name="l01883"></a><span class="lineno"> 1883</span>&#160;      thpkp1_c2(i)   = thpkp1_c(index2(i))</div><div class="line"><a name="l01884"></a><span class="lineno"> 1884</span>&#160;      qpkp1_c2(i)    = qpkp1_c(index2(i))</div><div class="line"><a name="l01885"></a><span class="lineno"> 1885</span>&#160;      xsqkp1_c2(i) = xsqkp1_c(index2(i))</div><div class="line"><a name="l01886"></a><span class="lineno"> 1886</span>&#160;      rbuoy_c2(i)  = rbuoy_c(index2(i))</div><div class="line"><a name="l01887"></a><span class="lineno"> 1887</span>&#160;      qsek_c2(i)   = qse(index1(index2(i)),k)</div><div class="line"><a name="l01888"></a><span class="lineno"> 1888</span>&#160;      dqsthk_c2(i) = dqsthk(index1(index2(i)))</div><div class="line"><a name="l01889"></a><span class="lineno"> 1889</span>&#160;      thpi_c2(i)   = thpi(index1(index2(i)))</div><div class="line"><a name="l01890"></a><span class="lineno"> 1890</span>&#160;      qpi_c2(i)    = qpi(index1(index2(i)))</div><div class="line"><a name="l01891"></a><span class="lineno"> 1891</span>&#160;      expi_c2(i)   = expi(index1(index2(i)))</div><div class="line"><a name="l01892"></a><span class="lineno"> 1892</span>&#160;      bconv_c2(i)  = bconv(index1(index2(i)))</div><div class="line"><a name="l01893"></a><span class="lineno"> 1893</span>&#160;      bwk_c2(i)    = bwk_c(index2(i))</div><div class="line"><a name="l01894"></a><span class="lineno"> 1894</span>&#160;      bwkp1_c2(i)  = bwkp1_c(index2(i))</div><div class="line"><a name="l01895"></a><span class="lineno"> 1895</span>&#160;      bgmkp1_c2(i) = bgmkp1_c(index2(i))</div><div class="line"><a name="l01896"></a><span class="lineno"> 1896</span>&#160;      bland_c2(i)  = bland(index1(index2(i)))</div><div class="line"><a name="l01897"></a><span class="lineno"> 1897</span>&#160;      blowst_c2(i) = blowst(index1(index2(i)))</div><div class="line"><a name="l01898"></a><span class="lineno"> 1898</span>&#160;      l_shallow_c2(i) = .true.</div><div class="line"><a name="l01899"></a><span class="lineno"> 1899</span>&#160;      l_mid_c2(i)     = .false.</div><div class="line"><a name="l01900"></a><span class="lineno"> 1900</span>&#160;      cumulus_c2(i)   = .true.</div><div class="line"><a name="l01901"></a><span class="lineno"> 1901</span>&#160;      ekp14_c2(i)  = ekp14_c(index2(i))</div><div class="line"><a name="l01902"></a><span class="lineno"> 1902</span>&#160;      ekp34_c2(i)  = ekp34_c(index2(i))</div><div class="line"><a name="l01903"></a><span class="lineno"> 1903</span>&#160;      amdetk_c2(i) = amdetk(index1(index2(i)))</div><div class="line"><a name="l01904"></a><span class="lineno"> 1904</span>&#160;      pk_c2(i)     = pk_c(index2(i))</div><div class="line"><a name="l01905"></a><span class="lineno"> 1905</span>&#160;      pkp1_c2(i)   = pkp1_c(index2(i))</div><div class="line"><a name="l01906"></a><span class="lineno"> 1906</span>&#160;      exk_c2(i)    = exk(index1(index2(i)))</div><div class="line"><a name="l01907"></a><span class="lineno"> 1907</span>&#160;      exkp1_c2(i)  = exkp1_c(index2(i))</div><div class="line"><a name="l01908"></a><span class="lineno"> 1908</span>&#160;      delexkp1_c2(i)    = delexkp1(index1(index2(i)))</div><div class="line"><a name="l01909"></a><span class="lineno"> 1909</span>&#160;      delpk_c2(i)       = delpk(index1(index2(i)))</div><div class="line"><a name="l01910"></a><span class="lineno"> 1910</span>&#160;      delpkp1_c2(i)     = delpkp1(index1(index2(i)))</div><div class="line"><a name="l01911"></a><span class="lineno"> 1911</span>&#160;      delp_uv_k_c2(i)   = delp_uv_k(index1(index2(i)))</div><div class="line"><a name="l01912"></a><span class="lineno"> 1912</span>&#160;      delp_uv_kp1_c2(i) = delp_uv_kp1(index1(index2(i)))</div><div class="line"><a name="l01913"></a><span class="lineno"> 1913</span>&#160;      t1_sd_c2(i)     = t1_sd(index1(index2(i)))</div><div class="line"><a name="l01914"></a><span class="lineno"> 1914</span>&#160;      q1_sd_c2(i)     = q1_sd(index1(index2(i)))</div><div class="line"><a name="l01915"></a><span class="lineno"> 1915</span>&#160;      uek_c2(i)    = uek_c(index2(i))</div><div class="line"><a name="l01916"></a><span class="lineno"> 1916</span>&#160;      uekp1_c2(i)  = uekp1_c(index2(i))</div><div class="line"><a name="l01917"></a><span class="lineno"> 1917</span>&#160;      vek_c2(i)    = vek_c(index2(i))</div><div class="line"><a name="l01918"></a><span class="lineno"> 1918</span>&#160;      vekp1_c2(i)  = vekp1_c(index2(i))</div><div class="line"><a name="l01919"></a><span class="lineno"> 1919</span>&#160;      upkp1_c2(i)    = upkp1_c(index2(i))</div><div class="line"><a name="l01920"></a><span class="lineno"> 1920</span>&#160;      vpkp1_c2(i)    = vpkp1_c(index2(i))</div><div class="line"><a name="l01921"></a><span class="lineno"> 1921</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l01922"></a><span class="lineno"> 1922</span>&#160;</div><div class="line"><a name="l01923"></a><span class="lineno"> 1923</span>&#160;    <span class="keywordflow">IF</span> (<a class="code" href="namespacecv__stash__flg__mod.xhtml#a50f06f66e4ccdedcd3c49d357976dbf7">flg_w_eqn</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01924"></a><span class="lineno"> 1924</span>&#160;      <span class="keywordflow">DO</span> i=1, nconv</div><div class="line"><a name="l01925"></a><span class="lineno"> 1925</span>&#160;        w2p_km1_c2(i) = w2p(index1(index2(i)),k-1)</div><div class="line"><a name="l01926"></a><span class="lineno"> 1926</span>&#160;        w2p_k_c2(i)   = w2p(index1(index2(i)),k)</div><div class="line"><a name="l01927"></a><span class="lineno"> 1927</span>&#160;        zkm1_c2(i)    = zkm1(index1(index2(i)))</div><div class="line"><a name="l01928"></a><span class="lineno"> 1928</span>&#160;        zk_c2(i)      = zk(index1(index2(i)))</div><div class="line"><a name="l01929"></a><span class="lineno"> 1929</span>&#160;        zkp12_c2(i)   = zkp12(index1(index2(i)))</div><div class="line"><a name="l01930"></a><span class="lineno"> 1930</span>&#160;        zkp1_c2(i)    = zkp1(index1(index2(i)))</div><div class="line"><a name="l01931"></a><span class="lineno"> 1931</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l01932"></a><span class="lineno"> 1932</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l01933"></a><span class="lineno"> 1933</span>&#160;</div><div class="line"><a name="l01934"></a><span class="lineno"> 1934</span>&#160;    <span class="keywordflow">IF</span> (l_q_interact) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01935"></a><span class="lineno"> 1935</span>&#160;      <span class="keywordflow">DO</span> i = 1,nconv</div><div class="line"><a name="l01936"></a><span class="lineno"> 1936</span>&#160;<span class="comment">!           PC2 variables</span></div><div class="line"><a name="l01937"></a><span class="lineno"> 1937</span>&#160;        qclek_c2(i)   = qclek_c(index2(i))</div><div class="line"><a name="l01938"></a><span class="lineno"> 1938</span>&#160;        qclekp1_c2(i) = qclekp1_c(index2(i))</div><div class="line"><a name="l01939"></a><span class="lineno"> 1939</span>&#160;        qcfek_c2(i)   = qcfek_c(index2(i))</div><div class="line"><a name="l01940"></a><span class="lineno"> 1940</span>&#160;        qcfekp1_c2(i) = qcfekp1_c(index2(i))</div><div class="line"><a name="l01941"></a><span class="lineno"> 1941</span>&#160;        qclpk_c2(i)   = qclpk_c(index2(i))</div><div class="line"><a name="l01942"></a><span class="lineno"> 1942</span>&#160;        qcfpk_c2(i)   = qcfpk_c(index2(i))</div><div class="line"><a name="l01943"></a><span class="lineno"> 1943</span>&#160;<span class="comment">!           (PC2) Compress input cloud fields</span></div><div class="line"><a name="l01944"></a><span class="lineno"> 1944</span>&#160;        cflek_c2(i)   = cf_liquid(index1(index2(i)),k)</div><div class="line"><a name="l01945"></a><span class="lineno"> 1945</span>&#160;        cflekp1_c2(i) = cf_liquid(index1(index2(i)),k+1)</div><div class="line"><a name="l01946"></a><span class="lineno"> 1946</span>&#160;        cffek_c2(i)   = cf_frozen(index1(index2(i)),k)</div><div class="line"><a name="l01947"></a><span class="lineno"> 1947</span>&#160;        cffekp1_c2(i) = cf_frozen(index1(index2(i)),k+1)</div><div class="line"><a name="l01948"></a><span class="lineno"> 1948</span>&#160;        bcfek_c2(i)   = bulk_cf(index1(index2(i)),k)</div><div class="line"><a name="l01949"></a><span class="lineno"> 1949</span>&#160;        bcfekp1_c2(i) = bulk_cf(index1(index2(i)),k+1)</div><div class="line"><a name="l01950"></a><span class="lineno"> 1950</span>&#160;<span class="comment">!           Compress convective base indicator</span></div><div class="line"><a name="l01951"></a><span class="lineno"> 1951</span>&#160;        start_lev3c(i) = ntml(index1(index2(i)))</div><div class="line"><a name="l01952"></a><span class="lineno"> 1952</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l01953"></a><span class="lineno"> 1953</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l01954"></a><span class="lineno"> 1954</span>&#160;    <span class="keywordflow">IF</span> (l_tracer) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01955"></a><span class="lineno"> 1955</span>&#160;      <span class="keywordflow">DO</span> ktra = 1,ntra</div><div class="line"><a name="l01956"></a><span class="lineno"> 1956</span>&#160;        <span class="keywordflow">DO</span> i = 1,nconv</div><div class="line"><a name="l01957"></a><span class="lineno"> 1957</span>&#160;          traek_c2(i,ktra)   = traek_c(index2(i),ktra)</div><div class="line"><a name="l01958"></a><span class="lineno"> 1958</span>&#160;          traekp1_c2(i,ktra) = traekp1_c(index2(i),ktra)</div><div class="line"><a name="l01959"></a><span class="lineno"> 1959</span>&#160;          trapkp1_c2(i,ktra) = trapkp1_c(index2(i),ktra)</div><div class="line"><a name="l01960"></a><span class="lineno"> 1960</span>&#160;<span class="keywordflow">        END DO</span></div><div class="line"><a name="l01961"></a><span class="lineno"> 1961</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l01962"></a><span class="lineno"> 1962</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l01963"></a><span class="lineno"> 1963</span>&#160;</div><div class="line"><a name="l01964"></a><span class="lineno"> 1964</span>&#160;<span class="comment">! Input/output variables to/from CONVEC2</span></div><div class="line"><a name="l01965"></a><span class="lineno"> 1965</span>&#160;</div><div class="line"><a name="l01966"></a><span class="lineno"> 1966</span>&#160;    <span class="keywordflow">DO</span> i = 1,nconv</div><div class="line"><a name="l01967"></a><span class="lineno"> 1967</span>&#160;      thpk_c2(i)   = thpk_c(index2(i))</div><div class="line"><a name="l01968"></a><span class="lineno"> 1968</span>&#160;      qpk_c2(i)    = qpk_c(index2(i))</div><div class="line"><a name="l01969"></a><span class="lineno"> 1969</span>&#160;      upk_c2(i)    = upk_c(index2(i))</div><div class="line"><a name="l01970"></a><span class="lineno"> 1970</span>&#160;      vpk_c2(i)    = vpk_c(index2(i))</div><div class="line"><a name="l01971"></a><span class="lineno"> 1971</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l01972"></a><span class="lineno"> 1972</span>&#160;    <span class="keywordflow">DO</span> i = 1,nconv</div><div class="line"><a name="l01973"></a><span class="lineno"> 1973</span>&#160;      xpk_c2(i)    = xpk_c(index2(i))</div><div class="line"><a name="l01974"></a><span class="lineno"> 1974</span>&#160;      flxk_c2(i)   = flx(index1(index2(i)),k)</div><div class="line"><a name="l01975"></a><span class="lineno"> 1975</span>&#160;      bgmk_c2(i)   = bgmk(index1(index2(i)))</div><div class="line"><a name="l01976"></a><span class="lineno"> 1976</span>&#160;      bterm_c2(i)  = .false.</div><div class="line"><a name="l01977"></a><span class="lineno"> 1977</span>&#160;      dthek_c2(i)  = dthbydt(index1(index2(i)),k)</div><div class="line"><a name="l01978"></a><span class="lineno"> 1978</span>&#160;      dqek_c2(i)   = dqbydt(index1(index2(i)),k)</div><div class="line"><a name="l01979"></a><span class="lineno"> 1979</span>&#160;      dthekp1_c2(i)  = dthbydt(index1(index2(i)),k+1)</div><div class="line"><a name="l01980"></a><span class="lineno"> 1980</span>&#160;      dqekp1_c2(i)   = dqbydt(index1(index2(i)),k+1)</div><div class="line"><a name="l01981"></a><span class="lineno"> 1981</span>&#160;      tcw_c2(i)    = tcw(index1(index2(i)))</div><div class="line"><a name="l01982"></a><span class="lineno"> 1982</span>&#160;      depth_c2(i)  = depth(index1(index2(i)))</div><div class="line"><a name="l01983"></a><span class="lineno"> 1983</span>&#160;      cclwp_c2(i)  = cclwp(index1(index2(i)))</div><div class="line"><a name="l01984"></a><span class="lineno"> 1984</span>&#160;      cape_c2(i)    = cape(index1(index2(i)))</div><div class="line"><a name="l01985"></a><span class="lineno"> 1985</span>&#160;      dcpbydt_c2(i) = dcpbydt(index1(index2(i)))</div><div class="line"><a name="l01986"></a><span class="lineno"> 1986</span>&#160;      relh_c2(i)    = 0.0 <span class="comment">! dummy variable</span></div><div class="line"><a name="l01987"></a><span class="lineno"> 1987</span>&#160;      rbuoy_p_here_c2(i)=rbuoy_p_here(index1(index2(i)))</div><div class="line"><a name="l01988"></a><span class="lineno"> 1988</span>&#160;      the_here_c2(i)=the_here(index1(index2(i)))</div><div class="line"><a name="l01989"></a><span class="lineno"> 1989</span>&#160;      thp_here_c2(i)=thp_here(index1(index2(i)))</div><div class="line"><a name="l01990"></a><span class="lineno"> 1990</span>&#160;      qe_here_c2(i)=qe_here(index1(index2(i)))</div><div class="line"><a name="l01991"></a><span class="lineno"> 1991</span>&#160;      qp_here_c2(i)=qp_here(index1(index2(i)))</div><div class="line"><a name="l01992"></a><span class="lineno"> 1992</span>&#160;      rbuoy_p_old_c2(i)=rbuoy_p_old(index1(index2(i)))</div><div class="line"><a name="l01993"></a><span class="lineno"> 1993</span>&#160;      dptot_c2(i)   = 0.0 <span class="comment">! dummy variable</span></div><div class="line"><a name="l01994"></a><span class="lineno"> 1994</span>&#160;      eflux_u_ud_c2(i) = eflux_u_ud(index1(index2(i)))</div><div class="line"><a name="l01995"></a><span class="lineno"> 1995</span>&#160;      eflux_v_ud_c2(i) = eflux_v_ud(index1(index2(i)))</div><div class="line"><a name="l01996"></a><span class="lineno"> 1996</span>&#160;      thpixs_v_c2(i) = thpixs_v(index1(index2(i)),k)</div><div class="line"><a name="l01997"></a><span class="lineno"> 1997</span>&#160;      qpixs_v_c2(i)  = qpixs_v(index1(index2(i)),k)</div><div class="line"><a name="l01998"></a><span class="lineno"> 1998</span>&#160;      xsbmin_v_c2(i) = xsbmin_v(index1(index2(i)),k)</div><div class="line"><a name="l01999"></a><span class="lineno"> 1999</span>&#160;      iccb_c2(i)     = iccb(index1(index2(i)))</div><div class="line"><a name="l02000"></a><span class="lineno"> 2000</span>&#160;      icct_c2(i)     = icct(index1(index2(i)))</div><div class="line"><a name="l02001"></a><span class="lineno"> 2001</span>&#160;      cca_2d_c2(i)   = cca_2d(index1(index2(i)))</div><div class="line"><a name="l02002"></a><span class="lineno"> 2002</span>&#160;      lcca_c2(i)     = lcca(index1(index2(i)))</div><div class="line"><a name="l02003"></a><span class="lineno"> 2003</span>&#160;      lcbase_c2(i)   = lcbase(index1(index2(i)))</div><div class="line"><a name="l02004"></a><span class="lineno"> 2004</span>&#160;      lctop_c2(i)    = lctop(index1(index2(i)))</div><div class="line"><a name="l02005"></a><span class="lineno"> 2005</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l02006"></a><span class="lineno"> 2006</span>&#160;    <span class="keywordflow">IF</span> (l_q_interact) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02007"></a><span class="lineno"> 2007</span>&#160;      <span class="keywordflow">DO</span> i = 1,nconv</div><div class="line"><a name="l02008"></a><span class="lineno"> 2008</span>&#160;<span class="comment">!           PC2 variables</span></div><div class="line"><a name="l02009"></a><span class="lineno"> 2009</span>&#160;        qclpkp1_c2(i) = qclpkp1_c(index2(i))</div><div class="line"><a name="l02010"></a><span class="lineno"> 2010</span>&#160;        qcfpkp1_c2(i) = qcfpkp1_c(index2(i))</div><div class="line"><a name="l02011"></a><span class="lineno"> 2011</span>&#160;<span class="comment">!           Compress increment fields</span></div><div class="line"><a name="l02012"></a><span class="lineno"> 2012</span>&#160;        dqclek_c2(i) = dqclbydt(index1(index2(i)),k)</div><div class="line"><a name="l02013"></a><span class="lineno"> 2013</span>&#160;        dqclekp1_c2(i) = dqclbydt(index1(index2(i)),k+1)</div><div class="line"><a name="l02014"></a><span class="lineno"> 2014</span>&#160;        dqcfek_c2(i) = dqcfbydt(index1(index2(i)),k)</div><div class="line"><a name="l02015"></a><span class="lineno"> 2015</span>&#160;        dqcfekp1_c2(i) = dqcfbydt(index1(index2(i)),k+1)</div><div class="line"><a name="l02016"></a><span class="lineno"> 2016</span>&#160;        dcflek_c2(i) = dcflbydt(index1(index2(i)),k)</div><div class="line"><a name="l02017"></a><span class="lineno"> 2017</span>&#160;        dcflekp1_c2(i) = dcflbydt(index1(index2(i)),k+1)</div><div class="line"><a name="l02018"></a><span class="lineno"> 2018</span>&#160;        dcffek_c2(i) = dcffbydt(index1(index2(i)),k)</div><div class="line"><a name="l02019"></a><span class="lineno"> 2019</span>&#160;        dcffekp1_c2(i) = dcffbydt(index1(index2(i)),k+1)</div><div class="line"><a name="l02020"></a><span class="lineno"> 2020</span>&#160;        dbcfek_c2(i) = dbcfbydt(index1(index2(i)),k)</div><div class="line"><a name="l02021"></a><span class="lineno"> 2021</span>&#160;        dbcfekp1_c2(i) = dbcfbydt(index1(index2(i)),k+1)</div><div class="line"><a name="l02022"></a><span class="lineno"> 2022</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l02023"></a><span class="lineno"> 2023</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l02024"></a><span class="lineno"> 2024</span>&#160;    <span class="keywordflow">IF</span> (l_mom_gk) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02025"></a><span class="lineno"> 2025</span>&#160;      <span class="keywordflow">DO</span> i = 1,nconv</div><div class="line"><a name="l02026"></a><span class="lineno"> 2026</span>&#160;        duek_c2(i)   = dubydt(index1(index2(i)),k)</div><div class="line"><a name="l02027"></a><span class="lineno"> 2027</span>&#160;        dvek_c2(i)   = dvbydt(index1(index2(i)),k)</div><div class="line"><a name="l02028"></a><span class="lineno"> 2028</span>&#160;        duekp1_c2(i)   = dubydt(index1(index2(i)),k+1)</div><div class="line"><a name="l02029"></a><span class="lineno"> 2029</span>&#160;        dvekp1_c2(i)   = dvbydt(index1(index2(i)),k+1)</div><div class="line"><a name="l02030"></a><span class="lineno"> 2030</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l02031"></a><span class="lineno"> 2031</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l02032"></a><span class="lineno"> 2032</span>&#160;    <span class="keywordflow">IF</span> (l_tracer) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02033"></a><span class="lineno"> 2033</span>&#160;      <span class="keywordflow">DO</span> ktra = 1,ntra</div><div class="line"><a name="l02034"></a><span class="lineno"> 2034</span>&#160;        <span class="keywordflow">DO</span> i = 1,nconv</div><div class="line"><a name="l02035"></a><span class="lineno"> 2035</span>&#160;          trapk_c2(i,ktra) = trapk_c(index2(i),ktra)</div><div class="line"><a name="l02036"></a><span class="lineno"> 2036</span>&#160;          dtraek_c2(i,ktra) = dtrabydt(index1(index2(i)),k,ktra)</div><div class="line"><a name="l02037"></a><span class="lineno"> 2037</span>&#160;          dtraekp1_c2(i,ktra) = dtrabydt(index1(index2(i)),k+1,ktra)</div><div class="line"><a name="l02038"></a><span class="lineno"> 2038</span>&#160;<span class="keywordflow">        END DO</span></div><div class="line"><a name="l02039"></a><span class="lineno"> 2039</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l02040"></a><span class="lineno"> 2040</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l02041"></a><span class="lineno"> 2041</span>&#160;</div><div class="line"><a name="l02042"></a><span class="lineno"> 2042</span>&#160;<span class="comment">! Force shallow convection to stop at ntpar unless using adaptive forced</span></div><div class="line"><a name="l02043"></a><span class="lineno"> 2043</span>&#160;<span class="comment">! detrainment or shallow grey zone param</span></div><div class="line"><a name="l02044"></a><span class="lineno"> 2044</span>&#160;</div><div class="line"><a name="l02045"></a><span class="lineno"> 2045</span>&#160;    <span class="keywordflow">IF</span> (<a class="code" href="namespacecv__dependent__switch__mod.xhtml#a1369b0cc22efacc4b37aa3db4943e844" title="Extra switches controlling adaptive forced detrainment options. ">sh_on</a> == 0 .AND. <a class="code" href="namespacecv__dependent__switch__mod.xhtml#a6a0879b7a28fdcb71d673d1c76810d94">sh_grey</a> == 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02046"></a><span class="lineno"> 2046</span>&#160;</div><div class="line"><a name="l02047"></a><span class="lineno"> 2047</span>&#160;<span class="comment">! Part of BTERM comes from values in array before convec2.</span></div><div class="line"><a name="l02048"></a><span class="lineno"> 2048</span>&#160;<span class="comment">! Original code set bterm_c2 according to this test before call to</span></div><div class="line"><a name="l02049"></a><span class="lineno"> 2049</span>&#160;<span class="comment">! convec2.</span></div><div class="line"><a name="l02050"></a><span class="lineno"> 2050</span>&#160;      <span class="keywordflow">DO</span> i = 1,nconv</div><div class="line"><a name="l02051"></a><span class="lineno"> 2051</span>&#160;        <span class="keywordflow">IF</span> (k  ==  ntpar(index1(index2(i))))<span class="keywordflow">THEN</span></div><div class="line"><a name="l02052"></a><span class="lineno"> 2052</span>&#160;          bterm_c2(i) = .true.</div><div class="line"><a name="l02053"></a><span class="lineno"> 2053</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l02054"></a><span class="lineno"> 2054</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l02055"></a><span class="lineno"> 2055</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l02056"></a><span class="lineno"> 2056</span>&#160;</div><div class="line"><a name="l02057"></a><span class="lineno"> 2057</span>&#160;</div><div class="line"><a name="l02058"></a><span class="lineno"> 2058</span>&#160;<span class="comment">! 3.3  Calculate the rest of the parcel ascent  and the effect of</span></div><div class="line"><a name="l02059"></a><span class="lineno"> 2059</span>&#160;<span class="comment">!      convection on the large-scale atmosphere.</span></div><div class="line"><a name="l02060"></a><span class="lineno"> 2060</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l02061"></a><span class="lineno"> 2061</span>&#160;<span class="comment">!      Subroutine CONVEC2</span></div><div class="line"><a name="l02062"></a><span class="lineno"> 2062</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l02063"></a><span class="lineno"> 2063</span>&#160;<span class="comment">!      UM Documentation paper 27, sections (5),(6),(7),(8),(9),(10)</span></div><div class="line"><a name="l02064"></a><span class="lineno"> 2064</span>&#160;</div><div class="line"><a name="l02065"></a><span class="lineno"> 2065</span>&#160;</div><div class="line"><a name="l02066"></a><span class="lineno"> 2066</span>&#160;<span class="comment">! DEPENDS ON: convec2_4a5a</span></div><div class="line"><a name="l02067"></a><span class="lineno"> 2067</span>&#160;    <span class="keyword">CALL </span><a class="code" href="convec2-conv24a_8f90.xhtml#a9b41c79077663aeb17d05e1d1061d13a" title="Completes lifting of the parcel from layer k to k+1. ">convec2_4a5a</a>(nconv,n_sh,nlev,ntra,k,<a class="code" href="namespacecv__dependent__switch__mod.xhtml#a1369b0cc22efacc4b37aa3db4943e844" title="Extra switches controlling adaptive forced detrainment options. ">sh_on</a>, <a class="code" href="namespacecv__dependent__switch__mod.xhtml#afe60b51a5e1c0be19e1434111beb5702">sh_sdet_on</a>, <a class="code" href="namespacecv__dependent__switch__mod.xhtml#a078163b4772812cecc5ee6b41fe4580c">sh_new_termc</a>,&amp;</div><div class="line"><a name="l02068"></a><span class="lineno"> 2068</span>&#160;                      start_lev3c,n_wups,                                    &amp;</div><div class="line"><a name="l02069"></a><span class="lineno"> 2069</span>&#160;                      l_tracer,l_mom_gk,l_q_interact,l_calc_dxek,            &amp;</div><div class="line"><a name="l02070"></a><span class="lineno"> 2070</span>&#160;                      l_shallow_c2,l_mid_c2,cumulus_c2,                      &amp;</div><div class="line"><a name="l02071"></a><span class="lineno"> 2071</span>&#160;                      bwk_c2,bwkp1_c2,bgmkp1_c2,bland_c2,blowst_c2,          &amp;</div><div class="line"><a name="l02072"></a><span class="lineno"> 2072</span>&#160;                      timestep,                                              &amp;</div><div class="line"><a name="l02073"></a><span class="lineno"> 2073</span>&#160;                      thek_c2,thekp1_c2,qek_c2,qekp1_c2,qclek_c2,qclekp1_c2, &amp;</div><div class="line"><a name="l02074"></a><span class="lineno"> 2074</span>&#160;                      qcfek_c2,qcfekp1_c2,cflek_c2,cflekp1_c2,               &amp;</div><div class="line"><a name="l02075"></a><span class="lineno"> 2075</span>&#160;                      cffek_c2,cffekp1_c2,bcfek_c2,bcfekp1_c2,               &amp;</div><div class="line"><a name="l02076"></a><span class="lineno"> 2076</span>&#160;                      uek_c2,uekp1_c2,vek_c2,vekp1_c2,                       &amp;</div><div class="line"><a name="l02077"></a><span class="lineno"> 2077</span>&#160;                      traek_c2,traekp1_c2,trapkp1_c2,                        &amp;</div><div class="line"><a name="l02078"></a><span class="lineno"> 2078</span>&#160;                      qsekp1_c2,dqsthkp1_c2,pstar_c2,thpkp1_c2,qpkp1_c2,     &amp;</div><div class="line"><a name="l02079"></a><span class="lineno"> 2079</span>&#160;                      upkp1_c2,vpkp1_c2,xsqkp1_c2,rbuoy_c2,qsek_c2,dqsthk_c2,&amp;</div><div class="line"><a name="l02080"></a><span class="lineno"> 2080</span>&#160;                      thpi_c2,qpi_c2,expi_c2,ekp14_c2,ekp34_c2,amdetk_c2,    &amp;</div><div class="line"><a name="l02081"></a><span class="lineno"> 2081</span>&#160;                      pk_c2,pkp1_c2,exk_c2,exkp1_c2,delexkp1_c2,delpk_c2,    &amp;</div><div class="line"><a name="l02082"></a><span class="lineno"> 2082</span>&#160;                      delpkp1_c2,delp_uv_k_c2, delp_uv_kp1_c2,               &amp;</div><div class="line"><a name="l02083"></a><span class="lineno"> 2083</span>&#160;                      t1_sd_c2,q1_sd_c2,thpixs_v_c2,qpixs_v_c2,xsbmin_v_c2,  &amp;</div><div class="line"><a name="l02084"></a><span class="lineno"> 2084</span>&#160;                      rbuoy_p_old_c2,                                        &amp;</div><div class="line"><a name="l02085"></a><span class="lineno"> 2085</span>&#160;                      zkm1_c2, zk_c2, zkp12_c2, zkp1_c2,                     &amp;</div><div class="line"><a name="l02086"></a><span class="lineno"> 2086</span>&#160;</div><div class="line"><a name="l02087"></a><span class="lineno"> 2087</span>&#160;                      <span class="comment">! In/out</span></div><div class="line"><a name="l02088"></a><span class="lineno"> 2088</span>&#160;                      bconv_c2,bgmk_c2,                                      &amp;</div><div class="line"><a name="l02089"></a><span class="lineno"> 2089</span>&#160;                      thpk_c2,qpk_c2,qclpk_c2,qcfpk_c2,qclpkp1_c2,qcfpkp1_c2,&amp;</div><div class="line"><a name="l02090"></a><span class="lineno"> 2090</span>&#160;                      upk_c2,vpk_c2,trapk_c2,xpk_c2,flxk_c2,                 &amp;</div><div class="line"><a name="l02091"></a><span class="lineno"> 2091</span>&#160;                      dthek_c2,dqek_c2,dqclek_c2,dqcfek_c2,dcflek_c2,        &amp;</div><div class="line"><a name="l02092"></a><span class="lineno"> 2092</span>&#160;                      dcffek_c2,dbcfek_c2,duek_c2,dvek_c2,dtraek_c2,         &amp;</div><div class="line"><a name="l02093"></a><span class="lineno"> 2093</span>&#160;                      tcw_c2,depth_c2,cclwp_c2,cape_c2,dcpbydt_c2,           &amp;</div><div class="line"><a name="l02094"></a><span class="lineno"> 2094</span>&#160;                      eflux_u_ud_c2,eflux_v_ud_c2,                           &amp;</div><div class="line"><a name="l02095"></a><span class="lineno"> 2095</span>&#160;                      w2p_km1_c2, w2p_k_c2, w2p_kp1_c2,                      &amp;</div><div class="line"><a name="l02096"></a><span class="lineno"> 2096</span>&#160;</div><div class="line"><a name="l02097"></a><span class="lineno"> 2097</span>&#160;                      <span class="comment">! Out</span></div><div class="line"><a name="l02098"></a><span class="lineno"> 2098</span>&#160;                      iccb_c2,icct_c2,lcbase_c2,lctop_c2,                    &amp;</div><div class="line"><a name="l02099"></a><span class="lineno"> 2099</span>&#160;                      bterm_c2,                                              &amp;</div><div class="line"><a name="l02100"></a><span class="lineno"> 2100</span>&#160;                      prekp1_c2, dthekp1_c2,dqekp1_c2,                       &amp;</div><div class="line"><a name="l02101"></a><span class="lineno"> 2101</span>&#160;                      dqclekp1_c2,dqcfekp1_c2,dcflekp1_c2,dcffekp1_c2,       &amp;</div><div class="line"><a name="l02102"></a><span class="lineno"> 2102</span>&#160;                      dbcfekp1_c2,duekp1_c2,dvekp1_c2,dtraekp1_c2,           &amp;</div><div class="line"><a name="l02103"></a><span class="lineno"> 2103</span>&#160;                      cca_2d_c2,ccw_c2,lcca_c2,deltak_c2,flxkp12_c2,         &amp;</div><div class="line"><a name="l02104"></a><span class="lineno"> 2104</span>&#160;                      max_cfl_c2,relh_c2,dptot_c2,rbuoy_p_here_c2,           &amp;</div><div class="line"><a name="l02105"></a><span class="lineno"> 2105</span>&#160;                      the_here_c2,thp_here_c2,qe_here_c2,qp_here_c2)</div><div class="line"><a name="l02106"></a><span class="lineno"> 2106</span>&#160;</div><div class="line"><a name="l02107"></a><span class="lineno"> 2107</span>&#160;<span class="comment">! Calculate fractional entrainment rate for level k.</span></div><div class="line"><a name="l02108"></a><span class="lineno"> 2108</span>&#160;<span class="comment">! If convection has terminated (bterm=.T.) then set</span></div><div class="line"><a name="l02109"></a><span class="lineno"> 2109</span>&#160;<span class="comment">! fractional entrainment rate for k+1 to zero.</span></div><div class="line"><a name="l02110"></a><span class="lineno"> 2110</span>&#160;</div><div class="line"><a name="l02111"></a><span class="lineno"> 2111</span>&#160;    <span class="keywordflow">IF</span> (<a class="code" href="namespacecv__stash__flg__mod.xhtml#a594eca06c1e2300b31f8c2bba686ff1e">flg_entr_up</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02112"></a><span class="lineno"> 2112</span>&#160;      <span class="keywordflow">DO</span> i = 1,nconv</div><div class="line"><a name="l02113"></a><span class="lineno"> 2113</span>&#160;        entrain_up(index1(index2(i)),k) = (1.0 - deltak_c2(i)) *      &amp;</div><div class="line"><a name="l02114"></a><span class="lineno"> 2114</span>&#160;                   (1.0 - amdetk_c2(i)) * (ekp14_c2(i) + ekp34_c2(i)  &amp;</div><div class="line"><a name="l02115"></a><span class="lineno"> 2115</span>&#160;                 * (1.0 + ekp14_c2(i))) * flx(index1(index2(i)),k)</div><div class="line"><a name="l02116"></a><span class="lineno"> 2116</span>&#160;        <span class="keywordflow">IF</span> (bterm_c2(i)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02117"></a><span class="lineno"> 2117</span>&#160;          entrain_up(index1(index2(i)),k+1) = 0.0</div><div class="line"><a name="l02118"></a><span class="lineno"> 2118</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l02119"></a><span class="lineno"> 2119</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l02120"></a><span class="lineno"> 2120</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l02121"></a><span class="lineno"> 2121</span>&#160;</div><div class="line"><a name="l02122"></a><span class="lineno"> 2122</span>&#160;<span class="comment">! Calculate fractional detrainment rate for level k</span></div><div class="line"><a name="l02123"></a><span class="lineno"> 2123</span>&#160;<span class="comment">!(and k+1 if bterm=.T.)</span></div><div class="line"><a name="l02124"></a><span class="lineno"> 2124</span>&#160;</div><div class="line"><a name="l02125"></a><span class="lineno"> 2125</span>&#160;    <span class="keywordflow">IF</span> (<a class="code" href="namespacecv__stash__flg__mod.xhtml#a23946cc9e076aa4865e7ed4049aa6e81">flg_detr_up</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02126"></a><span class="lineno"> 2126</span>&#160;      <span class="keywordflow">DO</span> i = 1,nconv</div><div class="line"><a name="l02127"></a><span class="lineno"> 2127</span>&#160;        detrain_up(index1(index2(i)),k) = -(amdetk_c2(i)              &amp;</div><div class="line"><a name="l02128"></a><span class="lineno"> 2128</span>&#160;                        + deltak_c2(i) * (1.0 - amdetk_c2(i)))        &amp;</div><div class="line"><a name="l02129"></a><span class="lineno"> 2129</span>&#160;                     * flx(index1(index2(i)),k)</div><div class="line"><a name="l02130"></a><span class="lineno"> 2130</span>&#160;        <span class="keywordflow">IF</span> (bterm_c2(i)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02131"></a><span class="lineno"> 2131</span>&#160;          detrain_up(index1(index2(i)),k+1) =                         &amp;</div><div class="line"><a name="l02132"></a><span class="lineno"> 2132</span>&#160;                 -(1.0 - deltak_c2(i)) * flx(index1(index2(i)),k)</div><div class="line"><a name="l02133"></a><span class="lineno"> 2133</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l02134"></a><span class="lineno"> 2134</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l02135"></a><span class="lineno"> 2135</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l02136"></a><span class="lineno"> 2136</span>&#160;</div><div class="line"><a name="l02137"></a><span class="lineno"> 2137</span>&#160;<span class="keywordflow">  END IF</span>   <span class="comment">! nconv &gt; 0</span></div><div class="line"><a name="l02138"></a><span class="lineno"> 2138</span>&#160;</div><div class="line"><a name="l02139"></a><span class="lineno"> 2139</span>&#160;<span class="comment">! Write CONVEC2 compressed output arrays back to full fields</span></div><div class="line"><a name="l02140"></a><span class="lineno"> 2140</span>&#160;</div><div class="line"><a name="l02141"></a><span class="lineno"> 2141</span>&#160;  <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l02142"></a><span class="lineno"> 2142</span>&#160;    thp(i,k+1)    = 0.0</div><div class="line"><a name="l02143"></a><span class="lineno"> 2143</span>&#160;    qp(i,k+1)     = 0.0</div><div class="line"><a name="l02144"></a><span class="lineno"> 2144</span>&#160;    xpk(i,k+1)    = 0.0</div><div class="line"><a name="l02145"></a><span class="lineno"> 2145</span>&#160;    flx(i,k+1)    = 0.0</div><div class="line"><a name="l02146"></a><span class="lineno"> 2146</span>&#160;    depth(i)      = 0.0</div><div class="line"><a name="l02147"></a><span class="lineno"> 2147</span>&#160;    precip(i,k+1) = 0.0</div><div class="line"><a name="l02148"></a><span class="lineno"> 2148</span>&#160;    qclp(i,k+1)   = 0.0</div><div class="line"><a name="l02149"></a><span class="lineno"> 2149</span>&#160;    qcfp(i,k+1)   = 0.0</div><div class="line"><a name="l02150"></a><span class="lineno"> 2150</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l02151"></a><span class="lineno"> 2151</span>&#160;  <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l02152"></a><span class="lineno"> 2152</span>&#160;    bgmk(i)       = .false.</div><div class="line"><a name="l02153"></a><span class="lineno"> 2153</span>&#160;    bterm(i)      = .false.</div><div class="line"><a name="l02154"></a><span class="lineno"> 2154</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l02155"></a><span class="lineno"> 2155</span>&#160;</div><div class="line"><a name="l02156"></a><span class="lineno"> 2156</span>&#160;  <span class="keywordflow">IF</span> (l_tracer) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02157"></a><span class="lineno"> 2157</span>&#160;    <span class="keywordflow">DO</span> ktra = 1,ntra</div><div class="line"><a name="l02158"></a><span class="lineno"> 2158</span>&#160;      <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l02159"></a><span class="lineno"> 2159</span>&#160;        trap(i,k+1,ktra) = 0.0</div><div class="line"><a name="l02160"></a><span class="lineno"> 2160</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l02161"></a><span class="lineno"> 2161</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l02162"></a><span class="lineno"> 2162</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l02163"></a><span class="lineno"> 2163</span>&#160;</div><div class="line"><a name="l02164"></a><span class="lineno"> 2164</span>&#160;  <span class="keywordflow">IF</span> (l_mom_gk) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02165"></a><span class="lineno"> 2165</span>&#160;    <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l02166"></a><span class="lineno"> 2166</span>&#160;      up(i,k+1) = 0.0</div><div class="line"><a name="l02167"></a><span class="lineno"> 2167</span>&#160;      vp(i,k+1) = 0.0</div><div class="line"><a name="l02168"></a><span class="lineno"> 2168</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l02169"></a><span class="lineno"> 2169</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l02170"></a><span class="lineno"> 2170</span>&#160;</div><div class="line"><a name="l02171"></a><span class="lineno"> 2171</span>&#160;  <span class="keywordflow">IF</span> (nconv  &gt;   0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02172"></a><span class="lineno"> 2172</span>&#160;    <span class="keywordflow">DO</span> i = 1,nconv</div><div class="line"><a name="l02173"></a><span class="lineno"> 2173</span>&#160;      thp(index1(index2(i)),k+1) = thpkp1_c2(i)</div><div class="line"><a name="l02174"></a><span class="lineno"> 2174</span>&#160;      qp(index1(index2(i)),k+1)  = qpkp1_c2(i)</div><div class="line"><a name="l02175"></a><span class="lineno"> 2175</span>&#160;      xpk(index1(index2(i)),k+1) = xpk_c2(i)</div><div class="line"><a name="l02176"></a><span class="lineno"> 2176</span>&#160;      flx(index1(index2(i)),k+1) = flxk_c2(i)</div><div class="line"><a name="l02177"></a><span class="lineno"> 2177</span>&#160;      depth(index1(index2(i)))   = depth_c2(i)</div><div class="line"><a name="l02178"></a><span class="lineno"> 2178</span>&#160;      precip(index1(index2(i)),k+1) = prekp1_c2(i)</div><div class="line"><a name="l02179"></a><span class="lineno"> 2179</span>&#160;      bgmk(index1(index2(i)))    = bgmk_c2(i)</div><div class="line"><a name="l02180"></a><span class="lineno"> 2180</span>&#160;      bterm(index1(index2(i)))   = bterm_c2(i)</div><div class="line"><a name="l02181"></a><span class="lineno"> 2181</span>&#160;      dthbydt(index1(index2(i)),k) = dthek_c2(i)</div><div class="line"><a name="l02182"></a><span class="lineno"> 2182</span>&#160;      dqbydt(index1(index2(i)),k)  = dqek_c2(i)</div><div class="line"><a name="l02183"></a><span class="lineno"> 2183</span>&#160;      dthbydt(index1(index2(i)),k+1) = dthekp1_c2(i)</div><div class="line"><a name="l02184"></a><span class="lineno"> 2184</span>&#160;      dqbydt(index1(index2(i)),k+1)  = dqekp1_c2(i)</div><div class="line"><a name="l02185"></a><span class="lineno"> 2185</span>&#160;      cca_2d(index1(index2(i)))  = cca_2d_c2(i)</div><div class="line"><a name="l02186"></a><span class="lineno"> 2186</span>&#160;      tcw(index1(index2(i)))     = tcw_c2(i)</div><div class="line"><a name="l02187"></a><span class="lineno"> 2187</span>&#160;      iccb(index1(index2(i)))    = iccb_c2(i)</div><div class="line"><a name="l02188"></a><span class="lineno"> 2188</span>&#160;      icct(index1(index2(i)))    = icct_c2(i)</div><div class="line"><a name="l02189"></a><span class="lineno"> 2189</span>&#160;      cclwp(index1(index2(i)))   = cclwp_c2(i)</div><div class="line"><a name="l02190"></a><span class="lineno"> 2190</span>&#160;      lcca(index1(index2(i)))    = lcca_c2(i)</div><div class="line"><a name="l02191"></a><span class="lineno"> 2191</span>&#160;      lcbase(index1(index2(i)))  = lcbase_c2(i)</div><div class="line"><a name="l02192"></a><span class="lineno"> 2192</span>&#160;      lctop(index1(index2(i)))   = lctop_c2(i)</div><div class="line"><a name="l02193"></a><span class="lineno"> 2193</span>&#160;      ccw(index1(index2(i)),k+1) = ccw_c2(i)</div><div class="line"><a name="l02194"></a><span class="lineno"> 2194</span>&#160;      cape(index1(index2(i)))    = cape_c2(i)</div><div class="line"><a name="l02195"></a><span class="lineno"> 2195</span>&#160;      dcpbydt(index1(index2(i))) = dcpbydt_c2(i)</div><div class="line"><a name="l02196"></a><span class="lineno"> 2196</span>&#160;      rbuoy_p_here(index1(index2(i))) = rbuoy_p_here_c2(i)</div><div class="line"><a name="l02197"></a><span class="lineno"> 2197</span>&#160;      the_here(index1(index2(i))) = the_here_c2(i)</div><div class="line"><a name="l02198"></a><span class="lineno"> 2198</span>&#160;      thp_here(index1(index2(i))) = thp_here_c2(i)</div><div class="line"><a name="l02199"></a><span class="lineno"> 2199</span>&#160;      qe_here(index1(index2(i))) = qe_here_c2(i)</div><div class="line"><a name="l02200"></a><span class="lineno"> 2200</span>&#160;      qp_here(index1(index2(i))) = qp_here_c2(i)</div><div class="line"><a name="l02201"></a><span class="lineno"> 2201</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l02202"></a><span class="lineno"> 2202</span>&#160;</div><div class="line"><a name="l02203"></a><span class="lineno"> 2203</span>&#160;    <span class="keywordflow">IF</span> (<a class="code" href="namespacecv__stash__flg__mod.xhtml#a50f06f66e4ccdedcd3c49d357976dbf7">flg_w_eqn</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02204"></a><span class="lineno"> 2204</span>&#160;      <span class="keywordflow">DO</span> i=1, nconv</div><div class="line"><a name="l02205"></a><span class="lineno"> 2205</span>&#160;        w2p(index1(index2(i)),k)   = w2p_k_c2(i)</div><div class="line"><a name="l02206"></a><span class="lineno"> 2206</span>&#160;        w2p(index1(index2(i)),k+1) = w2p_kp1_c2(i)</div><div class="line"><a name="l02207"></a><span class="lineno"> 2207</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l02208"></a><span class="lineno"> 2208</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l02209"></a><span class="lineno"> 2209</span>&#160;</div><div class="line"><a name="l02210"></a><span class="lineno"> 2210</span>&#160;    <span class="keywordflow">DO</span> i = 1,nconv</div><div class="line"><a name="l02211"></a><span class="lineno"> 2211</span>&#160;      max_cfl(index1(index2(i))) =                                  &amp;</div><div class="line"><a name="l02212"></a><span class="lineno"> 2212</span>&#160;                   max(max_cfl(index1(index2(i))),max_cfl_c2(i))</div><div class="line"><a name="l02213"></a><span class="lineno"> 2213</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l02214"></a><span class="lineno"> 2214</span>&#160;    <span class="keywordflow">IF</span> (l_q_interact) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02215"></a><span class="lineno"> 2215</span>&#160;      <span class="keywordflow">DO</span> i = 1,nconv</div><div class="line"><a name="l02216"></a><span class="lineno"> 2216</span>&#160;<span class="comment">!          PC2 variables</span></div><div class="line"><a name="l02217"></a><span class="lineno"> 2217</span>&#160;        qclp(index1(index2(i)),k+1)   = qclpkp1_c2(i)</div><div class="line"><a name="l02218"></a><span class="lineno"> 2218</span>&#160;        qcfp(index1(index2(i)),k+1)   = qcfpkp1_c2(i)</div><div class="line"><a name="l02219"></a><span class="lineno"> 2219</span>&#160;        dqclbydt(index1(index2(i)),k)   = dqclek_c2(i)</div><div class="line"><a name="l02220"></a><span class="lineno"> 2220</span>&#160;        dqcfbydt(index1(index2(i)),k)   = dqcfek_c2(i)</div><div class="line"><a name="l02221"></a><span class="lineno"> 2221</span>&#160;        dcflbydt(index1(index2(i)),k)   = dcflek_c2(i)</div><div class="line"><a name="l02222"></a><span class="lineno"> 2222</span>&#160;        dcffbydt(index1(index2(i)),k)   = dcffek_c2(i)</div><div class="line"><a name="l02223"></a><span class="lineno"> 2223</span>&#160;        dbcfbydt(index1(index2(i)),k)   = dbcfek_c2(i)</div><div class="line"><a name="l02224"></a><span class="lineno"> 2224</span>&#160;        dqclbydt(index1(index2(i)),k+1) = dqclekp1_c2(i)</div><div class="line"><a name="l02225"></a><span class="lineno"> 2225</span>&#160;        dqcfbydt(index1(index2(i)),k+1) = dqcfekp1_c2(i)</div><div class="line"><a name="l02226"></a><span class="lineno"> 2226</span>&#160;        dcflbydt(index1(index2(i)),k+1) = dcflekp1_c2(i)</div><div class="line"><a name="l02227"></a><span class="lineno"> 2227</span>&#160;        dcffbydt(index1(index2(i)),k+1) = dcffekp1_c2(i)</div><div class="line"><a name="l02228"></a><span class="lineno"> 2228</span>&#160;        dbcfbydt(index1(index2(i)),k+1) = dbcfekp1_c2(i)</div><div class="line"><a name="l02229"></a><span class="lineno"> 2229</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l02230"></a><span class="lineno"> 2230</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l02231"></a><span class="lineno"> 2231</span>&#160;    <span class="keywordflow">IF</span> (l_mom_gk) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02232"></a><span class="lineno"> 2232</span>&#160;      <span class="keywordflow">DO</span> i = 1,nconv</div><div class="line"><a name="l02233"></a><span class="lineno"> 2233</span>&#160;        dubydt(index1(index2(i)),k) = duek_c2(i)</div><div class="line"><a name="l02234"></a><span class="lineno"> 2234</span>&#160;        dvbydt(index1(index2(i)),k) = dvek_c2(i)</div><div class="line"><a name="l02235"></a><span class="lineno"> 2235</span>&#160;        dubydt(index1(index2(i)),k+1) = duekp1_c2(i)</div><div class="line"><a name="l02236"></a><span class="lineno"> 2236</span>&#160;        dvbydt(index1(index2(i)),k+1) = dvekp1_c2(i)</div><div class="line"><a name="l02237"></a><span class="lineno"> 2237</span>&#160;        eflux_u_ud(index1(index2(i))) = eflux_u_ud_c2(i)</div><div class="line"><a name="l02238"></a><span class="lineno"> 2238</span>&#160;        eflux_v_ud(index1(index2(i))) = eflux_v_ud_c2(i)</div><div class="line"><a name="l02239"></a><span class="lineno"> 2239</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l02240"></a><span class="lineno"> 2240</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l02241"></a><span class="lineno"> 2241</span>&#160;    <span class="keywordflow">IF</span> (<a class="code" href="namespacecv__run__mod.xhtml#a9fa9c42ad2da411d2451fd13fbf43514">l_mom</a>) <span class="keywordflow">THEN</span>    <span class="comment">! needed for all versions</span></div><div class="line"><a name="l02242"></a><span class="lineno"> 2242</span>&#160;      <span class="keywordflow">DO</span> i = 1,nconv</div><div class="line"><a name="l02243"></a><span class="lineno"> 2243</span>&#160;        flxkp12(index1(index2(i)),k)  = flxkp12_c2(i)</div><div class="line"><a name="l02244"></a><span class="lineno"> 2244</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l02245"></a><span class="lineno"> 2245</span>&#160;<span class="keywordflow">    END IF</span>  <span class="comment">! L_mom</span></div><div class="line"><a name="l02246"></a><span class="lineno"> 2246</span>&#160;    <span class="keywordflow">IF</span>  (l_tracer) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02247"></a><span class="lineno"> 2247</span>&#160;      <span class="keywordflow">DO</span> i = 1,nconv</div><div class="line"><a name="l02248"></a><span class="lineno"> 2248</span>&#160;        <span class="keywordflow">DO</span> ktra = 1,ntra</div><div class="line"><a name="l02249"></a><span class="lineno"> 2249</span>&#160;          trap(index1(index2(i)),k+1,ktra)     = trapk_c2(i,ktra)</div><div class="line"><a name="l02250"></a><span class="lineno"> 2250</span>&#160;          dtrabydt(index1(index2(i)),k,ktra)   = dtraek_c2(i,ktra)</div><div class="line"><a name="l02251"></a><span class="lineno"> 2251</span>&#160;          dtrabydt(index1(index2(i)),k+1,ktra) = dtraekp1_c2(i,ktra)</div><div class="line"><a name="l02252"></a><span class="lineno"> 2252</span>&#160;<span class="keywordflow">        END DO</span></div><div class="line"><a name="l02253"></a><span class="lineno"> 2253</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l02254"></a><span class="lineno"> 2254</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l02255"></a><span class="lineno"> 2255</span>&#160;<span class="keywordflow">  END IF</span>      <span class="comment">! nconv &gt; 0</span></div><div class="line"><a name="l02256"></a><span class="lineno"> 2256</span>&#160;</div><div class="line"><a name="l02257"></a><span class="lineno"> 2257</span>&#160;<span class="comment">!   Write adaptive diagnostics for this level to full array for output</span></div><div class="line"><a name="l02258"></a><span class="lineno"> 2258</span>&#160;</div><div class="line"><a name="l02259"></a><span class="lineno"> 2259</span>&#160;  <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l02260"></a><span class="lineno"> 2260</span>&#160;    rbuoy_p_out(i,k) = rbuoy_p_here(i)</div><div class="line"><a name="l02261"></a><span class="lineno"> 2261</span>&#160;    the_out(i,k) = the_here(i)</div><div class="line"><a name="l02262"></a><span class="lineno"> 2262</span>&#160;    thp_out(i,k) = thp_here(i)</div><div class="line"><a name="l02263"></a><span class="lineno"> 2263</span>&#160;    qe_out(i,k) = qe_here(i)</div><div class="line"><a name="l02264"></a><span class="lineno"> 2264</span>&#160;    qp_out(i,k) = qp_here(i)</div><div class="line"><a name="l02265"></a><span class="lineno"> 2265</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l02266"></a><span class="lineno"> 2266</span>&#160;</div><div class="line"><a name="l02267"></a><span class="lineno"> 2267</span>&#160;<span class="comment">!  write rbuoy_here to rbuoy_p_old for next pass through loop</span></div><div class="line"><a name="l02268"></a><span class="lineno"> 2268</span>&#160;  <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l02269"></a><span class="lineno"> 2269</span>&#160;    rbuoy_p_old(i) = rbuoy_p_here(i)</div><div class="line"><a name="l02270"></a><span class="lineno"> 2270</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l02271"></a><span class="lineno"> 2271</span>&#160;</div><div class="line"><a name="l02272"></a><span class="lineno"> 2272</span>&#160;</div><div class="line"><a name="l02273"></a><span class="lineno"> 2273</span>&#160;<span class="comment">! 3.4  Store information at termination for use later</span></div><div class="line"><a name="l02274"></a><span class="lineno"> 2274</span>&#160;</div><div class="line"><a name="l02275"></a><span class="lineno"> 2275</span>&#160;</div><div class="line"><a name="l02276"></a><span class="lineno"> 2276</span>&#160;  <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l02277"></a><span class="lineno"> 2277</span>&#160;    <span class="keywordflow">IF</span> (bterm(i)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02278"></a><span class="lineno"> 2278</span>&#160;      cca_2d_term(i)  = cca_2d(i)</div><div class="line"><a name="l02279"></a><span class="lineno"> 2279</span>&#160;      <span class="comment">! Set final detrainment level (but not used)</span></div><div class="line"><a name="l02280"></a><span class="lineno"> 2280</span>&#160;      det_lev(i)= k+1</div><div class="line"><a name="l02281"></a><span class="lineno"> 2281</span>&#160;      flx_init_term(i) = flx_init(i)</div><div class="line"><a name="l02282"></a><span class="lineno"> 2282</span>&#160;      bgmk_term(i) = bgmk(i)</div><div class="line"><a name="l02283"></a><span class="lineno"> 2283</span>&#160;      <span class="comment">! If convection has terminated write cape to diagnostic output</span></div><div class="line"><a name="l02284"></a><span class="lineno"> 2284</span>&#160;      <span class="comment">! variable (cape_out).</span></div><div class="line"><a name="l02285"></a><span class="lineno"> 2285</span>&#160;      cape_out(i) = cape(i)</div><div class="line"><a name="l02286"></a><span class="lineno"> 2286</span>&#160;      dcpbydt(i) = 0.0</div><div class="line"><a name="l02287"></a><span class="lineno"> 2287</span>&#160;      cape(i) = 0.0</div><div class="line"><a name="l02288"></a><span class="lineno"> 2288</span>&#160;      <span class="comment">! Set kterm array which holds the level index for termination</span></div><div class="line"><a name="l02289"></a><span class="lineno"> 2289</span>&#160;      <span class="comment">! of convection.</span></div><div class="line"><a name="l02290"></a><span class="lineno"> 2290</span>&#160;      kterm(i) = k</div><div class="line"><a name="l02291"></a><span class="lineno"> 2291</span>&#160;      bconv(i) = .false.</div><div class="line"><a name="l02292"></a><span class="lineno"> 2292</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l02293"></a><span class="lineno"> 2293</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l02294"></a><span class="lineno"> 2294</span>&#160;</div><div class="line"><a name="l02295"></a><span class="lineno"> 2295</span>&#160;</div><div class="line"><a name="l02296"></a><span class="lineno"> 2296</span>&#160;<span class="comment">! 3.6  End of main loop over levels</span></div><div class="line"><a name="l02297"></a><span class="lineno"> 2297</span>&#160;</div><div class="line"><a name="l02298"></a><span class="lineno"> 2298</span>&#160;</div><div class="line"><a name="l02299"></a><span class="lineno"> 2299</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l02300"></a><span class="lineno"> 2300</span>&#160;</div><div class="line"><a name="l02301"></a><span class="lineno"> 2301</span>&#160;</div><div class="line"><a name="l02302"></a><span class="lineno"> 2302</span>&#160;<span class="comment">! 4.0 Work out scaled mass flux</span></div><div class="line"><a name="l02303"></a><span class="lineno"> 2303</span>&#160;<span class="comment">! First scale by grey zone parametrization, if requested</span></div><div class="line"><a name="l02304"></a><span class="lineno"> 2304</span>&#160;<span class="comment">! Then to keep cfl ratio below limit.</span></div><div class="line"><a name="l02305"></a><span class="lineno"> 2305</span>&#160;<span class="comment">! Note L_CAPE not applied to shallow convection</span></div><div class="line"><a name="l02306"></a><span class="lineno"> 2306</span>&#160;</div><div class="line"><a name="l02307"></a><span class="lineno"> 2307</span>&#160;</div><div class="line"><a name="l02308"></a><span class="lineno"> 2308</span>&#160;<span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l02309"></a><span class="lineno"> 2309</span>&#160;  <span class="keywordflow">IF</span> (kterm(i)  &gt;=  ntml(i)) <span class="keywordflow">THEN</span>   <span class="comment">! actual shallow convection</span></div><div class="line"><a name="l02310"></a><span class="lineno"> 2310</span>&#160;</div><div class="line"><a name="l02311"></a><span class="lineno"> 2311</span>&#160;    flx_init_new(i) = flx_init_term(i)</div><div class="line"><a name="l02312"></a><span class="lineno"> 2312</span>&#160;    <span class="keywordflow">IF</span> (<a class="code" href="namespacecv__dependent__switch__mod.xhtml#a6a0879b7a28fdcb71d673d1c76810d94">sh_grey</a> == 1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02313"></a><span class="lineno"> 2313</span>&#160;            <span class="comment">! Calculate Honnert et al style subgrid weighting as a function</span></div><div class="line"><a name="l02314"></a><span class="lineno"> 2314</span>&#160;      <span class="comment">! of the cloud-top height to grid size ratio</span></div><div class="line"><a name="l02315"></a><span class="lineno"> 2315</span>&#160;            k = kterm(i)</div><div class="line"><a name="l02316"></a><span class="lineno"> 2316</span>&#160;      weight_param = 1.0 -                                            &amp;</div><div class="line"><a name="l02317"></a><span class="lineno"> 2317</span>&#160;             tanh( <a class="code" href="namespacecv__param__mod.xhtml#a10660500154de8d4bd6edb7e0ff9bfcd">beta_cu</a>*z_theta(i,k)/delta_smag(i)) *              &amp;</div><div class="line"><a name="l02318"></a><span class="lineno"> 2318</span>&#160;             max( 0.0, (4.0-delta_smag(i)/z_theta(i,k)) )/4.0</div><div class="line"><a name="l02319"></a><span class="lineno"> 2319</span>&#160;      <span class="comment">! Scale flx_init using parametrization weighting</span></div><div class="line"><a name="l02320"></a><span class="lineno"> 2320</span>&#160;      flx_init_new(i) = weight_param*flx_init_new(i)</div><div class="line"><a name="l02321"></a><span class="lineno"> 2321</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l02322"></a><span class="lineno"> 2322</span>&#160;</div><div class="line"><a name="l02323"></a><span class="lineno"> 2323</span>&#160;    max_cfl(i) = max_cfl(i) * timestep</div><div class="line"><a name="l02324"></a><span class="lineno"> 2324</span>&#160;</div><div class="line"><a name="l02325"></a><span class="lineno"> 2325</span>&#160;    <span class="keywordflow">IF</span> (max_cfl(i)  &gt;   cfl_limit) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02326"></a><span class="lineno"> 2326</span>&#160;      flx_init_new(i) = flx_init_new(i) * cfl_limit / max_cfl(i)</div><div class="line"><a name="l02327"></a><span class="lineno"> 2327</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l02328"></a><span class="lineno"> 2328</span>&#160;</div><div class="line"><a name="l02329"></a><span class="lineno"> 2329</span>&#160;    <span class="keywordflow">IF</span> (flx_init_new(i)  &gt;   flxmax_init(i)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02330"></a><span class="lineno"> 2330</span>&#160;      flx_init_new(i) = flxmax_init(i)</div><div class="line"><a name="l02331"></a><span class="lineno"> 2331</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l02332"></a><span class="lineno"> 2332</span>&#160;    max_cfl(i) = 0.0</div><div class="line"><a name="l02333"></a><span class="lineno"> 2333</span>&#160;</div><div class="line"><a name="l02334"></a><span class="lineno"> 2334</span>&#160;    <span class="keywordflow">IF</span> (flx_init_new(i) &gt; 0.0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02335"></a><span class="lineno"> 2335</span>&#160;      scale_f(i) = flx_init_new(i) / flx_init_term(i)</div><div class="line"><a name="l02336"></a><span class="lineno"> 2336</span>&#160;      <span class="comment">! set flx_init to the new value to provide the real initial mass</span></div><div class="line"><a name="l02337"></a><span class="lineno"> 2337</span>&#160;      <span class="comment">! flux in all conditions</span></div><div class="line"><a name="l02338"></a><span class="lineno"> 2338</span>&#160;      flx_init(i) = flx_init_new(i)   <span class="comment">! needed for later</span></div><div class="line"><a name="l02339"></a><span class="lineno"> 2339</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l02340"></a><span class="lineno"> 2340</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l02341"></a><span class="lineno"> 2341</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l02342"></a><span class="lineno"> 2342</span>&#160;</div><div class="line"><a name="l02343"></a><span class="lineno"> 2343</span>&#160;kmax_term = 2</div><div class="line"><a name="l02344"></a><span class="lineno"> 2344</span>&#160;</div><div class="line"><a name="l02345"></a><span class="lineno"> 2345</span>&#160;<span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l02346"></a><span class="lineno"> 2346</span>&#160;  <span class="keywordflow">IF</span>(kterm(i)+1 &gt;  kmax_term) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02347"></a><span class="lineno"> 2347</span>&#160;    kmax_term = kterm(i)+1</div><div class="line"><a name="l02348"></a><span class="lineno"> 2348</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l02349"></a><span class="lineno"> 2349</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l02350"></a><span class="lineno"> 2350</span>&#160;</div><div class="line"><a name="l02351"></a><span class="lineno"> 2351</span>&#160;<span class="keywordflow">IF</span> (kmax_term &gt; nlev) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02352"></a><span class="lineno"> 2352</span>&#160;  kmax_term = nlev</div><div class="line"><a name="l02353"></a><span class="lineno"> 2353</span>&#160;<span class="keywordflow">END IF</span></div><div class="line"><a name="l02354"></a><span class="lineno"> 2354</span>&#160;</div><div class="line"><a name="l02355"></a><span class="lineno"> 2355</span>&#160;<span class="keywordflow">IF</span> (<a class="code" href="namespacecv__run__mod.xhtml#a3be02974c6903b96e25497f83d4efdb0">l_safe_conv</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02356"></a><span class="lineno"> 2356</span>&#160;</div><div class="line"><a name="l02357"></a><span class="lineno"> 2357</span>&#160;  <span class="comment">! Ensure scale_f not a very small number otherwise may get an almost zero</span></div><div class="line"><a name="l02358"></a><span class="lineno"> 2358</span>&#160;  <span class="comment">! mass flux which may cause problems in CMT or downdraught calculation</span></div><div class="line"><a name="l02359"></a><span class="lineno"> 2359</span>&#160;  <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l02360"></a><span class="lineno"> 2360</span>&#160;    <span class="comment">! No proper shallow convection</span></div><div class="line"><a name="l02361"></a><span class="lineno"> 2361</span>&#160;    <span class="keywordflow">IF</span> (scale_f(i) &lt; 1.e-6 .OR. kterm(i) &lt;= ntml(i)) then<span class="comment">!      write(6,*) &#39; Problem shallow : i &#39;,cape_out(i),scale_f(i),flx_init(i),&amp;</span></div><div class="line"><a name="l02362"></a><span class="lineno"> 2362</span>&#160;<span class="comment">!                   thpert(i),qpert(i),thv_pert(i),ntml(i),ntpar(i),kterm(i)</span></div><div class="line"><a name="l02363"></a><span class="lineno"> 2363</span>&#160;<span class="comment">!      write(6,*) &#39; dtheta : &#39;,(dthbydt(i,k),k=1,ntpar(i)+2)</span></div><div class="line"><a name="l02364"></a><span class="lineno"> 2364</span>&#160;<span class="comment">!      write(6,*) &#39; dq     : &#39;,(dqbydt(i,k),k=1,ntpar(i)+2)</span></div><div class="line"><a name="l02365"></a><span class="lineno"> 2365</span>&#160;<span class="comment">!      write(6,*) &#39; dqcl   : &#39;,(dqclbydt(i,k),k=1,ntpar(i)+2)</span></div><div class="line"><a name="l02366"></a><span class="lineno"> 2366</span>&#160;<span class="comment">!      write(6,*) &#39; dqcf   : &#39;,(dqcfbydt(i,k),k=1,ntpar(i)+2)</span></div><div class="line"><a name="l02367"></a><span class="lineno"> 2367</span>&#160;<span class="comment">!      write(6,*) &#39; buoy   : &#39;,(rbuoy_p_out(i,k),k=1,ntpar(i)+2)</span></div><div class="line"><a name="l02368"></a><span class="lineno"> 2368</span>&#160;<span class="comment">!      write(6,*) &#39; precip   : &#39;,(precip(i,k),k=1,ntpar(i)+2)</span></div><div class="line"><a name="l02369"></a><span class="lineno"> 2369</span>&#160;      scale_f(i)  = 0.0</div><div class="line"><a name="l02370"></a><span class="lineno"> 2370</span>&#160;      flx_init(i) = 0.0</div><div class="line"><a name="l02371"></a><span class="lineno"> 2371</span>&#160;      cape_out(i) = 0.0         <span class="comment">! reset to zero as failed deep</span></div><div class="line"><a name="l02372"></a><span class="lineno"> 2372</span>&#160;      ind_shall(i) = 0.0  <span class="comment">! real shallow event indicator</span></div><div class="line"><a name="l02373"></a><span class="lineno"> 2373</span>&#160;    <span class="keywordflow">ELSE</span></div><div class="line"><a name="l02374"></a><span class="lineno"> 2374</span>&#160;      ind_shall(i) = 1.0  <span class="comment">! real shallow event indicator</span></div><div class="line"><a name="l02375"></a><span class="lineno"> 2375</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l02376"></a><span class="lineno"> 2376</span>&#160;<span class="keywordflow">  END DO</span>   </div><div class="line"><a name="l02377"></a><span class="lineno"> 2377</span>&#160;<span class="keywordflow">ELSE</span>  <span class="comment">! Original code no check that shallow events are real</span></div><div class="line"><a name="l02378"></a><span class="lineno"> 2378</span>&#160;  <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l02379"></a><span class="lineno"> 2379</span>&#160;    ind_shall(i) = 1.0  <span class="comment">! All shallow as 1.0</span></div><div class="line"><a name="l02380"></a><span class="lineno"> 2380</span>&#160;<span class="keywordflow">  END DO</span><span class="keywordflow">   END IF</span>  <span class="comment">! l_safe_conv</span></div><div class="line"><a name="l02381"></a><span class="lineno"> 2381</span>&#160;</div><div class="line"><a name="l02382"></a><span class="lineno"> 2382</span>&#160;</div><div class="line"><a name="l02383"></a><span class="lineno"> 2383</span>&#160;<span class="comment">! 4.1  Carry out closure scaling and cfl scaling on updraught values</span></div><div class="line"><a name="l02384"></a><span class="lineno"> 2384</span>&#160;</div><div class="line"><a name="l02385"></a><span class="lineno"> 2385</span>&#160;<span class="keywordflow">IF</span> (<a class="code" href="namespacecv__run__mod.xhtml#a3be02974c6903b96e25497f83d4efdb0">l_safe_conv</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02386"></a><span class="lineno"> 2386</span>&#160;  <span class="comment">! Note if scale_f(i) = 0.0 then all increments are zeroed - no shallow</span></div><div class="line"><a name="l02387"></a><span class="lineno"> 2387</span>&#160;  <span class="comment">! convection occurs.</span></div><div class="line"><a name="l02388"></a><span class="lineno"> 2388</span>&#160;</div><div class="line"><a name="l02389"></a><span class="lineno"> 2389</span>&#160;  <span class="keywordflow">DO</span> kt = 2, kmax_term</div><div class="line"><a name="l02390"></a><span class="lineno"> 2390</span>&#160;    <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l02391"></a><span class="lineno"> 2391</span>&#160;       <span class="comment">!   Note any failed deep convection has increments scaled by zero.</span></div><div class="line"><a name="l02392"></a><span class="lineno"> 2392</span>&#160;      <span class="keywordflow">IF</span> (kt  &gt;=  ntml(i) .AND. kt &lt;= kterm(i)+1 ) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02393"></a><span class="lineno"> 2393</span>&#160;</div><div class="line"><a name="l02394"></a><span class="lineno"> 2394</span>&#160;          dthbydt(i,kt) = dthbydt(i,kt) * scale_f(i)</div><div class="line"><a name="l02395"></a><span class="lineno"> 2395</span>&#160;          dqbydt(i,kt)  = dqbydt(i,kt) * scale_f(i)</div><div class="line"><a name="l02396"></a><span class="lineno"> 2396</span>&#160;          <span class="keywordflow">IF</span> (l_q_interact) <span class="keywordflow">THEN</span>  <span class="comment">! PC2</span></div><div class="line"><a name="l02397"></a><span class="lineno"> 2397</span>&#160;            dqclbydt(i,kt)  = dqclbydt(i,kt) * scale_f(i)</div><div class="line"><a name="l02398"></a><span class="lineno"> 2398</span>&#160;            dqcfbydt(i,kt)  = dqcfbydt(i,kt) * scale_f(i)</div><div class="line"><a name="l02399"></a><span class="lineno"> 2399</span>&#160;            dcflbydt(i,kt)  = dcflbydt(i,kt) * scale_f(i)</div><div class="line"><a name="l02400"></a><span class="lineno"> 2400</span>&#160;            dcffbydt(i,kt)  = dcffbydt(i,kt) * scale_f(i)</div><div class="line"><a name="l02401"></a><span class="lineno"> 2401</span>&#160;            dbcfbydt(i,kt)  = dbcfbydt(i,kt) * scale_f(i)</div><div class="line"><a name="l02402"></a><span class="lineno"> 2402</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l02403"></a><span class="lineno"> 2403</span>&#160;          <span class="keywordflow">IF</span> (l_mom_gk) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02404"></a><span class="lineno"> 2404</span>&#160;            dubydt(i,kt)  = dubydt(i,kt) * scale_f(i)</div><div class="line"><a name="l02405"></a><span class="lineno"> 2405</span>&#160;            dvbydt(i,kt)  = dvbydt(i,kt) * scale_f(i)</div><div class="line"><a name="l02406"></a><span class="lineno"> 2406</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l02407"></a><span class="lineno"> 2407</span>&#160;          <span class="keywordflow">IF</span> (<a class="code" href="namespacecv__run__mod.xhtml#a9fa9c42ad2da411d2451fd13fbf43514">l_mom</a>) <span class="keywordflow">THEN</span>     <span class="comment">! required for all versions</span></div><div class="line"><a name="l02408"></a><span class="lineno"> 2408</span>&#160;            <span class="keywordflow">IF</span> (kt &lt;  kterm(i)+1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02409"></a><span class="lineno"> 2409</span>&#160;              flxkp12(i,kt) = flxkp12(i,kt) * scale_f(i)</div><div class="line"><a name="l02410"></a><span class="lineno"> 2410</span>&#160;<span class="keywordflow">            END IF</span></div><div class="line"><a name="l02411"></a><span class="lineno"> 2411</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l02412"></a><span class="lineno"> 2412</span>&#160;          <span class="keywordflow">IF</span> (l_tracer) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02413"></a><span class="lineno"> 2413</span>&#160;            <span class="keywordflow">DO</span> ktra = 1,ntra</div><div class="line"><a name="l02414"></a><span class="lineno"> 2414</span>&#160;              dtrabydt(i,kt,ktra) = dtrabydt(i,kt,ktra)*scale_f(i)</div><div class="line"><a name="l02415"></a><span class="lineno"> 2415</span>&#160;<span class="keywordflow">            END DO</span></div><div class="line"><a name="l02416"></a><span class="lineno"> 2416</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l02417"></a><span class="lineno"> 2417</span>&#160;          flx(i,kt)    = flx(i,kt) * scale_f(i)</div><div class="line"><a name="l02418"></a><span class="lineno"> 2418</span>&#160;          precip(i,kt) = precip(i,kt) * scale_f(i)</div><div class="line"><a name="l02419"></a><span class="lineno"> 2419</span>&#160;</div><div class="line"><a name="l02420"></a><span class="lineno"> 2420</span>&#160;          <span class="keywordflow">IF</span> (<a class="code" href="namespacecv__stash__flg__mod.xhtml#aaa805ef81602a9e8e678e5f68be250ee">flg_up_flx</a> .OR. <a class="code" href="namespacecv__stash__flg__mod.xhtml#a37b3464d529c8ecb00a46ae1312081bc">flg_mf_shall</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02421"></a><span class="lineno"> 2421</span>&#160;            up_flux(i,kt) = flx(i,kt)</div><div class="line"><a name="l02422"></a><span class="lineno"> 2422</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l02423"></a><span class="lineno"> 2423</span>&#160;          <span class="keywordflow">IF</span> (<a class="code" href="namespacecv__stash__flg__mod.xhtml#a594eca06c1e2300b31f8c2bba686ff1e">flg_entr_up</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02424"></a><span class="lineno"> 2424</span>&#160;            entrain_up(i,kt) = entrain_up(i,kt) * scale_f(i)</div><div class="line"><a name="l02425"></a><span class="lineno"> 2425</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l02426"></a><span class="lineno"> 2426</span>&#160;          <span class="keywordflow">IF</span> (<a class="code" href="namespacecv__stash__flg__mod.xhtml#a23946cc9e076aa4865e7ed4049aa6e81">flg_detr_up</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02427"></a><span class="lineno"> 2427</span>&#160;            detrain_up(i,kt) = detrain_up(i,kt) * scale_f(i)</div><div class="line"><a name="l02428"></a><span class="lineno"> 2428</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l02429"></a><span class="lineno"> 2429</span>&#160;</div><div class="line"><a name="l02430"></a><span class="lineno"> 2430</span>&#160;<span class="keywordflow">      END IF</span> <span class="comment">!kt&gt;ntml and flx_init_new&gt;0</span></div><div class="line"><a name="l02431"></a><span class="lineno"> 2431</span>&#160;<span class="keywordflow">    END DO</span>  <span class="comment">! i loop</span></div><div class="line"><a name="l02432"></a><span class="lineno"> 2432</span>&#160;<span class="keywordflow">  END DO</span>  <span class="comment">! kt loop</span></div><div class="line"><a name="l02433"></a><span class="lineno"> 2433</span>&#160;</div><div class="line"><a name="l02434"></a><span class="lineno"> 2434</span>&#160;  <span class="comment">! Indicate no shallow convection occurred to other processes by resetting  ! kterm after setting existing increments to zero through the above scaling.</span></div><div class="line"><a name="l02435"></a><span class="lineno"> 2435</span>&#160;  <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l02436"></a><span class="lineno"> 2436</span>&#160;    <span class="keywordflow">IF</span> (scale_f(i) &lt; 1.e-6) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02437"></a><span class="lineno"> 2437</span>&#160;      kterm(i) = 0<span class="keywordflow">    END IF</span></div><div class="line"><a name="l02438"></a><span class="lineno"> 2438</span>&#160;<span class="keywordflow">  END DO</span>   </div><div class="line"><a name="l02439"></a><span class="lineno"> 2439</span>&#160;</div><div class="line"><a name="l02440"></a><span class="lineno"> 2440</span>&#160;<span class="keywordflow">ELSE</span>    <span class="comment">! original unsafe code where failing shallow increments remain</span></div><div class="line"><a name="l02441"></a><span class="lineno"> 2441</span>&#160;  <span class="keywordflow">DO</span> kt = 2, kmax_term</div><div class="line"><a name="l02442"></a><span class="lineno"> 2442</span>&#160;    <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l02443"></a><span class="lineno"> 2443</span>&#160;       <span class="keywordflow">IF</span> (kt  &gt;=  ntml(i) .AND. kt &lt;= kterm(i)+1 .AND.                       &amp;</div><div class="line"><a name="l02444"></a><span class="lineno"> 2444</span>&#160;                                       flx_init_new(i) &gt;   0.0 ) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02445"></a><span class="lineno"> 2445</span>&#160;          dthbydt(i,kt) = dthbydt(i,kt) * scale_f(i)</div><div class="line"><a name="l02446"></a><span class="lineno"> 2446</span>&#160;          dqbydt(i,kt)  = dqbydt(i,kt) * scale_f(i)</div><div class="line"><a name="l02447"></a><span class="lineno"> 2447</span>&#160;          <span class="keywordflow">IF</span> (l_q_interact) <span class="keywordflow">THEN</span>  <span class="comment">! PC2</span></div><div class="line"><a name="l02448"></a><span class="lineno"> 2448</span>&#160;            dqclbydt(i,kt)  = dqclbydt(i,kt) * scale_f(i)</div><div class="line"><a name="l02449"></a><span class="lineno"> 2449</span>&#160;            dqcfbydt(i,kt)  = dqcfbydt(i,kt) * scale_f(i)</div><div class="line"><a name="l02450"></a><span class="lineno"> 2450</span>&#160;            dcflbydt(i,kt)  = dcflbydt(i,kt) * scale_f(i)</div><div class="line"><a name="l02451"></a><span class="lineno"> 2451</span>&#160;            dcffbydt(i,kt)  = dcffbydt(i,kt) * scale_f(i)</div><div class="line"><a name="l02452"></a><span class="lineno"> 2452</span>&#160;            dbcfbydt(i,kt)  = dbcfbydt(i,kt) * scale_f(i)</div><div class="line"><a name="l02453"></a><span class="lineno"> 2453</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l02454"></a><span class="lineno"> 2454</span>&#160;          <span class="keywordflow">IF</span> (l_mom_gk) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02455"></a><span class="lineno"> 2455</span>&#160;            dubydt(i,kt)  = dubydt(i,kt) * scale_f(i)</div><div class="line"><a name="l02456"></a><span class="lineno"> 2456</span>&#160;            dvbydt(i,kt)  = dvbydt(i,kt) * scale_f(i)</div><div class="line"><a name="l02457"></a><span class="lineno"> 2457</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l02458"></a><span class="lineno"> 2458</span>&#160;          <span class="keywordflow">IF</span> (<a class="code" href="namespacecv__run__mod.xhtml#a9fa9c42ad2da411d2451fd13fbf43514">l_mom</a>) <span class="keywordflow">THEN</span>     <span class="comment">! required for all versions</span></div><div class="line"><a name="l02459"></a><span class="lineno"> 2459</span>&#160;            <span class="keywordflow">IF</span> (kt &lt;  kterm(i)+1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02460"></a><span class="lineno"> 2460</span>&#160;              flxkp12(i,kt) = flxkp12(i,kt) * scale_f(i)</div><div class="line"><a name="l02461"></a><span class="lineno"> 2461</span>&#160;<span class="keywordflow">            END IF</span></div><div class="line"><a name="l02462"></a><span class="lineno"> 2462</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l02463"></a><span class="lineno"> 2463</span>&#160;          <span class="keywordflow">IF</span> (l_tracer) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02464"></a><span class="lineno"> 2464</span>&#160;            <span class="keywordflow">DO</span> ktra = 1,ntra</div><div class="line"><a name="l02465"></a><span class="lineno"> 2465</span>&#160;              dtrabydt(i,kt,ktra) = dtrabydt(i,kt,ktra)*scale_f(i)</div><div class="line"><a name="l02466"></a><span class="lineno"> 2466</span>&#160;<span class="keywordflow">            END DO</span></div><div class="line"><a name="l02467"></a><span class="lineno"> 2467</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l02468"></a><span class="lineno"> 2468</span>&#160;</div><div class="line"><a name="l02469"></a><span class="lineno"> 2469</span>&#160;          flx(i,kt)    = flx(i,kt) *  scale_f(i)</div><div class="line"><a name="l02470"></a><span class="lineno"> 2470</span>&#160;          precip(i,kt) = precip(i,kt) *  scale_f(i)</div><div class="line"><a name="l02471"></a><span class="lineno"> 2471</span>&#160;          <span class="keywordflow">IF</span> (<a class="code" href="namespacecv__stash__flg__mod.xhtml#aaa805ef81602a9e8e678e5f68be250ee">flg_up_flx</a> .OR. <a class="code" href="namespacecv__stash__flg__mod.xhtml#a37b3464d529c8ecb00a46ae1312081bc">flg_mf_shall</a>) <span class="keywordflow">THEN</span>                   up_flux(i,kt) = flx(i,kt)</div><div class="line"><a name="l02472"></a><span class="lineno"> 2472</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l02473"></a><span class="lineno"> 2473</span>&#160;          <span class="keywordflow">IF</span> (<a class="code" href="namespacecv__stash__flg__mod.xhtml#a594eca06c1e2300b31f8c2bba686ff1e">flg_entr_up</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02474"></a><span class="lineno"> 2474</span>&#160;            entrain_up(i,kt) = entrain_up(i,kt) * scale_f(i)</div><div class="line"><a name="l02475"></a><span class="lineno"> 2475</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l02476"></a><span class="lineno"> 2476</span>&#160;          <span class="keywordflow">IF</span> (<a class="code" href="namespacecv__stash__flg__mod.xhtml#a23946cc9e076aa4865e7ed4049aa6e81">flg_detr_up</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02477"></a><span class="lineno"> 2477</span>&#160;            detrain_up(i,kt) = detrain_up(i,kt) * scale_f(i)</div><div class="line"><a name="l02478"></a><span class="lineno"> 2478</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l02479"></a><span class="lineno"> 2479</span>&#160;<span class="keywordflow">      END IF</span> <span class="comment">!kt&gt;ntml and flx_init_new&gt;0</span></div><div class="line"><a name="l02480"></a><span class="lineno"> 2480</span>&#160;<span class="keywordflow">    END DO</span>  <span class="comment">! i loop</span></div><div class="line"><a name="l02481"></a><span class="lineno"> 2481</span>&#160;<span class="keywordflow">  END DO</span>  <span class="comment">! kt loop</span></div><div class="line"><a name="l02482"></a><span class="lineno"> 2482</span>&#160;</div><div class="line"><a name="l02483"></a><span class="lineno"> 2483</span>&#160;<span class="keywordflow">END IF</span></div><div class="line"><a name="l02484"></a><span class="lineno"> 2484</span>&#160;</div><div class="line"><a name="l02485"></a><span class="lineno"> 2485</span>&#160;<span class="comment">! Mass flux on half levelsIF (flg_up_flx_half) THEN</span></div><div class="line"><a name="l02486"></a><span class="lineno"> 2486</span>&#160;  <span class="keywordflow">DO</span> kt = 1, nlev-1</div><div class="line"><a name="l02487"></a><span class="lineno"> 2487</span>&#160;    <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l02488"></a><span class="lineno"> 2488</span>&#160;      up_flux_half(i,kt+1) = flxkp12(i,kt)</div><div class="line"><a name="l02489"></a><span class="lineno"> 2489</span>&#160;<span class="keywordflow">    END DO</span><span class="keywordflow">     END DO</span><span class="keywordflow">   END IF</span></div><div class="line"><a name="l02490"></a><span class="lineno"> 2490</span>&#160;</div><div class="line"><a name="l02491"></a><span class="lineno"> 2491</span>&#160;<span class="comment">! Scale cloud fraction</span></div><div class="line"><a name="l02492"></a><span class="lineno"> 2492</span>&#160;</div><div class="line"><a name="l02493"></a><span class="lineno"> 2493</span>&#160;<span class="keywordflow">IF</span> (<a class="code" href="namespacecv__run__mod.xhtml#a056243df9a25e9043295c5ac8042fd5b">l_ccrad</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02494"></a><span class="lineno"> 2494</span>&#160;</div><div class="line"><a name="l02495"></a><span class="lineno"> 2495</span>&#160;  <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l02496"></a><span class="lineno"> 2496</span>&#160;    cca_2d(i) = cca_2d_term(i)</div><div class="line"><a name="l02497"></a><span class="lineno"> 2497</span>&#160;    <span class="keywordflow">IF</span> (flx_init_new(i) &gt; 0.0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02498"></a><span class="lineno"> 2498</span>&#160;      cca_2d(i)  = cca_2d(i) + 0.06 * log(scale_f(i))</div><div class="line"><a name="l02499"></a><span class="lineno"> 2499</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l02500"></a><span class="lineno"> 2500</span>&#160;</div><div class="line"><a name="l02501"></a><span class="lineno"> 2501</span>&#160;    <span class="comment">! Check scaled cloud fraction not smaller than minimum value</span></div><div class="line"><a name="l02502"></a><span class="lineno"> 2502</span>&#160;    <span class="comment">! (2.0E-5) or greater than unity.</span></div><div class="line"><a name="l02503"></a><span class="lineno"> 2503</span>&#160;    <span class="comment">!</span></div><div class="line"><a name="l02504"></a><span class="lineno"> 2504</span>&#160;    <span class="comment">! (Was moved out of scaling if test to ensure these limits</span></div><div class="line"><a name="l02505"></a><span class="lineno"> 2505</span>&#160;    <span class="comment">! at all times, not just when cca_2d is scaled)</span></div><div class="line"><a name="l02506"></a><span class="lineno"> 2506</span>&#160;</div><div class="line"><a name="l02507"></a><span class="lineno"> 2507</span>&#160;    cca_2d(i) = max(2.0e-5, cca_2d(i))</div><div class="line"><a name="l02508"></a><span class="lineno"> 2508</span>&#160;    cca_2d(i) = min(1.0e+0, cca_2d(i))</div><div class="line"><a name="l02509"></a><span class="lineno"> 2509</span>&#160;<span class="keywordflow">  END DO</span>      <span class="comment">! i</span></div><div class="line"><a name="l02510"></a><span class="lineno"> 2510</span>&#160;</div><div class="line"><a name="l02511"></a><span class="lineno"> 2511</span>&#160;<span class="keywordflow">ELSE</span>      <span class="comment">! original</span></div><div class="line"><a name="l02512"></a><span class="lineno"> 2512</span>&#160;</div><div class="line"><a name="l02513"></a><span class="lineno"> 2513</span>&#160;  <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l02514"></a><span class="lineno"> 2514</span>&#160;    cca_2d(i) = cca_2d_term(i)</div><div class="line"><a name="l02515"></a><span class="lineno"> 2515</span>&#160;    <span class="keywordflow">IF</span> (flx_init_new(i) &gt; 0.0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02516"></a><span class="lineno"> 2516</span>&#160;      cca_2d(i)  = cca_2d(i) + 0.06 * log(scale_f(i))</div><div class="line"><a name="l02517"></a><span class="lineno"> 2517</span>&#160;</div><div class="line"><a name="l02518"></a><span class="lineno"> 2518</span>&#160;      <span class="comment">! Check scaled cloud fraction not smaller than minimum value</span></div><div class="line"><a name="l02519"></a><span class="lineno"> 2519</span>&#160;      <span class="comment">! (2.0E-5) or greater than unity.</span></div><div class="line"><a name="l02520"></a><span class="lineno"> 2520</span>&#160;</div><div class="line"><a name="l02521"></a><span class="lineno"> 2521</span>&#160;      cca_2d(i) = max(2.0e-5, cca_2d(i))</div><div class="line"><a name="l02522"></a><span class="lineno"> 2522</span>&#160;      <span class="keywordflow">IF</span> (cca_2d(i) &gt; 1.0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02523"></a><span class="lineno"> 2523</span>&#160;        cca_2d(i) = 1.0</div><div class="line"><a name="l02524"></a><span class="lineno"> 2524</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l02525"></a><span class="lineno"> 2525</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l02526"></a><span class="lineno"> 2526</span>&#160;<span class="keywordflow">  END DO</span>      <span class="comment">! i</span></div><div class="line"><a name="l02527"></a><span class="lineno"> 2527</span>&#160;</div><div class="line"><a name="l02528"></a><span class="lineno"> 2528</span>&#160;<span class="keywordflow">END IF</span>      <span class="comment">! l_ccrad</span></div><div class="line"><a name="l02529"></a><span class="lineno"> 2529</span>&#160;</div><div class="line"><a name="l02530"></a><span class="lineno"> 2530</span>&#160;</div><div class="line"><a name="l02531"></a><span class="lineno"> 2531</span>&#160;</div><div class="line"><a name="l02532"></a><span class="lineno"> 2532</span>&#160;<span class="comment">! 5.0 All shallow convection will terminate at some level. This level</span></div><div class="line"><a name="l02533"></a><span class="lineno"> 2533</span>&#160;<span class="comment">!     has been stored in the main level loop.</span></div><div class="line"><a name="l02534"></a><span class="lineno"> 2534</span>&#160;<span class="comment">!     The convection will either have a down draught or none will be</span></div><div class="line"><a name="l02535"></a><span class="lineno"> 2535</span>&#160;<span class="comment">!     possible.</span></div><div class="line"><a name="l02536"></a><span class="lineno"> 2536</span>&#160;</div><div class="line"><a name="l02537"></a><span class="lineno"> 2537</span>&#160;</div><div class="line"><a name="l02538"></a><span class="lineno"> 2538</span>&#160;<span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l02539"></a><span class="lineno"> 2539</span>&#160;  <span class="keywordflow">IF</span> (kterm(i) &gt;= ntml(i)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02540"></a><span class="lineno"> 2540</span>&#160;    k = kterm(i)</div><div class="line"><a name="l02541"></a><span class="lineno"> 2541</span>&#160;    tempnum=0.0    <span class="comment">! stores total column precipitation from convection         IF (iccb(i) &gt;  0) THEN</span></div><div class="line"><a name="l02542"></a><span class="lineno"> 2542</span>&#160;      deltap_cld=p_layer_centres(i,iccb(i)) -p_layer_centres(i,k)</div><div class="line"><a name="l02543"></a><span class="lineno"> 2543</span>&#160;      <span class="keywordflow">DO</span> kt=iccb(i),k+1</div><div class="line"><a name="l02544"></a><span class="lineno"> 2544</span>&#160;        tempnum = tempnum + precip(i,kt)</div><div class="line"><a name="l02545"></a><span class="lineno"> 2545</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l02546"></a><span class="lineno"> 2546</span>&#160;    <span class="keywordflow">ELSE</span></div><div class="line"><a name="l02547"></a><span class="lineno"> 2547</span>&#160;      deltap_cld = 0.0</div><div class="line"><a name="l02548"></a><span class="lineno"> 2548</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l02549"></a><span class="lineno"> 2549</span>&#160;</div><div class="line"><a name="l02550"></a><span class="lineno"> 2550</span>&#160;    <span class="comment">! Set logicals for use later</span></div><div class="line"><a name="l02551"></a><span class="lineno"> 2551</span>&#160;    <span class="comment">! Downdraughts allowed in the cloud depth &gt; 15km</span></div><div class="line"><a name="l02552"></a><span class="lineno"> 2552</span>&#160;    <span class="comment">! and the total column precipitation is &gt; 1e-12.</span></div><div class="line"><a name="l02553"></a><span class="lineno"> 2553</span>&#160;    <span class="keywordflow">IF</span> (deltap_cld &gt;  15000.0 .AND. bgmk_term(i) .AND.tempnum &gt;  1e-12) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02554"></a><span class="lineno"> 2554</span>&#160;      b_dd(i) = .true.</div><div class="line"><a name="l02555"></a><span class="lineno"> 2555</span>&#160;    <span class="keywordflow">ELSE</span>     <span class="comment">! If no downdraught then go through evaporation below cloud base only</span></div><div class="line"><a name="l02556"></a><span class="lineno"> 2556</span>&#160;      b_nodd(i) = .true.</div><div class="line"><a name="l02557"></a><span class="lineno"> 2557</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l02558"></a><span class="lineno"> 2558</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l02559"></a><span class="lineno"> 2559</span>&#160;<span class="keywordflow">END DO</span>  <span class="comment">! n_sh</span></div><div class="line"><a name="l02560"></a><span class="lineno"> 2560</span>&#160;</div><div class="line"><a name="l02561"></a><span class="lineno"> 2561</span>&#160;<span class="keywordflow">IF</span> (<a class="code" href="namespacecv__run__mod.xhtml#a3be02974c6903b96e25497f83d4efdb0">l_safe_conv</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02562"></a><span class="lineno"> 2562</span>&#160;  <span class="comment">! Overrule b_nodd if shallow convection not real for the column</span></div><div class="line"><a name="l02563"></a><span class="lineno"> 2563</span>&#160;  <span class="comment">! so that neither the downdraught nor the evaporation below cloud base is</span></div><div class="line"><a name="l02564"></a><span class="lineno"> 2564</span>&#160;  <span class="comment">! called for failed shallow points.</span></div><div class="line"><a name="l02565"></a><span class="lineno"> 2565</span>&#160;    <span class="keywordflow">DO</span> i = 1,n_sh       <span class="keywordflow">IF</span> (b_nodd(i) .AND. scale_f(i) &lt; 1.0e-6) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02566"></a><span class="lineno"> 2566</span>&#160;      b_nodd(i) = .false.</div><div class="line"><a name="l02567"></a><span class="lineno"> 2567</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l02568"></a><span class="lineno"> 2568</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l02569"></a><span class="lineno"> 2569</span>&#160;  <span class="comment">! Find out which points have real shallow convection</span></div><div class="line"><a name="l02570"></a><span class="lineno"> 2570</span>&#160;  n_real_sh=0</div><div class="line"><a name="l02571"></a><span class="lineno"> 2571</span>&#160;  <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l02572"></a><span class="lineno"> 2572</span>&#160;    <span class="keywordflow">IF</span> (scale_f(i) &gt;= 1.0e-6) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02573"></a><span class="lineno"> 2573</span>&#160;      n_real_sh=n_real_sh+1</div><div class="line"><a name="l02574"></a><span class="lineno"> 2574</span>&#160;      index1(n_real_sh) = i</div><div class="line"><a name="l02575"></a><span class="lineno"> 2575</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l02576"></a><span class="lineno"> 2576</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l02577"></a><span class="lineno"> 2577</span>&#160;<span class="keywordflow">ELSE</span></div><div class="line"><a name="l02578"></a><span class="lineno"> 2578</span>&#160;  n_real_sh = n_sh</div><div class="line"><a name="l02579"></a><span class="lineno"> 2579</span>&#160;  <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l02580"></a><span class="lineno"> 2580</span>&#160;    index1(i) = i</div><div class="line"><a name="l02581"></a><span class="lineno"> 2581</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l02582"></a><span class="lineno"> 2582</span>&#160;<span class="keywordflow">END IF</span></div><div class="line"><a name="l02583"></a><span class="lineno"> 2583</span>&#160;</div><div class="line"><a name="l02584"></a><span class="lineno"> 2584</span>&#160;</div><div class="line"><a name="l02585"></a><span class="lineno"> 2585</span>&#160;<span class="comment">! 5.1  Downdraft calculation - on all points where convection is</span></div><div class="line"><a name="l02586"></a><span class="lineno"> 2586</span>&#160;<span class="comment">!      terminating.</span></div><div class="line"><a name="l02587"></a><span class="lineno"> 2587</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l02588"></a><span class="lineno"> 2588</span>&#160;<span class="comment">!      Subroutine DD_ALL_CALL</span></div><div class="line"><a name="l02589"></a><span class="lineno"> 2589</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l02590"></a><span class="lineno"> 2590</span>&#160;<span class="comment">!      UM Documentation Paper 27, part 2</span></div><div class="line"><a name="l02591"></a><span class="lineno"> 2591</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l02592"></a><span class="lineno"> 2592</span>&#160;</div><div class="line"><a name="l02593"></a><span class="lineno"> 2593</span>&#160;</div><div class="line"><a name="l02594"></a><span class="lineno"> 2594</span>&#160;npossdd = 0</div><div class="line"><a name="l02595"></a><span class="lineno"> 2595</span>&#160;<span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l02596"></a><span class="lineno"> 2596</span>&#160;  <span class="keywordflow">IF</span> (b_dd(i)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02597"></a><span class="lineno"> 2597</span>&#160;    npossdd = npossdd +1</div><div class="line"><a name="l02598"></a><span class="lineno"> 2598</span>&#160;    index_possdd(npossdd) = i</div><div class="line"><a name="l02599"></a><span class="lineno"> 2599</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l02600"></a><span class="lineno"> 2600</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l02601"></a><span class="lineno"> 2601</span>&#160;</div><div class="line"><a name="l02602"></a><span class="lineno"> 2602</span>&#160;<span class="keywordflow">IF</span> (npossdd  &gt;   0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02603"></a><span class="lineno"> 2603</span>&#160;</div><div class="line"><a name="l02604"></a><span class="lineno"> 2604</span>&#160;<span class="comment">! Work out maximum termination level</span></div><div class="line"><a name="l02605"></a><span class="lineno"> 2605</span>&#160;  kmax_term = 2</div><div class="line"><a name="l02606"></a><span class="lineno"> 2606</span>&#160;  <span class="keywordflow">DO</span> i = 1,npossdd</div><div class="line"><a name="l02607"></a><span class="lineno"> 2607</span>&#160;    <span class="keywordflow">IF</span>(kterm(index_possdd(i)) &gt;  kmax_term) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02608"></a><span class="lineno"> 2608</span>&#160;      kmax_term = kterm(index_possdd(i))</div><div class="line"><a name="l02609"></a><span class="lineno"> 2609</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l02610"></a><span class="lineno"> 2610</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l02611"></a><span class="lineno"> 2611</span>&#160;</div><div class="line"><a name="l02612"></a><span class="lineno"> 2612</span>&#160;<span class="comment">! DEPENDS ON: dd_all_call_4a5a</span></div><div class="line"><a name="l02613"></a><span class="lineno"> 2613</span>&#160;  <span class="keyword">CALL </span><a class="code" href="dd__all__call-ddacall4a_8f90.xhtml#a4a0e694e2611b3af952879d33dfc1867" title="Calculate initial Downdraught massflux. ">dd_all_call_4a5a</a>(n_sh,npossdd,kmax_term,nlev,trlev,ntra    &amp;</div><div class="line"><a name="l02614"></a><span class="lineno"> 2614</span>&#160;                  , kterm,iccb,icct,index_possdd,l_tracer         &amp;</div><div class="line"><a name="l02615"></a><span class="lineno"> 2615</span>&#160;                  , bwater(1,2),exner_layer_centres               &amp;</div><div class="line"><a name="l02616"></a><span class="lineno"> 2616</span>&#160;                  , exner_layer_boundaries,p_layer_centres        &amp;</div><div class="line"><a name="l02617"></a><span class="lineno"> 2617</span>&#160;                  , p_layer_boundaries,pstar,recip_pstar,timestep &amp;</div><div class="line"><a name="l02618"></a><span class="lineno"> 2618</span>&#160;                  , cca_2d,thp,qp,th,q,qse,trap,tracer,flx,precip &amp;</div><div class="line"><a name="l02619"></a><span class="lineno"> 2619</span>&#160;                  , dthbydt,dqbydt,dtrabydt,rain,snow,rain_3d     &amp;</div><div class="line"><a name="l02620"></a><span class="lineno"> 2620</span>&#160;                  , snow_3d,dwn_flux,entrain_dwn,detrain_dwn)</div><div class="line"><a name="l02621"></a><span class="lineno"> 2621</span>&#160;</div><div class="line"><a name="l02622"></a><span class="lineno"> 2622</span>&#160;<span class="keywordflow">END IF</span></div><div class="line"><a name="l02623"></a><span class="lineno"> 2623</span>&#160;</div><div class="line"><a name="l02624"></a><span class="lineno"> 2624</span>&#160;</div><div class="line"><a name="l02625"></a><span class="lineno"> 2625</span>&#160;<span class="comment">! 5.2 Surface precipitation calculation for terminating points with</span></div><div class="line"><a name="l02626"></a><span class="lineno"> 2626</span>&#160;<span class="comment">!     no downdraught (moved outside level loop) ie do this calculation</span></div><div class="line"><a name="l02627"></a><span class="lineno"> 2627</span>&#160;<span class="comment">!     on all points at the end.</span></div><div class="line"><a name="l02628"></a><span class="lineno"> 2628</span>&#160;</div><div class="line"><a name="l02629"></a><span class="lineno"> 2629</span>&#160;<span class="comment">! Points where no downdraught possible</span></div><div class="line"><a name="l02630"></a><span class="lineno"> 2630</span>&#160;nnodd = 0</div><div class="line"><a name="l02631"></a><span class="lineno"> 2631</span>&#160;<span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l02632"></a><span class="lineno"> 2632</span>&#160;</div><div class="line"><a name="l02633"></a><span class="lineno"> 2633</span>&#160;  <span class="keywordflow">IF</span> (b_nodd(i)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02634"></a><span class="lineno"> 2634</span>&#160;    nnodd = nnodd +1</div><div class="line"><a name="l02635"></a><span class="lineno"> 2635</span>&#160;    index_nodd(nnodd) = i</div><div class="line"><a name="l02636"></a><span class="lineno"> 2636</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l02637"></a><span class="lineno"> 2637</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l02638"></a><span class="lineno"> 2638</span>&#160;</div><div class="line"><a name="l02639"></a><span class="lineno"> 2639</span>&#160;<span class="keywordflow">IF</span> (nnodd  &gt;   0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02640"></a><span class="lineno"> 2640</span>&#160;</div><div class="line"><a name="l02641"></a><span class="lineno"> 2641</span>&#160;<span class="comment">! Work out maximum termination level</span></div><div class="line"><a name="l02642"></a><span class="lineno"> 2642</span>&#160;  kmax_term = 2</div><div class="line"><a name="l02643"></a><span class="lineno"> 2643</span>&#160;  <span class="keywordflow">DO</span> i = 1,nnodd</div><div class="line"><a name="l02644"></a><span class="lineno"> 2644</span>&#160;    <span class="keywordflow">IF</span>(kterm(index_nodd(i)) &gt;  kmax_term) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02645"></a><span class="lineno"> 2645</span>&#160;      kmax_term = kterm(index_nodd(i))</div><div class="line"><a name="l02646"></a><span class="lineno"> 2646</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l02647"></a><span class="lineno"> 2647</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l02648"></a><span class="lineno"> 2648</span>&#160;<span class="comment">! Only add 1 if kmax_term is less than model levels (which should be</span></div><div class="line"><a name="l02649"></a><span class="lineno"> 2649</span>&#160;<span class="comment">! true).</span></div><div class="line"><a name="l02650"></a><span class="lineno"> 2650</span>&#160;  <span class="keywordflow">IF</span> (kmax_term  &lt;  nlev ) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02651"></a><span class="lineno"> 2651</span>&#160;    kmax_term = kmax_term + 1</div><div class="line"><a name="l02652"></a><span class="lineno"> 2652</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l02653"></a><span class="lineno"> 2653</span>&#160;</div><div class="line"><a name="l02654"></a><span class="lineno"> 2654</span>&#160;</div><div class="line"><a name="l02655"></a><span class="lineno"> 2655</span>&#160;<span class="comment">! Surface precipitation calculation</span></div><div class="line"><a name="l02656"></a><span class="lineno"> 2656</span>&#160;</div><div class="line"><a name="l02657"></a><span class="lineno"> 2657</span>&#160;<span class="comment">! DEPENDS ON: evap_bcb_nodd_all</span></div><div class="line"><a name="l02658"></a><span class="lineno"> 2658</span>&#160;  <span class="keyword">CALL </span><a class="code" href="evap__bcb__nodd__all-evpuda4a_8f90.xhtml#abd8af24087010617f11d2e80bf76170e" title="Calculate convective precipitation reaching the surface. ">evap_bcb_nodd_all</a>(n_sh,nnodd,kmax_term,kterm               &amp;</div><div class="line"><a name="l02659"></a><span class="lineno"> 2659</span>&#160;,                      iccb, index_nodd, bwater(1,2)              &amp;</div><div class="line"><a name="l02660"></a><span class="lineno"> 2660</span>&#160;,                      exner_layer_centres,exner_layer_boundaries &amp;</div><div class="line"><a name="l02661"></a><span class="lineno"> 2661</span>&#160;,                      p_layer_centres, p_layer_boundaries,pstar  &amp;</div><div class="line"><a name="l02662"></a><span class="lineno"> 2662</span>&#160;,                      timestep , cca_2d, th, q, qse, precip      &amp;</div><div class="line"><a name="l02663"></a><span class="lineno"> 2663</span>&#160;,                      dthbydt, dqbydt                            &amp;</div><div class="line"><a name="l02664"></a><span class="lineno"> 2664</span>&#160;,                      rain, snow, rain_3d, snow_3d)</div><div class="line"><a name="l02665"></a><span class="lineno"> 2665</span>&#160;<span class="keywordflow">END IF</span></div><div class="line"><a name="l02666"></a><span class="lineno"> 2666</span>&#160;</div><div class="line"><a name="l02667"></a><span class="lineno"> 2667</span>&#160;</div><div class="line"><a name="l02668"></a><span class="lineno"> 2668</span>&#160;<span class="comment">! 6.0  Convective Momentum Transport (if L_mom = .T.)</span></div><div class="line"><a name="l02669"></a><span class="lineno"> 2669</span>&#160;</div><div class="line"><a name="l02670"></a><span class="lineno"> 2670</span>&#160;</div><div class="line"><a name="l02671"></a><span class="lineno"> 2671</span>&#160;<span class="keywordflow">IF</span> (<a class="code" href="namespacecv__run__mod.xhtml#a9fa9c42ad2da411d2451fd13fbf43514">l_mom</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02672"></a><span class="lineno"> 2672</span>&#160;  nterm = 0</div><div class="line"><a name="l02673"></a><span class="lineno"> 2673</span>&#160;</div><div class="line"><a name="l02674"></a><span class="lineno"> 2674</span>&#160;  <span class="keywordflow">DO</span> i = 1, n_sh</div><div class="line"><a name="l02675"></a><span class="lineno"> 2675</span>&#160;    <span class="comment">! Only do CMT for points where shallow convection has occurred</span></div><div class="line"><a name="l02676"></a><span class="lineno"> 2676</span>&#160;    <span class="comment">! Will not do for cases of failed shallow</span></div><div class="line"><a name="l02677"></a><span class="lineno"> 2677</span>&#160;    <span class="keywordflow">IF</span> (ind_shall(i) == 1.0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02678"></a><span class="lineno"> 2678</span>&#160;      nterm = nterm + 1</div><div class="line"><a name="l02679"></a><span class="lineno"> 2679</span>&#160;      cu_term(nterm) = i</div><div class="line"><a name="l02680"></a><span class="lineno"> 2680</span>&#160;      cu_tend(nterm) = i</div><div class="line"><a name="l02681"></a><span class="lineno"> 2681</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l02682"></a><span class="lineno"> 2682</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l02683"></a><span class="lineno"> 2683</span>&#160;</div><div class="line"><a name="l02684"></a><span class="lineno"> 2684</span>&#160;  <span class="keywordflow">IF</span> (nterm  &gt;   0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02685"></a><span class="lineno"> 2685</span>&#160;</div><div class="line"><a name="l02686"></a><span class="lineno"> 2686</span>&#160;<span class="comment">! DEPENDS ON: shallow_grad_stress</span></div><div class="line"><a name="l02687"></a><span class="lineno"> 2687</span>&#160;    <span class="keyword">CALL </span><a class="code" href="shallow__grad__stress-sgrdstrs4a_8f90.xhtml#a1067d98886c47eb0f8815c82592b6f4b" title="*****************************COPYRIGHT****************************** *****************************COP...">shallow_grad_stress</a>(n_sh,n_sh,nterm,nlev,cu_term,        &amp;</div><div class="line"><a name="l02688"></a><span class="lineno"> 2688</span>&#160;                             nlcl_uv,ntop_uv,mb,wsc,wstar,zcld,   &amp;</div><div class="line"><a name="l02689"></a><span class="lineno"> 2689</span>&#160;                             plcl_uv,ptop_uv,p_uv,phalf_uv,       &amp;</div><div class="line"><a name="l02690"></a><span class="lineno"> 2690</span>&#160;                             rho_uv,ue_p,ve_p,timestep,           &amp;</div><div class="line"><a name="l02691"></a><span class="lineno"> 2691</span>&#160;                             <span class="comment">! IN</span></div><div class="line"><a name="l02692"></a><span class="lineno"> 2692</span>&#160;                             uw,vw)</div><div class="line"><a name="l02693"></a><span class="lineno"> 2693</span>&#160;</div><div class="line"><a name="l02694"></a><span class="lineno"> 2694</span>&#160;<span class="comment">! DEPENDS ON: shallow_base_stress</span></div><div class="line"><a name="l02695"></a><span class="lineno"> 2695</span>&#160;    <span class="keyword">CALL </span><a class="code" href="shallow__base__stress-shbsstrs4a_8f90.xhtml#ae657c4ba98e56c4e8a438c35cfe99b0c" title="*****************************COPYRIGHT****************************** *****************************COP...">shallow_base_stress</a>(n_sh,n_sh,n_sh,nlev,nterm,cu_term,   &amp;</div><div class="line"><a name="l02696"></a><span class="lineno"> 2696</span>&#160;                             cu_tend,nlcl_uv,ntop_uv,mb,wsc,      &amp;</div><div class="line"><a name="l02697"></a><span class="lineno"> 2697</span>&#160;                             zlcl_uv,zcld,uw0,vw0,plcl_uv,        &amp;</div><div class="line"><a name="l02698"></a><span class="lineno"> 2698</span>&#160;                             ptop_uv,ue_p,ve_p,phalf_uv,p_uv,     &amp;</div><div class="line"><a name="l02699"></a><span class="lineno"> 2699</span>&#160;                             rho_uv,timestep,                     &amp;</div><div class="line"><a name="l02700"></a><span class="lineno"> 2700</span>&#160;                             <span class="comment">! INOUT</span></div><div class="line"><a name="l02701"></a><span class="lineno"> 2701</span>&#160;                             uw,vw,                               &amp;</div><div class="line"><a name="l02702"></a><span class="lineno"> 2702</span>&#160;                             <span class="comment">! OUT</span></div><div class="line"><a name="l02703"></a><span class="lineno"> 2703</span>&#160;                             uw_shall,vw_shall)</div><div class="line"><a name="l02704"></a><span class="lineno"> 2704</span>&#160;</div><div class="line"><a name="l02705"></a><span class="lineno"> 2705</span>&#160;<span class="comment">! DEPENDS ON: shallow_cmt_incr</span></div><div class="line"><a name="l02706"></a><span class="lineno"> 2706</span>&#160;    <span class="keyword">CALL </span><a class="code" href="shallow__cmt__incr-shcmtinc4a_8f90.xhtml#a20063748332a1717dd4237441cb75a33" title="*****************************COPYRIGHT****************************** *****************************COP...">shallow_cmt_incr</a>(n_sh,n_sh,n_sh,nlev,nterm,cu_term,      &amp;</div><div class="line"><a name="l02707"></a><span class="lineno"> 2707</span>&#160;                          cu_tend,nlcl_uv,ntop_uv,uw,vw,phalf_uv, &amp;</div><div class="line"><a name="l02708"></a><span class="lineno"> 2708</span>&#160;                          rho_uv,zlcl_uv,                         &amp;</div><div class="line"><a name="l02709"></a><span class="lineno"> 2709</span>&#160;                          <span class="comment">!OUT</span></div><div class="line"><a name="l02710"></a><span class="lineno"> 2710</span>&#160;                          dubydt,dvbydt)</div><div class="line"><a name="l02711"></a><span class="lineno"> 2711</span>&#160;</div><div class="line"><a name="l02712"></a><span class="lineno"> 2712</span>&#160;<span class="keywordflow">  END IF</span>  <span class="comment">! nterm&gt;0</span></div><div class="line"><a name="l02713"></a><span class="lineno"> 2713</span>&#160;<span class="keywordflow">END IF</span> <span class="comment">! L_mom</span></div><div class="line"><a name="l02714"></a><span class="lineno"> 2714</span>&#160;</div><div class="line"><a name="l02715"></a><span class="lineno"> 2715</span>&#160;</div><div class="line"><a name="l02716"></a><span class="lineno"> 2716</span>&#160;</div><div class="line"><a name="l02717"></a><span class="lineno"> 2717</span>&#160;<span class="comment">! 7.0  Total water conservation  - also works on whole column</span></div><div class="line"><a name="l02718"></a><span class="lineno"> 2718</span>&#160;</div><div class="line"><a name="l02719"></a><span class="lineno"> 2719</span>&#160;</div><div class="line"><a name="l02720"></a><span class="lineno"> 2720</span>&#160;<span class="comment">! only check columns where convection has occurred.</span></div><div class="line"><a name="l02721"></a><span class="lineno"> 2721</span>&#160;</div><div class="line"><a name="l02722"></a><span class="lineno"> 2722</span>&#160;<span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l02723"></a><span class="lineno"> 2723</span>&#160;  qminincolumn(i) = q(i,nlev)</div><div class="line"><a name="l02724"></a><span class="lineno"> 2724</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l02725"></a><span class="lineno"> 2725</span>&#160;<span class="keywordflow">DO</span> k = 1,nlev-1</div><div class="line"><a name="l02726"></a><span class="lineno"> 2726</span>&#160;  <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l02727"></a><span class="lineno"> 2727</span>&#160;    <span class="keywordflow">IF</span> (q(i,k)  &lt;   qminincolumn(i)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02728"></a><span class="lineno"> 2728</span>&#160;      qminincolumn(i) = q(i,k)</div><div class="line"><a name="l02729"></a><span class="lineno"> 2729</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l02730"></a><span class="lineno"> 2730</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l02731"></a><span class="lineno"> 2731</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l02732"></a><span class="lineno"> 2732</span>&#160;</div><div class="line"><a name="l02733"></a><span class="lineno"> 2733</span>&#160;<span class="comment">! Ensure Q does not go below global allowed minimum (QMIN)</span></div><div class="line"><a name="l02734"></a><span class="lineno"> 2734</span>&#160;</div><div class="line"><a name="l02735"></a><span class="lineno"> 2735</span>&#160;<span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l02736"></a><span class="lineno"> 2736</span>&#160;  qminincolumn(i)=max(qmin,qminincolumn(i))</div><div class="line"><a name="l02737"></a><span class="lineno"> 2737</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l02738"></a><span class="lineno"> 2738</span>&#160;</div><div class="line"><a name="l02739"></a><span class="lineno"> 2739</span>&#160;<span class="comment">! Apply an artificial upwards flux from k-1 level to ensure Q</span></div><div class="line"><a name="l02740"></a><span class="lineno"> 2740</span>&#160;<span class="comment">! remians above minimum value in the column.</span></div><div class="line"><a name="l02741"></a><span class="lineno"> 2741</span>&#160;</div><div class="line"><a name="l02742"></a><span class="lineno"> 2742</span>&#160;<span class="keywordflow">DO</span> k = nlev,2,-1</div><div class="line"><a name="l02743"></a><span class="lineno"> 2743</span>&#160;  <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l02744"></a><span class="lineno"> 2744</span>&#160;    <span class="keywordflow">IF</span> (dqbydt(i,k) /= 0.0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02745"></a><span class="lineno"> 2745</span>&#160;      temp1(i)=q(i,k) + dqbydt(i,k) * timestep</div><div class="line"><a name="l02746"></a><span class="lineno"> 2746</span>&#160;      <span class="keywordflow">IF</span> (temp1(i)  &lt;   qminincolumn(i)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02747"></a><span class="lineno"> 2747</span>&#160;</div><div class="line"><a name="l02748"></a><span class="lineno"> 2748</span>&#160;        dqbydt(i,k-1) = dqbydt(i,k-1) -                         &amp;</div><div class="line"><a name="l02749"></a><span class="lineno"> 2749</span>&#160;            ((qminincolumn(i) - q(i,k)) / timestep-dqbydt(i,k)) &amp;</div><div class="line"><a name="l02750"></a><span class="lineno"> 2750</span>&#160;             * (r2rho_th(i,k)*dr_across_th(i,k))                &amp;</div><div class="line"><a name="l02751"></a><span class="lineno"> 2751</span>&#160;               / (r2rho_th(i,k-1)*dr_across_th(i,k-1))</div><div class="line"><a name="l02752"></a><span class="lineno"> 2752</span>&#160;</div><div class="line"><a name="l02753"></a><span class="lineno"> 2753</span>&#160;        dqbydt(i,k) = (qminincolumn(i) - q(i,k)) / timestep</div><div class="line"><a name="l02754"></a><span class="lineno"> 2754</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l02755"></a><span class="lineno"> 2755</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l02756"></a><span class="lineno"> 2756</span>&#160;<span class="keywordflow">  END DO</span> <span class="comment">! n_s loop</span></div><div class="line"><a name="l02757"></a><span class="lineno"> 2757</span>&#160;<span class="keywordflow">END DO</span>  <span class="comment">! nlev</span></div><div class="line"><a name="l02758"></a><span class="lineno"> 2758</span>&#160;</div><div class="line"><a name="l02759"></a><span class="lineno"> 2759</span>&#160;<span class="comment">! check negative q</span></div><div class="line"><a name="l02760"></a><span class="lineno"> 2760</span>&#160;</div><div class="line"><a name="l02761"></a><span class="lineno"> 2761</span>&#160;k=1</div><div class="line"><a name="l02762"></a><span class="lineno"> 2762</span>&#160;  <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l02763"></a><span class="lineno"> 2763</span>&#160;    temp1(i)=q(i,k) + dqbydt(i,k) * timestep</div><div class="line"><a name="l02764"></a><span class="lineno"> 2764</span>&#160;    <span class="keywordflow">IF</span> (temp1(i)  &lt;   qminincolumn(i) .AND.                            &amp;</div><div class="line"><a name="l02765"></a><span class="lineno"> 2765</span>&#160;        <a class="code" href="namespaceumprintmgr.xhtml#a956d5068b5b528afc5bed1435ced4b99" title="$OMP THREADPRIVATE (umMessage) ">printstatus</a> &gt;= <a class="code" href="namespaceumprintmgr.xhtml#a37cb52502caf8231c6f528593a6df588">prstatus_normal</a> ) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02766"></a><span class="lineno"> 2766</span>&#160;      <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(a21,i6,a9,g26.18,a7,g26.18)&#39;</span>) <span class="stringliteral">&#39; negative q shall, i:&#39;</span>,  &amp;</div><div class="line"><a name="l02767"></a><span class="lineno"> 2767</span>&#160;            i,<span class="stringliteral">&#39; q after &#39;</span>,temp1(i),<span class="stringliteral">&#39; dq/dt &#39;</span>,dqbydt(i,k)</div><div class="line"><a name="l02768"></a><span class="lineno"> 2768</span>&#160;      <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;shallow_conv-shconv5a&#39;</span>)</div><div class="line"><a name="l02769"></a><span class="lineno"> 2769</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l02770"></a><span class="lineno"> 2770</span>&#160;<span class="keywordflow">  END DO</span> <span class="comment">! n_sh loop</span></div><div class="line"><a name="l02771"></a><span class="lineno"> 2771</span>&#160;</div><div class="line"><a name="l02772"></a><span class="lineno"> 2772</span>&#160;<span class="comment">! 8.0  Mixing of the convective increments in the boundary</span></div><div class="line"><a name="l02773"></a><span class="lineno"> 2773</span>&#160;<span class="comment">!      layer.</span></div><div class="line"><a name="l02774"></a><span class="lineno"> 2774</span>&#160;</div><div class="line"><a name="l02775"></a><span class="lineno"> 2775</span>&#160;</div><div class="line"><a name="l02776"></a><span class="lineno"> 2776</span>&#160;<span class="keywordflow">IF</span> (<a class="code" href="namespacecv__run__mod.xhtml#adf12c4d96378c409f40e87de2282a982">bl_cnv_mix</a> == 1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02777"></a><span class="lineno"> 2777</span>&#160;</div><div class="line"><a name="l02778"></a><span class="lineno"> 2778</span>&#160;<span class="comment">!      Mixes the increments from the initial parcel perturbation throughout</span></div><div class="line"><a name="l02779"></a><span class="lineno"> 2779</span>&#160;<span class="comment">!      the subcloud layer if this option is selected.</span></div><div class="line"><a name="l02780"></a><span class="lineno"> 2780</span>&#160;</div><div class="line"><a name="l02781"></a><span class="lineno"> 2781</span>&#160;<span class="comment">! DEPENDS ON: mix_ipert_4a5a</span></div><div class="line"><a name="l02782"></a><span class="lineno"> 2782</span>&#160;  <span class="keyword">CALL </span><a class="code" href="mix__ipert_8f90.xhtml#ab0f6e6ba8b9426bc570bb2a56159af66" title="-!&gt; (c) Crown copyright Met Office. All rights reserved. -!&gt; (c) Crown copyright Met Office...">mix_ipert_4a5a</a>(n_sh, n_real_sh, nlev, nbl, ntml, index1,        &amp;</div><div class="line"><a name="l02783"></a><span class="lineno"> 2783</span>&#160;                      p_layer_boundaries,                              &amp;</div><div class="line"><a name="l02784"></a><span class="lineno"> 2784</span>&#160;                      exner_layer_centres, dthbydt, dqbydt, flx_init,  &amp;</div><div class="line"><a name="l02785"></a><span class="lineno"> 2785</span>&#160;                      thpert, qpert)</div><div class="line"><a name="l02786"></a><span class="lineno"> 2786</span>&#160;</div><div class="line"><a name="l02787"></a><span class="lineno"> 2787</span>&#160;<span class="keywordflow">ELSE</span></div><div class="line"><a name="l02788"></a><span class="lineno"> 2788</span>&#160;</div><div class="line"><a name="l02789"></a><span class="lineno"> 2789</span>&#160;<span class="comment">!      Mixes convective increments in the boundary</span></div><div class="line"><a name="l02790"></a><span class="lineno"> 2790</span>&#160;<span class="comment">!      layer (essentially distributes incr. at ntml over layers 1 to</span></div><div class="line"><a name="l02791"></a><span class="lineno"> 2791</span>&#160;<span class="comment">!      ntml e.g. incr(1) = incr(2) = incr(ntml)/ntml)</span></div><div class="line"><a name="l02792"></a><span class="lineno"> 2792</span>&#160;<span class="comment">!      Works on boundary layer - columns integrals involved.</span></div><div class="line"><a name="l02793"></a><span class="lineno"> 2793</span>&#160;</div><div class="line"><a name="l02794"></a><span class="lineno"> 2794</span>&#160;<span class="comment">! DEPENDS ON: mix_inc</span></div><div class="line"><a name="l02795"></a><span class="lineno"> 2795</span>&#160;  <span class="keyword">CALL </span><a class="code" href="mix__inc-mixinc3c_8f90.xhtml#a25edd1c471a3847f98f8957ed0d34048">mix_inc</a> (n_sh,n_sh,n_sh,nlev,nbl,ntml,                       &amp;</div><div class="line"><a name="l02796"></a><span class="lineno"> 2796</span>&#160;               dthbydt,dqbydt,dubydt,dvbydt,l_tracer,ntra,dtrabydt, &amp;</div><div class="line"><a name="l02797"></a><span class="lineno"> 2797</span>&#160;               p_layer_boundaries,p_layer_centres,index1)</div><div class="line"><a name="l02798"></a><span class="lineno"> 2798</span>&#160;</div><div class="line"><a name="l02799"></a><span class="lineno"> 2799</span>&#160;<span class="keywordflow">END IF</span></div><div class="line"><a name="l02800"></a><span class="lineno"> 2800</span>&#160;</div><div class="line"><a name="l02801"></a><span class="lineno"> 2801</span>&#160;</div><div class="line"><a name="l02802"></a><span class="lineno"> 2802</span>&#160;<span class="comment">! 9.0 Moisture and Energy correction calculation!     appropriate for the new dynamics grid and vertical coordinate.</span></div><div class="line"><a name="l02803"></a><span class="lineno"> 2803</span>&#160;<span class="comment">!     UM documentation paper 27 - section 12.</span></div><div class="line"><a name="l02804"></a><span class="lineno"> 2804</span>&#160;</div><div class="line"><a name="l02805"></a><span class="lineno"> 2805</span>&#160;</div><div class="line"><a name="l02806"></a><span class="lineno"> 2806</span>&#160;<span class="keywordflow">IF</span> (<a class="code" href="namespacecv__run__mod.xhtml#ad05f8f4bd83f1f04931699d48092e779">l_cv_conserve_check</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02807"></a><span class="lineno"> 2807</span>&#160;</div><div class="line"><a name="l02808"></a><span class="lineno"> 2808</span>&#160;<span class="comment">! DEPENDS ON: cor_engy_5a</span></div><div class="line"><a name="l02809"></a><span class="lineno"> 2809</span>&#160;  <span class="keyword">CALL </span><a class="code" href="cor__engy-5a_8f90.xhtml#a0a460ba5f4ebceadc7a2e781e6751614" title="Ensure conservation of moist static energy. ">cor_engy_5a</a>(n_sh,n_real_sh,nlev,index1, r_theta, r_rho                &amp;</div><div class="line"><a name="l02810"></a><span class="lineno"> 2810</span>&#160;                    ,r2rho_th, r2rho, dr_across_th, dr_across_rh             &amp;</div><div class="line"><a name="l02811"></a><span class="lineno"> 2811</span>&#160;                    ,exner_layer_centres, th, u, v                           &amp;</div><div class="line"><a name="l02812"></a><span class="lineno"> 2812</span>&#160;                    ,dubydt, dvbydt, dqclbydt, dqcfbydt                      &amp;</div><div class="line"><a name="l02813"></a><span class="lineno"> 2813</span>&#160;                    ,rain,snow,dqbydt,dthbydt)</div><div class="line"><a name="l02814"></a><span class="lineno"> 2814</span>&#160;<span class="keywordflow">END IF</span></div><div class="line"><a name="l02815"></a><span class="lineno"> 2815</span>&#160;</div><div class="line"><a name="l02816"></a><span class="lineno"> 2816</span>&#160;</div><div class="line"><a name="l02817"></a><span class="lineno"> 2817</span>&#160;<span class="comment">! 10.0  Calculate convective cloud amount on model levels - no anvils</span></div><div class="line"><a name="l02818"></a><span class="lineno"> 2818</span>&#160;</div><div class="line"><a name="l02819"></a><span class="lineno"> 2819</span>&#160;<span class="comment">! Initialise output array</span></div><div class="line"><a name="l02820"></a><span class="lineno"> 2820</span>&#160;</div><div class="line"><a name="l02821"></a><span class="lineno"> 2821</span>&#160;<span class="keywordflow">DO</span> k = 1,nlev</div><div class="line"><a name="l02822"></a><span class="lineno"> 2822</span>&#160;  <span class="keywordflow">DO</span> i = 1,n_sh</div><div class="line"><a name="l02823"></a><span class="lineno"> 2823</span>&#160;    cca(i,k) = 0.0</div><div class="line"><a name="l02824"></a><span class="lineno"> 2824</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l02825"></a><span class="lineno"> 2825</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l02826"></a><span class="lineno"> 2826</span>&#160;</div><div class="line"><a name="l02827"></a><span class="lineno"> 2827</span>&#160;</div><div class="line"><a name="l02828"></a><span class="lineno"> 2828</span>&#160;<span class="comment">! Adjust cloud base, top and amount to prevent errors occurring in</span></div><div class="line"><a name="l02829"></a><span class="lineno"> 2829</span>&#160;<span class="comment">! radiation scheme when iccb = icct (this happens when convection</span></div><div class="line"><a name="l02830"></a><span class="lineno"> 2830</span>&#160;<span class="comment">! saturates upon forced detrainment).</span></div><div class="line"><a name="l02831"></a><span class="lineno"> 2831</span>&#160;</div><div class="line"><a name="l02832"></a><span class="lineno"> 2832</span>&#160;</div><div class="line"><a name="l02833"></a><span class="lineno"> 2833</span>&#160;<span class="keywordflow">IF</span> (.NOT. <a class="code" href="namespacecv__run__mod.xhtml#a056243df9a25e9043295c5ac8042fd5b">l_ccrad</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02834"></a><span class="lineno"> 2834</span>&#160;  <span class="keywordflow">DO</span> i=1, n_sh</div><div class="line"><a name="l02835"></a><span class="lineno"> 2835</span>&#160;    <span class="keywordflow">IF</span> (iccb(i) == icct(i)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02836"></a><span class="lineno"> 2836</span>&#160;      iccb(i) = 0</div><div class="line"><a name="l02837"></a><span class="lineno"> 2837</span>&#160;      icct(i) = 0</div><div class="line"><a name="l02838"></a><span class="lineno"> 2838</span>&#160;      cca_2d(i) = 0.0</div><div class="line"><a name="l02839"></a><span class="lineno"> 2839</span>&#160;      tcw(i) = 0.0</div><div class="line"><a name="l02840"></a><span class="lineno"> 2840</span>&#160;      cclwp(i) = 0.0</div><div class="line"><a name="l02841"></a><span class="lineno"> 2841</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l02842"></a><span class="lineno"> 2842</span>&#160;</div><div class="line"><a name="l02843"></a><span class="lineno"> 2843</span>&#160;    <span class="keywordflow">IF</span> (lcbase(i) == lctop(i)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02844"></a><span class="lineno"> 2844</span>&#160;      lcbase(i) = 0</div><div class="line"><a name="l02845"></a><span class="lineno"> 2845</span>&#160;      lctop(i) = 0</div><div class="line"><a name="l02846"></a><span class="lineno"> 2846</span>&#160;      lcca(i) = 0.0</div><div class="line"><a name="l02847"></a><span class="lineno"> 2847</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l02848"></a><span class="lineno"> 2848</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l02849"></a><span class="lineno"> 2849</span>&#160;<span class="keywordflow">END IF</span>      <span class="comment">! l_ccrad</span></div><div class="line"><a name="l02850"></a><span class="lineno"> 2850</span>&#160;</div><div class="line"><a name="l02851"></a><span class="lineno"> 2851</span>&#160;-<span class="comment">! 10.1 CCRad - Calculate CCA fow shallow levels only</span></div><div class="line"><a name="l02852"></a><span class="lineno"> 2852</span>&#160;-</div><div class="line"><a name="l02853"></a><span class="lineno"> 2853</span>&#160;<span class="keywordflow">IF</span> (<a class="code" href="namespacecv__run__mod.xhtml#a056243df9a25e9043295c5ac8042fd5b">l_ccrad</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02854"></a><span class="lineno"> 2854</span>&#160;</div><div class="line"><a name="l02855"></a><span class="lineno"> 2855</span>&#160;  <span class="keywordflow">DO</span> i=1, n_sh</div><div class="line"><a name="l02856"></a><span class="lineno"> 2856</span>&#160;</div><div class="line"><a name="l02857"></a><span class="lineno"> 2857</span>&#160;    overlap_fac(i) = 0.0</div><div class="line"><a name="l02858"></a><span class="lineno"> 2858</span>&#160;</div><div class="line"><a name="l02859"></a><span class="lineno"> 2859</span>&#160;    <span class="keywordflow">IF</span> (iccb(i) /= 0) <span class="keywordflow">THEN</span> <span class="comment">! Shallow convection occured</span></div><div class="line"><a name="l02860"></a><span class="lineno"> 2860</span>&#160;</div><div class="line"><a name="l02861"></a><span class="lineno"> 2861</span>&#160;      <span class="keywordflow">IF</span> (<a class="code" href="namespacecv__run__mod.xhtml#ada531c8ab7a2db9fa523fe9801878406">cca2d_sh_opt</a> == <a class="code" href="namespacecv__param__mod.xhtml#a2f5ce48e76ae03ce8e15284fb9cb9f66">grant_lock</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02862"></a><span class="lineno"> 2862</span>&#160;            <span class="comment">! Grant and Lock (2004) LES show mb/wsc nicely scales the cloud</span></div><div class="line"><a name="l02863"></a><span class="lineno"> 2863</span>&#160;      <span class="comment">! fraction profiles but not the TCA.  Also the UM overlap</span></div><div class="line"><a name="l02864"></a><span class="lineno"> 2864</span>&#160;      <span class="comment">! assumption in radiation is maximal.  This implies significant</span></div><div class="line"><a name="l02865"></a><span class="lineno"> 2865</span>&#160;      <span class="comment">! underestimate of TCA. So include a further parametrization of</span></div><div class="line"><a name="l02866"></a><span class="lineno"> 2866</span>&#160;      <span class="comment">! Cu &quot;overlap&quot;, based again on the LES of Grant and Lock (2004).</span></div><div class="line"><a name="l02867"></a><span class="lineno"> 2867</span>&#160;      <span class="comment">! This increases cca_2d proportional to the ratio of the cloud</span></div><div class="line"><a name="l02868"></a><span class="lineno"> 2868</span>&#160;      <span class="comment">! to sub-cloud layer depths.  In order to preserve the grid-box</span></div><div class="line"><a name="l02869"></a><span class="lineno"> 2869</span>&#160;      <span class="comment">! cloud water, ccw will be divided by the same factor.</span></div><div class="line"><a name="l02870"></a><span class="lineno"> 2870</span>&#160;             overlap_fac(i) = 2.0 * (  z_rho(i,ntpar(i)+1)               &amp;</div><div class="line"><a name="l02871"></a><span class="lineno"> 2871</span>&#160;                                - z_rho(i, ntml(i)+1) )             &amp;</div><div class="line"><a name="l02872"></a><span class="lineno"> 2872</span>&#160;                     / z_rho(i,ntml(i)+1)</div><div class="line"><a name="l02873"></a><span class="lineno"> 2873</span>&#160;</div><div class="line"><a name="l02874"></a><span class="lineno"> 2874</span>&#160;      <span class="keywordflow">ELSE</span> <span class="comment">! cca2d_sh_opt == grant_lock_no_over</span></div><div class="line"><a name="l02875"></a><span class="lineno"> 2875</span>&#160;        <span class="comment">! Do not apply the overlap</span></div><div class="line"><a name="l02876"></a><span class="lineno"> 2876</span>&#160;        overlap_fac(i) = 1.0</div><div class="line"><a name="l02877"></a><span class="lineno"> 2877</span>&#160;<span class="keywordflow">      END IF</span>     <span class="comment">! cca2d_sh_opt</span></div><div class="line"><a name="l02878"></a><span class="lineno"> 2878</span>&#160;</div><div class="line"><a name="l02879"></a><span class="lineno"> 2879</span>&#160;<span class="keywordflow">    END IF</span>     <span class="comment">! iccb</span></div><div class="line"><a name="l02880"></a><span class="lineno"> 2880</span>&#160;<span class="keywordflow">  END DO</span>     <span class="comment">! n_sh</span></div><div class="line"><a name="l02881"></a><span class="lineno"> 2881</span>&#160;</div><div class="line"><a name="l02882"></a><span class="lineno"> 2882</span>&#160;    <span class="comment">! 10.11 Calculate CCA</span></div><div class="line"><a name="l02883"></a><span class="lineno"> 2883</span>&#160;    <span class="keywordflow">SELECT CASE</span> (<a class="code" href="namespacecv__run__mod.xhtml#ada531c8ab7a2db9fa523fe9801878406">cca2d_sh_opt</a>)</div><div class="line"><a name="l02884"></a><span class="lineno"> 2884</span>&#160;    <span class="keywordflow">CASE</span>(<a class="code" href="namespacecv__param__mod.xhtml#a2f5ce48e76ae03ce8e15284fb9cb9f66">grant_lock</a>, <a class="code" href="namespacecv__param__mod.xhtml#a39748ffd163ce2acdaef052ac19b3621">grant_lock_no_over</a>)</div><div class="line"><a name="l02885"></a><span class="lineno"> 2885</span>&#160;</div><div class="line"><a name="l02886"></a><span class="lineno"> 2886</span>&#160;      <span class="keywordflow">DO</span> i=1, n_sh</div><div class="line"><a name="l02887"></a><span class="lineno"> 2887</span>&#160;        <span class="keywordflow">IF</span> (iccb(i) /= 0) <span class="keywordflow">THEN</span> <span class="comment">! Shallow convection occured</span></div><div class="line"><a name="l02888"></a><span class="lineno"> 2888</span>&#160;          tempnum = 2.0*mb(i)/wsc(i)</div><div class="line"><a name="l02889"></a><span class="lineno"> 2889</span>&#160;</div><div class="line"><a name="l02890"></a><span class="lineno"> 2890</span>&#160;          cca_2d(i) = max(2.0e-5, tempnum)</div><div class="line"><a name="l02891"></a><span class="lineno"> 2891</span>&#160;</div><div class="line"><a name="l02892"></a><span class="lineno"> 2892</span>&#160;          <span class="keywordflow">IF</span> (<a class="code" href="namespacecv__run__mod.xhtml#ada531c8ab7a2db9fa523fe9801878406">cca2d_sh_opt</a> == <a class="code" href="namespacecv__param__mod.xhtml#a39748ffd163ce2acdaef052ac19b3621">grant_lock_no_over</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02893"></a><span class="lineno"> 2893</span>&#160;            cca_2d(i) = min( 1.0, cca_2d(i))</div><div class="line"><a name="l02894"></a><span class="lineno"> 2894</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l02895"></a><span class="lineno"> 2895</span>&#160;</div><div class="line"><a name="l02896"></a><span class="lineno"> 2896</span>&#160;          <span class="comment">! Will be used by NAME, grab lowest cca_2d before any</span></div><div class="line"><a name="l02897"></a><span class="lineno"> 2897</span>&#160;          <span class="comment">! Tuning knobs applied</span></div><div class="line"><a name="l02898"></a><span class="lineno"> 2898</span>&#160;          lcca(i) = cca_2d(i)</div><div class="line"><a name="l02899"></a><span class="lineno"> 2899</span>&#160;<span class="keywordflow">        END IF</span>     <span class="comment">! iccb</span></div><div class="line"><a name="l02900"></a><span class="lineno"> 2900</span>&#160;<span class="keywordflow">      END DO</span>     <span class="comment">! n_sh</span></div><div class="line"><a name="l02901"></a><span class="lineno"> 2901</span>&#160;</div><div class="line"><a name="l02902"></a><span class="lineno"> 2902</span>&#160;</div><div class="line"><a name="l02903"></a><span class="lineno"> 2903</span>&#160;    <span class="keywordflow">CASE</span>(<a class="code" href="namespacecv__param__mod.xhtml#af860c59572fb12f73742efd46b9cb9de">total_condensed_water</a>)</div><div class="line"><a name="l02904"></a><span class="lineno"> 2904</span>&#160;        <span class="comment">! cca_2d is left unchanged from that calculated in the</span></div><div class="line"><a name="l02905"></a><span class="lineno"> 2905</span>&#160;        <span class="comment">! code, which is based on TCW (Total Condensed Water)</span></div><div class="line"><a name="l02906"></a><span class="lineno"> 2906</span>&#160;        <span class="comment">! (TCW is a rate)</span></div><div class="line"><a name="l02907"></a><span class="lineno"> 2907</span>&#160;</div><div class="line"><a name="l02908"></a><span class="lineno"> 2908</span>&#160;<span class="keywordflow">  END SELECT</span></div><div class="line"><a name="l02909"></a><span class="lineno"> 2909</span>&#160;</div><div class="line"><a name="l02910"></a><span class="lineno"> 2910</span>&#160;  <span class="keywordflow">IF</span> (<a class="code" href="namespacecv__run__mod.xhtml#ada531c8ab7a2db9fa523fe9801878406">cca2d_sh_opt</a> == <a class="code" href="namespacecv__param__mod.xhtml#a2f5ce48e76ae03ce8e15284fb9cb9f66">grant_lock</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02911"></a><span class="lineno"> 2911</span>&#160;</div><div class="line"><a name="l02912"></a><span class="lineno"> 2912</span>&#160;    <span class="keywordflow">DO</span> i=1, n_sh</div><div class="line"><a name="l02913"></a><span class="lineno"> 2913</span>&#160;</div><div class="line"><a name="l02914"></a><span class="lineno"> 2914</span>&#160;      overlap_fac(i) = max( 0.5, overlap_fac(i) )</div><div class="line"><a name="l02915"></a><span class="lineno"> 2915</span>&#160;      overlap_fac(i) = min( 5.0, overlap_fac(i) )</div><div class="line"><a name="l02916"></a><span class="lineno"> 2916</span>&#160;</div><div class="line"><a name="l02917"></a><span class="lineno"> 2917</span>&#160;      <span class="keywordflow">IF</span> (overlap_fac(i)*cca_2d(i) &gt; 0.99) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02918"></a><span class="lineno"> 2918</span>&#160;        overlap_fac(i) = 0.99/cca_2d(i)</div><div class="line"><a name="l02919"></a><span class="lineno"> 2919</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l02920"></a><span class="lineno"> 2920</span>&#160;<span class="keywordflow">    END DO</span>      <span class="comment">! i (n_sh)</span></div><div class="line"><a name="l02921"></a><span class="lineno"> 2921</span>&#160;</div><div class="line"><a name="l02922"></a><span class="lineno"> 2922</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l02923"></a><span class="lineno"> 2923</span>&#160;</div><div class="line"><a name="l02924"></a><span class="lineno"> 2924</span>&#160;  -  <span class="comment">! 10.12 Fill cca with cca_2d where non-zero ccw</span></div><div class="line"><a name="l02925"></a><span class="lineno"> 2925</span>&#160;  -  <span class="keywordflow">DO</span> k=1, nlev</div><div class="line"><a name="l02926"></a><span class="lineno"> 2926</span>&#160;    <span class="keywordflow">DO</span> i=1, n_sh</div><div class="line"><a name="l02927"></a><span class="lineno"> 2927</span>&#160;      <span class="keywordflow">IF</span> (iccb(i) /= 0) <span class="keywordflow">THEN</span> <span class="comment">! Shallow convection occured</span></div><div class="line"><a name="l02928"></a><span class="lineno"> 2928</span>&#160;</div><div class="line"><a name="l02929"></a><span class="lineno"> 2929</span>&#160;        <span class="keywordflow">IF</span> (ccw(i,k) &gt; 0.0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02930"></a><span class="lineno"> 2930</span>&#160;</div><div class="line"><a name="l02931"></a><span class="lineno"> 2931</span>&#160;          zpr = (z_rho(i,k)          - z_rho(i,ntml(i)+1))            &amp;</div><div class="line"><a name="l02932"></a><span class="lineno"> 2932</span>&#160;              / (z_rho(i,ntpar(i)+1) - z_rho(i,ntml(i)+1))</div><div class="line"><a name="l02933"></a><span class="lineno"> 2933</span>&#160;</div><div class="line"><a name="l02934"></a><span class="lineno"> 2934</span>&#160;          <span class="comment">! Apply Shape-function</span></div><div class="line"><a name="l02935"></a><span class="lineno"> 2935</span>&#160;          <span class="comment">!</span></div><div class="line"><a name="l02936"></a><span class="lineno"> 2936</span>&#160;          <span class="comment">! Apply overlap_fac to cca, also preserving grid-box water</span></div><div class="line"><a name="l02937"></a><span class="lineno"> 2937</span>&#160;          <span class="comment">! by dividing ccw by overlap_fac, at least at cloud-base</span></div><div class="line"><a name="l02938"></a><span class="lineno"> 2938</span>&#160;</div><div class="line"><a name="l02939"></a><span class="lineno"> 2939</span>&#160;          ccw(i,k)  = ccw(i,k)/overlap_fac(i)</div><div class="line"><a name="l02940"></a><span class="lineno"> 2940</span>&#160;          zpr       = min(1.0,zpr)</div><div class="line"><a name="l02941"></a><span class="lineno"> 2941</span>&#160;          cca(i,k)  = overlap_fac(i)*cca_2d(i)                    &amp;</div><div class="line"><a name="l02942"></a><span class="lineno"> 2942</span>&#160;                         * 0.25*( 1.0 + 3.0*exp(-5.0*zpr) )</div><div class="line"><a name="l02943"></a><span class="lineno"> 2943</span>&#160;</div><div class="line"><a name="l02944"></a><span class="lineno"> 2944</span>&#160;<span class="keywordflow">        END IF</span>       <span class="comment">! ccw</span></div><div class="line"><a name="l02945"></a><span class="lineno"> 2945</span>&#160;<span class="keywordflow">      END IF</span>       <span class="comment">! iccb</span></div><div class="line"><a name="l02946"></a><span class="lineno"> 2946</span>&#160;<span class="keywordflow">    END DO</span>       <span class="comment">! i (n_sh)</span></div><div class="line"><a name="l02947"></a><span class="lineno"> 2947</span>&#160;<span class="keywordflow">  END DO</span>       <span class="comment">! k (nlev)</span></div><div class="line"><a name="l02948"></a><span class="lineno"> 2948</span>&#160;</div><div class="line"><a name="l02949"></a><span class="lineno"> 2949</span>&#160;<span class="keywordflow">ELSE</span>        <span class="comment">! Non CCRAD option</span></div><div class="line"><a name="l02950"></a><span class="lineno"> 2950</span>&#160;</div><div class="line"><a name="l02951"></a><span class="lineno"> 2951</span>&#160;  <span class="keywordflow">DO</span> k=1, n_cca_lev</div><div class="line"><a name="l02952"></a><span class="lineno"> 2952</span>&#160;    <span class="keywordflow">DO</span> i=1, n_sh</div><div class="line"><a name="l02953"></a><span class="lineno"> 2953</span>&#160;      <span class="keywordflow">IF</span> (k &gt;= iccb(i) .AND. k &lt; icct(i)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l02954"></a><span class="lineno"> 2954</span>&#160;        cca(i,k) = cca_2d(i)</div><div class="line"><a name="l02955"></a><span class="lineno"> 2955</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l02956"></a><span class="lineno"> 2956</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l02957"></a><span class="lineno"> 2957</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l02958"></a><span class="lineno"> 2958</span>&#160;</div><div class="line"><a name="l02959"></a><span class="lineno"> 2959</span>&#160;<span class="keywordflow">END IF</span>      <span class="comment">! l_ccrad</span></div><div class="line"><a name="l02960"></a><span class="lineno"> 2960</span>&#160;</div><div class="line"><a name="l02961"></a><span class="lineno"> 2961</span>&#160;</div><div class="line"><a name="l02962"></a><span class="lineno"> 2962</span>&#160;<span class="comment">! 11.0  End Subroutine</span></div><div class="line"><a name="l02963"></a><span class="lineno"> 2963</span>&#160;</div><div class="line"><a name="l02964"></a><span class="lineno"> 2964</span>&#160;</div><div class="line"><a name="l02965"></a><span class="lineno"> 2965</span>&#160;<span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;SHALLOW_CONV_5A&#39;</span>,zhook_out,zhook_handle)</div><div class="line"><a name="l02966"></a><span class="lineno"> 2966</span>&#160;<span class="keywordflow">RETURN</span></div><div class="line"><a name="l02967"></a><span class="lineno"> 2967</span>&#160;<span class="keyword">END SUBROUTINE </span><a class="code" href="shallow__conv-shconv5a_8f90.xhtml#a9ee8df16ba28e0c3503e5d848118c242" title="Shallow convection scheme. ">shallow_conv_5a</a></div></div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
