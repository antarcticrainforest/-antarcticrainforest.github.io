<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>UM General Atmosphere: /home/wilfred/PhD/UM/src/atmosphere/radiance_core/eigenvalue_tri.f90 Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="unified_model_logo_2.jpeg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">UM General Atmosphere
   &#160;<span id="projectnumber">8.6</span>
   </div>
   <div id="projectbrief">UK Met Offices Unified Model</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_1df14ea1ac826f73bc3062fa8a76e0c2.xhtml">atmosphere</a></li><li class="navelem"><a class="el" href="dir_68003e6e168556241f03263b340b5802.xhtml">radiance_core</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">eigenvalue_tri.f90</div>  </div>
</div><!--header-->
<div class="contents">
<a href="eigenvalue__tri_8f90.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">!   pseudo-code and description given in &quot;Numerical Analysis&quot; by</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;     , tol, n_max_iteration                                             &amp;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;     , nd_matrix)</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacerealtype__rd.xhtml" title="Module to set the precision of real variables. ">realtype_rd</a><span class="keywordtype">, ONLY</span>: <a class="code" href="namespacerealtype__rd.xhtml#aff478693c9291d2b87e7b91444f5b55c">realk</a></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacerad__pcf.xhtml" title="Radiation Program Configuration File. ">rad_pcf</a><span class="keywordtype">, ONLY</span>: <a class="code" href="namespacerad__pcf.xhtml#a0da2e9a1541dea7bdbbb0ae3941d2fd1">i_warning</a></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;  <span class="keywordtype">USE </span>yomhook<span class="keywordtype">, ONLY</span>: lhook, dr_hook</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;  <span class="keywordtype">USE </span>parkind1<span class="keywordtype">, ONLY</span>: jprb, jpim</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespaceereport__mod.xhtml" title="This file belongs in section: Misc. ">ereport_mod</a><span class="keywordtype">, ONLY</span>: <a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;  <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> ::                                                &amp;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;     nd_matrix</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> ::                                                &amp;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;     n_matrix                                                           &amp;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;   , n_in                                                               &amp;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;   , n_max_iteration</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  <span class="keywordtype">REAL (RealK)</span>, <span class="keywordtype">INTENT(IN)</span> ::                                           &amp;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;     tol</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  <span class="keywordtype">REAL (RealK)</span>, <span class="keywordtype">INTENT(INOUT)</span> ::                                        &amp;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;     d(nd_matrix, n_in)                                                 &amp;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;   , e(nd_matrix, n_in)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  <span class="keywordtype">INTEGER</span> ::                                                            &amp;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;     n                                                                  &amp;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;   , l                                                                  &amp;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;   , <a class="code" href="arg__atm__fields_8h.xhtml#a00a9fc8d0f901f46d72445df9f6f4127">j</a>                                                                  &amp;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;   , iteration</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  <span class="keywordtype">REAL (RealK)</span> ::                                                       &amp;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;     shift(n_matrix)                                                    &amp;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;   , d_shift(n_matrix)                                                  &amp;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;   , b                                                                  &amp;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;   , c                                                                  &amp;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;   , discr                                                              &amp;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;   , kappa_1                                                            &amp;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;   , kappa_2</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  <span class="keywordtype">REAL (RealK)</span> ::                                                       &amp;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;     abs_e                                                              &amp;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;   , sinr(n_matrix)                                                     &amp;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;   , cosr(n_matrix)                                                     &amp;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;   , cosr_temp                                                          &amp;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;   , sq                                                                 &amp;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;   , sup_diag(n_matrix)                                                 &amp;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;   , sup_diag_old(n_matrix)</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  <span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  <span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  <span class="keywordtype">REAL(KIND=jprb)</span>               :: zhook_handle</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  <span class="keywordtype">INTEGER</span>                       :: ierr</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  <span class="keywordtype">CHARACTER (LEN=256)</span>           :: cmessage</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  <span class="keywordtype">CHARACTER (LEN=*)</span>, <span class="keywordtype">PARAMETER</span>  :: routinename = <span class="stringliteral">&#39;eigenvalue_tri&#39;</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;EIGENVALUE_TRI&#39;</span>,zhook_in,zhook_handle)</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">! The algorithm proceeds iteratively. The matrix supplied, A, is</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">! decomposed as A=QR where Q is orthogonal and R is upper</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">! triangular. A&#39;=RQ is then formed and the process is repeated with</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">! A&#39;. This leads to a sequence of matrices which converge to one</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">! with the eigenvalues down the diagonal.</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">! Initialization:</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">! Reduce the working size of the matrix if the off-diagonal</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">! elements are small enough.</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  n=n_in</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  abs_e=0.0e+00_realk</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  <span class="keywordflow">DO</span> l=1, n_matrix</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    abs_e=max(abs_e, abs(e(l, n)))</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  <span class="keywordflow">DO</span> <span class="keywordflow">WHILE</span> ( (n &gt;  1).AND.(abs_e &lt;  tol) )</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    n=n-1</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordflow">DO</span> l=1, n_matrix</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;      abs_e=max(abs_e, abs(e(l, n)))</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  iteration=0</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;  <span class="keywordflow">DO</span> l=1, n_matrix</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    shift(l)=0.0e+00_realk</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  <span class="keywordflow">DO</span> <span class="keywordflow">WHILE</span> ( (n &gt;  1).AND.(iteration &lt;  n_max_iteration) )</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    iteration=iteration+1</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">!   Form an estimate of the first eigenvalue to be found by</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">!   finding the eigenvalues of the 2x2 matrix at the bottom</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">!   right-hand corner.</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordflow">DO</span> l=1, n_matrix</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;      b=d(l, n-1)+d(l, n)</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;      c=d(l, n-1)*d(l, n)-e(l, n)*e(l, n)</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;      discr=sqrt(b*b-4.0e+00_realk*c)</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">!     For reasons of conditioning we calculate the root of largest</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">!     magnitude and determine the other from the product of the</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">!     roots.</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;      kappa_1=0.5e+00_realk*(b+sign(discr, b))</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;      kappa_2=c/kappa_1</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">!     Calculate the `shift&#39; so as to accelerate convergence to the</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">!     last eigenvalue. A simple two-branch IF-test should be</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">!     amenable to vectorization if the vector CPU has a vector</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">!     mask register.</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;      <span class="keywordflow">IF</span> ( abs(kappa_1-d(l, n)) &lt;                                       &amp;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;           abs(kappa_2-d(l, n)) ) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        d_shift(l)=kappa_1</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;      <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        d_shift(l)=kappa_2</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;      shift(l)=shift(l)+d_shift(l)</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">!   Shift the diagonal elements.</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keywordflow">DO</span> <a class="code" href="arg__atm__fields_8h.xhtml#a00a9fc8d0f901f46d72445df9f6f4127">j</a>=1, n</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;      <span class="keywordflow">DO</span> l=1, n_matrix</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        d(l, <a class="code" href="arg__atm__fields_8h.xhtml#a00a9fc8d0f901f46d72445df9f6f4127">j</a>)=d(l, <a class="code" href="arg__atm__fields_8h.xhtml#a00a9fc8d0f901f46d72445df9f6f4127">j</a>)-d_shift(l)</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">!   Form the QR-decompostion of the matrix by constructing</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">!   rotations to eliminate the sub-diagonal elements. COSR(J)</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">!   and SINR(J) are the cosine and sine of the rotations to</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">!   eliminate the element (J, J-1) of the input matrix: these</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">!   values specify the transpose of Q as we really construct</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">!   R=Qt.A by this procedure. The upper triangular matrix, R,</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">!   has two superdiagonals, but in practice only the first</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment">!   is required. As the resulting matrix, RQ, will be a</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">!   symmetric tridaigonal matrix only its diagonal, D, and</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">!   the sub-diagonal, E, need be formed.</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">!   Inintialize:</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keywordflow">DO</span> l=1, n_matrix</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;      sup_diag(l)=e(l, 2)</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;      cosr(l)=1.0e+00_realk</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;      sinr(l)=0.0e+00_realk</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordflow">DO</span> <a class="code" href="arg__atm__fields_8h.xhtml#a00a9fc8d0f901f46d72445df9f6f4127">j</a>=2, n</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;      <span class="keywordflow">DO</span> l=1, n_matrix</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">!       This block of code is a little opaque as the variables</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment">!       SINR and COSR are re-used to avoid the need to declare</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment">!       them explicitly as vectors. We form the rotation to</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment">!       elminate E(J) and also calculate E(J-1) of the new matrix</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment">!       RQ using SINR(J-1) for the last time. The new cosine of</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment">!       the rotation must be stored because we still need</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment">!       the old one.</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        sq=sqrt(d(l, <a class="code" href="arg__atm__fields_8h.xhtml#a00a9fc8d0f901f46d72445df9f6f4127">j</a>-1)*d(l, <a class="code" href="arg__atm__fields_8h.xhtml#a00a9fc8d0f901f46d72445df9f6f4127">j</a>-1)+e(l, <a class="code" href="arg__atm__fields_8h.xhtml#a00a9fc8d0f901f46d72445df9f6f4127">j</a>)*e(l, <a class="code" href="arg__atm__fields_8h.xhtml#a00a9fc8d0f901f46d72445df9f6f4127">j</a>))</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        e(l, <a class="code" href="arg__atm__fields_8h.xhtml#a00a9fc8d0f901f46d72445df9f6f4127">j</a>-1)=sinr(l)*sq</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        sinr(l)=e(l, <a class="code" href="arg__atm__fields_8h.xhtml#a00a9fc8d0f901f46d72445df9f6f4127">j</a>)/sq</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        cosr_temp=d(l, <a class="code" href="arg__atm__fields_8h.xhtml#a00a9fc8d0f901f46d72445df9f6f4127">j</a>-1)/sq</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">!       Adjust the superdiagonal of the previous row of the matrix</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment">!       as required by the elimination. The calculation of D(J-1)</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment">!       actually belongs to the formation of RQ, but is done here</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment">!       before we overwrite COSR.</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        sup_diag_old(l)=sup_diag(l)</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        sup_diag(l)=cosr_temp*sup_diag(l)+sinr(l)*d(l, <a class="code" href="arg__atm__fields_8h.xhtml#a00a9fc8d0f901f46d72445df9f6f4127">j</a>)</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        d(l, <a class="code" href="arg__atm__fields_8h.xhtml#a00a9fc8d0f901f46d72445df9f6f4127">j</a>-1)=cosr(l)*d(l, <a class="code" href="arg__atm__fields_8h.xhtml#a00a9fc8d0f901f46d72445df9f6f4127">j</a>-1)+sinr(l)*sup_diag(l)</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        cosr(l)=cosr_temp</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment">!       Adjustments to the current row:</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        d(l, <a class="code" href="arg__atm__fields_8h.xhtml#a00a9fc8d0f901f46d72445df9f6f4127">j</a>)=-sinr(l)*sup_diag_old(l)+cosr(l)*d(l, <a class="code" href="arg__atm__fields_8h.xhtml#a00a9fc8d0f901f46d72445df9f6f4127">j</a>)</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        <span class="keywordflow">IF</span> (<a class="code" href="arg__atm__fields_8h.xhtml#a00a9fc8d0f901f46d72445df9f6f4127">j</a> &lt;  n) sup_diag(l)=cosr(l)*e(l, <a class="code" href="arg__atm__fields_8h.xhtml#a00a9fc8d0f901f46d72445df9f6f4127">j</a>+1)</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordflow">DO</span> l=1, n_matrix</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;      e(l, n)=sinr(l)*d(l, n)</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;      d(l, n)=cosr(l)*d(l, n)</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment">!   Test for convergence and `shift&#39; the converged eigenvalues.</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment">!   back to their true values.</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    abs_e=0.0e+00_realk</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keywordflow">DO</span> l=1, n_matrix</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;      abs_e=max(abs_e, abs(e(l, n)))</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keywordflow">DO</span> <span class="keywordflow">WHILE</span> ( (n &gt;  1).AND.(abs_e &lt;  tol) )</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;      <span class="keywordflow">DO</span> l=1, n_matrix</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        d(l, n)=d(l, n)+shift(l)</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;      n=n-1</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;      <span class="keywordflow">DO</span> l=1, n_matrix</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        abs_e=max(abs_e, abs(e(l, n)))</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment">! Check that convergence has occurred.</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;  <span class="keywordflow">IF</span> (n &gt;  1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    cmessage = <span class="stringliteral">&#39;*** Warning: Convergence has not occurred while &#39;</span>       &amp;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;      //<span class="stringliteral">&#39;calculating eigenvalues. The calculation continues.&#39;</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    ierr=<a class="code" href="namespacerad__pcf.xhtml#a0da2e9a1541dea7bdbbb0ae3941d2fd1">i_warning</a></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a>(routinename, ierr, cmessage)</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;  <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="comment">!   Shift the first eigenvalue back to its true value.</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keywordflow">DO</span> l=1, n_matrix</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;      d(l, 1)=d(l, 1)+shift(l)</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;EIGENVALUE_TRI&#39;</span>,zhook_out,zhook_handle)</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="keyword">END SUBROUTINE </span>eigenvalue_tri</div></div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
