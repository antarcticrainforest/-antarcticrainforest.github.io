<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>UM General Atmosphere: /home/wilfred/PhD/UM/src/atmosphere/aerosols/dustbin_conversion_mod.f90 Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="unified_model_logo_2.jpeg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">UM General Atmosphere
   &#160;<span id="projectnumber">8.6</span>
   </div>
   <div id="projectbrief">UK Met Offices Unified Model</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_1df14ea1ac826f73bc3062fa8a76e0c2.xhtml">atmosphere</a></li><li class="navelem"><a class="el" href="dir_5bbaa72d56cd8722d355a59b2a241e50.xhtml">aerosols</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">dustbin_conversion_mod.f90</div>  </div>
</div><!--header-->
<div class="contents">
<a href="dustbin__conversion__mod_8f90.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00002"></a><span class="lineno"><a class="line" href="namespacedustbin__conversion__mod.xhtml">    2</a></span>&#160;<span class="keyword">MODULE</span> <a class="code" href="namespacedustbin__conversion__mod.xhtml">dustbin_conversion_mod</a></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;</div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">! Description:</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">! Code description:</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno"><a class="line" href="namespacedustbin__conversion__mod.xhtml#a05302cf41bbd76325703c50e703d3d1b">   19</a></span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">PARAMETER</span> :: <a class="code" href="namespacedustbin__conversion__mod.xhtml#a05302cf41bbd76325703c50e703d3d1b" title="A module containing constants and subroutines involving converting input LBC fields between 2- and 6-...">kext6</a>(1:6) = (/ 652.797, 3626.70, 976.290, 260.675,  &amp;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;                                   77.6338, 23.9075 /)</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno"><a class="line" href="namespacedustbin__conversion__mod.xhtml#af53f60e723532457d2a72167b89eb42c">   22</a></span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">PARAMETER</span> :: <a class="code" href="namespacedustbin__conversion__mod.xhtml#af53f60e723532457d2a72167b89eb42c">kext2</a>(1:2) = (/ 700.367, 141.453 /)</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;  <span class="keyword">CONTAINS</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">  SUBROUTINE </span><a class="code" href="namespacedustbin__conversion__mod.xhtml#a124a954b876134346d59d44fdf4d8849" title="Convert six-bin dust to two-bin dust. ">convert_dust_six_to_two</a>(                                   &amp;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        data_size,                                                      &amp;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        dust_div1, dust_div2, dust_div3, dust_div4, dust_div5, dust_div6 )</div><div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="namespacedustbin__conversion__mod.xhtml#a124a954b876134346d59d44fdf4d8849">   33</a></span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keywordtype">USE </span>parkind1<span class="keywordtype">, ONLY</span>: jpim, jprb    use yomhook,  only: lhook, dr_hook</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;   <span class="comment">! Array bounds</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: data_size</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(INOUT)</span> ::                                              &amp;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        dust_div1(data_size),                                           &amp;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        dust_div2(data_size),                                           &amp;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        dust_div3(data_size),                                           &amp;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        dust_div4(data_size),                                           &amp;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        dust_div5(data_size),                                           &amp;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        dust_div6(data_size)                                           </div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordtype">REAL</span> :: p1(1:6)</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordtype">REAL</span> :: p2(1:6)</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordtype">REAL</span> :: dust_div1_t</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordtype">REAL</span> :: dust_div2_t</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordtype">INTEGER</span> :: i</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordtype">REAL(KIND=jprb)</span>               :: zhook_handle</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;CONVERT_DUST_SIX_TO_TWO&#39;</span>,zhook_in,zhook_handle)</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="comment">! Set p1,p2 here as setting these in the declaration enables the &#39;save&#39;</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="comment">! property by default. Which isn&#39;t desirable.</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    p1(1:6) = (/ 0., 1., 1., 0.43, 0., 0. /)</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    p2(1:6) = (/ 0., 0., 0., 0.57, 1., 1. /)</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    p1(:) = p1(:) * <a class="code" href="namespacedustbin__conversion__mod.xhtml#a05302cf41bbd76325703c50e703d3d1b" title="A module containing constants and subroutines involving converting input LBC fields between 2- and 6-...">kext6</a>(:) / <a class="code" href="namespacedustbin__conversion__mod.xhtml#af53f60e723532457d2a72167b89eb42c">kext2</a>(1)</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    p2(:) = p2(:) * <a class="code" href="namespacedustbin__conversion__mod.xhtml#a05302cf41bbd76325703c50e703d3d1b" title="A module containing constants and subroutines involving converting input LBC fields between 2- and 6-...">kext6</a>(:) / <a class="code" href="namespacedustbin__conversion__mod.xhtml#af53f60e723532457d2a72167b89eb42c">kext2</a>(2)</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;   <span class="comment">! Generate 2-bin dust into temporary arrays from 6-bin arrays</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">DO</span> i = 1, data_size</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;      dust_div1_t = dust_div1(i) * p1(1) +                         &amp;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                    dust_div2(i) * p1(2) +                         &amp;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                    dust_div3(i) * p1(3) +                         &amp;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                    dust_div4(i) * p1(4) +                         &amp;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                    dust_div5(i) * p1(5) +                         &amp;                     dust_div6(i) * p1(6)</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;      dust_div2_t = dust_div1(i) * p2(1) +                         &amp;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                    dust_div2(i) * p2(2) +                         &amp;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                    dust_div3(i) * p2(3) +                         &amp;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                    dust_div4(i) * p2(4) +                         &amp;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                    dust_div5(i) * p2(5) +                         &amp;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                    dust_div6(i) * p2(6)</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;      dust_div1(i) = dust_div1_t</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;      dust_div2(i) = dust_div2_t</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;      dust_div3(i) = 0.0</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;      dust_div4(i) = 0.0</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;      dust_div5(i) = 0.0</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;      dust_div6(i) = 0.0</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;CONVERT_DUST_SIX_TO_TWO&#39;</span>,zhook_out,zhook_handle)</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="keyword">   END SUBROUTINE </span><a class="code" href="namespacedustbin__conversion__mod.xhtml#a124a954b876134346d59d44fdf4d8849" title="Convert six-bin dust to two-bin dust. ">convert_dust_six_to_two</a></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        data_size,                                                      &amp;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        dust_div1, dust_div2, dust_div3, dust_div4, dust_div5, dust_div6 )</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordtype">USE </span>parkind1<span class="keywordtype">, ONLY</span>: jpim, jprb    use yomhook,  only: lhook, dr_hook</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">! Array bounds</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: data_size</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">! Dust data fields</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(INOUT)</span> ::                                              &amp;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        dust_div1(data_size),                                           &amp;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        dust_div2(data_size),                                           &amp;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        dust_div3(data_size),                                           &amp;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        dust_div4(data_size),                                           &amp;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        dust_div5(data_size),                                           &amp;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        dust_div6(data_size)                                           </div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">! Internal variables - mass proportions</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordtype">REAL</span> :: p1(1:6)</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordtype">REAL</span> :: p2(1:6)</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">! Temporary variables</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordtype">REAL</span> :: dust_div1_t</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordtype">REAL</span> :: dust_div2_t</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordtype">INTEGER</span> :: i</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;   <span class="comment">! Dr Hook variables</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keywordtype">REAL(KIND=jprb)</span>               :: zhook_handle</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;CONVERT_DUST_TWO_TO_SIX&#39;</span>,zhook_in,zhook_handle)</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="comment">! Set p1,p2 here as setting these in the declaration enables the &#39;save&#39;</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="comment">! property by default. Which isn&#39;t desirable.</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    p1(1:6) = (/ 0.0035, 0.035, 0.220, 0.745, 0.,     0. /)</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    p2(1:6) = (/ 0.,     0.,    0.,    0.219, 0.781,  0. /)</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">! Because we want to preserve AOD at 550nm rather than total mass</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">! the proportions must be adjusted to account for extinction</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">! efficiency</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    p1(:) = p1(:) * <a class="code" href="namespacedustbin__conversion__mod.xhtml#af53f60e723532457d2a72167b89eb42c">kext2</a>(1) / <a class="code" href="sum_8f90.xhtml#a025c1f845b6a4ea9c9f48b8612cd82e7" title="Generic routines for manipulating pp-fields within Fieldcalc. ">sum</a>( <a class="code" href="namespacedustbin__conversion__mod.xhtml#a05302cf41bbd76325703c50e703d3d1b" title="A module containing constants and subroutines involving converting input LBC fields between 2- and 6-...">kext6</a>(:) * p1(:) )</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    p2(:) = p2(:) * <a class="code" href="namespacedustbin__conversion__mod.xhtml#af53f60e723532457d2a72167b89eb42c">kext2</a>(2) / <a class="code" href="sum_8f90.xhtml#a025c1f845b6a4ea9c9f48b8612cd82e7" title="Generic routines for manipulating pp-fields within Fieldcalc. ">sum</a>( <a class="code" href="namespacedustbin__conversion__mod.xhtml#a05302cf41bbd76325703c50e703d3d1b" title="A module containing constants and subroutines involving converting input LBC fields between 2- and 6-...">kext6</a>(:) * p2(:) )</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordflow">DO</span> i = 1, data_size</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">! Copy original 2-bin dust into temporary arrays</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;      dust_div1_t = dust_div1(i)</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;      dust_div2_t = dust_div2(i)</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;   <span class="comment">! Interpolate new 6-bin from 2-bin scheme</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;      dust_div1(i) = p1(1) * dust_div1_t + p2(1) * dust_div2_t</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;      dust_div2(i) = p1(2) * dust_div1_t + p2(2) * dust_div2_t</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;      dust_div3(i) = p1(3) * dust_div1_t + p2(3) * dust_div2_t</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;      dust_div4(i) = p1(4) * dust_div1_t + p2(4) * dust_div2_t</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;      dust_div5(i) = p1(5) * dust_div1_t + p2(5) * dust_div2_t</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;      dust_div6(i) = p1(6) * dust_div1_t + p2(6) * dust_div2_t</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;         <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;CONVERT_DUST_TWO_TO_SIX&#39;</span>,zhook_out,zhook_handle)</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="keyword">  END SUBROUTINE </span>convert_dust_two_to_six</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="keyword">END MODULE </span><a class="code" href="namespacedustbin__conversion__mod.xhtml">dustbin_conversion_mod</a></div></div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
