<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>UM General Atmosphere: /home/wilfred/PhD/UM/src/control/mpp/regrid_alloc_calc_mod.f90 Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="unified_model_logo_2.jpeg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">UM General Atmosphere
   &#160;<span id="projectnumber">8.6</span>
   </div>
   <div id="projectbrief">UK Met Offices Unified Model</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_b81b067251166617f9d0a8c0cfc3a4a9.xhtml">control</a></li><li class="navelem"><a class="el" href="dir_14a8e295637c738acc16dab33472505b.xhtml">mpp</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">regrid_alloc_calc_mod.f90</div>  </div>
</div><!--header-->
<div class="contents">
<a href="regrid__alloc__calc__mod_8f90.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno"><a class="line" href="namespaceregrid__alloc__calc.xhtml">    9</a></span>&#160;<span class="keyword">MODULE</span> <a class="code" href="namespaceregrid__alloc__calc.xhtml" title="Module: REGRID_ALLOC_CALC!&gt; ">regrid_alloc_calc</a></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;  <span class="keywordtype">USE </span>mpl</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespaceregrid__types.xhtml" title="Module: REGRID_TYPES !&gt; ">regrid_types</a></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;   <span class="keywordtype">USE </span><a class="code" href="namespaceumprintmgr.xhtml" title="This file belongs in section: Misc. ">umprintmgr</a><span class="keywordtype">, ONLY</span> :      &amp;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;      <a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>,                &amp;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;      <a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;  <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;      <span class="keyword">CONTAINS</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;  <span class="comment">! This routine is provided to concern information required by other  ! processes and receive concerns required by this process</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">  SUBROUTINE </span><a class="code" href="namespaceregrid__alloc__calc.xhtml#afc840167b45d161a0e4e0831a3fb4b25">swap_concerns</a>(send_concern, recv_concern, error, cmessage)</div><div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="namespaceregrid__alloc__calc.xhtml#afc840167b45d161a0e4e0831a3fb4b25">   21</a></span>&#160;    <span class="keywordtype">USE </span>regrid_utils<span class="keywordtype">, ONLY</span>: error_check_mpl</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;       <span class="keywordtype">TYPE</span>(<a class="code" href="structregrid__types_1_1concern.xhtml">concern</a>), <span class="keywordtype">DIMENSION(:)</span>, <span class="keywordtype">INTENT(INOUT)</span> :: send_concern</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="comment">! this is not initialised apart from the proc data member    ! and size of grid point data</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keywordtype">TYPE</span>(<a class="code" href="structregrid__types_1_1concern.xhtml">concern</a>), <span class="keywordtype">DIMENSION(:)</span>, <span class="keywordtype">INTENT(INOUT)</span> :: recv_concern</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="comment">! this should be initialised with the concern information    ! needed for field data from this process&#39;s subdomain</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keywordtype">CHARACTER(len=*)</span>, <span class="keywordtype">INTENT(OUT)</span> :: cmessage    <span class="comment">! if an error occurs this argument is set with an explanation    ! of the error</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(OUT)</span> :: error    <span class="comment">! set to -1 if an error occurs, 0 otherwise</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="comment">! locals</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keywordtype">INTEGER</span> i, my_comm</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="comment">! loop counter</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keywordtype">INTEGER</span> X_TAG, Y_TAG</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="comment">! mpl tags</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordtype">INTEGER</span> s_concern_size, r_concern_size, request_size</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="comment">! extent of send and recev concerns passed</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">ALLOCATABLE</span> :: requests(:), statuses(:,:), ierror(:)</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="comment">! for receiving requests, mpl status, and mpl error codes       cmessage = &quot;&quot;</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    error = 0</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    x_tag = 1</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    y_tag = 2</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">CALL </span>gc_get_communicator(my_comm, error)</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    s_concern_size = <span class="keyword">SIZE</span>(send_concern,1)</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    r_concern_size = <span class="keyword">SIZE</span>(recv_concern,1)</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    request_size = s_concern_size*2 + r_concern_size*2</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="comment">! allocate requests for sends and recvs</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">ALLOCATE</span>(requests(request_size))</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">ALLOCATE</span>(ierror(request_size))</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    requests = 0</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    ierror = 0</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="comment">! send lambda/phi point components telling appropriate    ! proc what grid points you need</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">DO</span> i=1, r_concern_size</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            <span class="keyword">CALL </span>mpl_isend(recv_concern(i)%x, recv_concern(i)%size,           &amp;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;           mpl_integer, recv_concern(i)%proc_num, x_tag,                &amp;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;           my_comm, requests(i), ierror(i))</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                <span class="keyword">CALL </span>mpl_isend(recv_concern(i)%y, recv_concern(i)%size,           &amp;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;           mpl_integer, recv_concern(i)%proc_num, y_tag,                &amp;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;           my_comm, requests(i+r_concern_size), ierror(i))</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="keywordflow">         END DO</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="comment">! recv lambda/phi point components which tells you</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="comment">! what grid points other procs need</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">DO</span> i=1, s_concern_size</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;           <span class="keyword">CALL </span>mpl_irecv(send_concern(i)%x, send_concern(i)%size,           &amp;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;           mpl_integer, send_concern(i)%proc_num, x_tag,                &amp;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;           my_comm, requests(i+(r_concern_size*2)),                     &amp;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;           ierror(i+(r_concern_size*2)))</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;           <span class="keyword">CALL </span>mpl_irecv(send_concern(i)%y, send_concern(i)%size,           &amp;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;           mpl_integer, send_concern(i)%proc_num, y_tag,                &amp;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;           my_comm, requests(i+(r_concern_size*2) +                     &amp;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;           s_concern_size), ierror(i+(r_concern_size*2)))<span class="keywordflow">         END DO</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;       <span class="comment">! check error for send and receives    CALL ERROR_CHECK_MPL(ierror, request_size, error)</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;       <span class="keyword">ALLOCATE</span>(statuses(mpl_status_size, request_size))</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    statuses = 0</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;       <span class="keyword">CALL </span>mpl_waitall(request_size, requests, statuses, i)</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="comment">! account for case    IF(request_size /= 0) THEN</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;      ierror(1) = i</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="comment">! check error for waitall      CALL ERROR_CHECK_MPL(ierror, 1, i)</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;       <span class="keywordflow">IF</span>(i /= 0) error = 1</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;       <span class="comment">! release request mem resource</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">DEALLOCATE</span>(requests)</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keyword">DEALLOCATE</span>(statuses)</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keyword">DEALLOCATE</span>(ierror)</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="keyword">  END SUBROUTINE </span><a class="code" href="namespaceregrid__alloc__calc.xhtml#afc840167b45d161a0e4e0831a3fb4b25">swap_concerns</a></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  <span class="comment">! convenience function which calculates proc send and  ! recv list, the information concerns are based on global_index  ! array passed in</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="keyword">  SUBROUTINE </span><a class="code" href="namespaceregrid__alloc__calc.xhtml#a8d4a85d08f16f8eb545f931579baf172">calc_proc_list</a>(global_index, index_size, send_list,          &amp;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        recv_list, send_size, recv_size, p_count_send, p_count_recv,      &amp;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        g_row_length)</div><div class="line"><a name="l00101"></a><span class="lineno"><a class="line" href="namespaceregrid__alloc__calc.xhtml#a8d4a85d08f16f8eb545f931579baf172">  101</a></span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordtype">USE </span>um_parvars<span class="keywordtype">, ONLY</span>: g_pe_index_ew, g_pe_index_ns, nproc, nproc_x</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordtype">USE </span><a class="code" href="namespaceum__parcore.xhtml" title="This file belongs in section: MPP. ">um_parcore</a><span class="keywordtype">, ONLY</span>: <a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;       <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: index_size, global_index(index_size),          &amp;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;         g_row_length    <span class="comment">! encodes the 2d grid points needed by this process, which can be    ! decoded with the grid points global row length.</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(OUT)</span> :: send_list(nproc), recv_list(nproc)</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="comment">! send_list, a list of processes that will send regridding    ! information to this process and vice versa for recv_list</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;       <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(OUT)</span> :: recv_size(nproc), send_size(nproc)</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="comment">! the number of grid points that processes list in send and recv list</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="comment">! will be sending receiving respectively</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(OUT)</span> :: p_count_send, p_count_recv</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="comment">! actual number processes in send_list and recv_list (nproc is just</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="comment">! the max amount of send and recv processes)</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="comment">! locals        INTEGER n_grid_proc_list(nproc), n_grid_proc_list_all(nproc*nproc)</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordtype">INTEGER</span> pe_col, pe_row, proc, ierror</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordtype">INTEGER</span> xpt, ypt, i, j, my_comm</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    send_list = 0</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    recv_list = 0</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    recv_size = 0</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    send_size = 0</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    ierror = 0</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    n_grid_proc_list = 0</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    n_grid_proc_list_all = 0</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">DO</span> i=1, index_size      xpt = mod(global_index(i)-1, g_row_length)+1</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;      ypt = (global_index(i)-1)/g_row_length+1</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;           pe_col = g_pe_index_ew(xpt)</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;      pe_row = g_pe_index_ns(ypt)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;      proc = pe_row*nproc_x + pe_col</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;           <span class="comment">! record number of grid pts process needs to send            IF(proc /= mype) THEN</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;       <span class="preprocessor">#if defined(_REGRID_DEBUG_)</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="preprocessor"></span>        <span class="keywordflow">IF</span>(<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>==1) print*, <span class="stringliteral">&quot;proc concern: &quot;</span>, proc, xpt,                &amp;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;             ypt</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="preprocessor"></span>        n_grid_proc_list(proc+1) = n_grid_proc_list(proc+1)             &amp;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;             + 1</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keyword">CALL </span>gc_get_communicator(my_comm, ierror)</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;       <span class="keyword">CALL </span>mpl_allgather(n_grid_proc_list, nproc, mpl_integer,            &amp;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;         n_grid_proc_list_all, nproc, mpl_integer,                      &amp;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;         my_comm, ierror)</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;   <span class="preprocessor">#if defined(_REGRID_DEBUG_)</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="preprocessor"></span>    <span class="comment">! check jth process to see if this corresponds to you    IF(mype==1) THEN</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;      <span class="keywordflow">DO</span> i=0, nproc-1</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) i, n_grid_proc_list(i+1),                             &amp;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;             n_grid_proc_list_all((nproc*1)+i+1)</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;regrid_alloc_calc_mod&#39;</span>)</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="preprocessor"></span>       p_count_send = 0    p_count_recv = 0</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;       <span class="keywordflow">DO</span> i=0, nproc-1</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;      <span class="keywordflow">DO</span> j=0, nproc-1</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="comment">! look at own list and determine procs you will be        ! receving from and size        IF(i==mype) THEN                   IF(n_grid_proc_list_all(i*nproc+j+1)&gt;0) THEN</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            <span class="comment">! number of recv concerns</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            p_count_recv = p_count_recv + 1</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            <span class="comment">! size for proc</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            recv_size(p_count_recv) = n_grid_proc_list_all(         &amp;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                 i*nproc+j+1)</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            <span class="comment">! proc to recv from</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            recv_list(p_count_recv) = j</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="keywordflow">                     END IF</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                 <span class="keywordflow">ELSE</span>          <span class="comment">! look at other procs list and determine who wants</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;          <span class="comment">! you to send to them</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                   <span class="keywordflow">IF</span>(j==<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            <span class="keywordflow">IF</span>(n_grid_proc_list_all(i*nproc+j+1)&gt;0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;              <span class="comment">! number of send concerns</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;              p_count_send = p_count_send + 1</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;              <span class="comment">! size of data to send proc</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;              send_size(p_count_send) = n_grid_proc_list_all(      &amp;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                   i*nproc+j+1)</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;              <span class="comment">! proc to send to</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;              send_list(p_count_send) = i</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="keywordflow">            END IF</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="keywordflow">             END DO</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="keyword">     END SUBROUTINE </span><a class="code" href="namespaceregrid__alloc__calc.xhtml#a8d4a85d08f16f8eb545f931579baf172">calc_proc_list</a></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;     <span class="comment">! Calculate and allocates space for send and receive concerns  ! in order to regrid from one grid to the other</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="keyword">  SUBROUTINE </span><a class="code" href="namespaceregrid__alloc__calc.xhtml#ae7944e7dce0778046916fe7263d6fac1">calc_alloc_concerns</a>(send_concern, recv_concern,            &amp;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;       index_size, global_index, g_row_length, g_rows, grid, error,     &amp;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;       cmessage)</div><div class="line"><a name="l00191"></a><span class="lineno"><a class="line" href="namespaceregrid__alloc__calc.xhtml#ae7944e7dce0778046916fe7263d6fac1">  191</a></span>&#160;       <span class="keywordtype">USE </span>um_parvars<span class="keywordtype">, ONLY</span>: nproc, g_pe_index_ew, g_pe_index_ns, nproc_x</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keywordtype">USE </span><a class="code" href="namespaceum__parcore.xhtml" title="This file belongs in section: MPP. ">um_parcore</a><span class="keywordtype">, ONLY</span>: <a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>    use <a class="code" href="namespaceereport__mod.xhtml" title="This file belongs in section: Misc. ">ereport_mod</a>, only: <a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a>    implicit none</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keywordtype">TYPE</span>(<a class="code" href="structregrid__types_1_1concern.xhtml">concern</a>), <span class="keywordtype">POINTER</span> :: send_concern(:)</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordtype">TYPE</span>(<a class="code" href="structregrid__types_1_1concern.xhtml">concern</a>), <span class="keywordtype">POINTER</span> :: recv_concern(:)</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="comment">! these allocated within this routine and set with coordination    ! information needed to regrid this processes subdomain from    ! src to target grid</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: index_size, global_index(index_size)</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="comment">! lat and long start grid location in global indexing</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="comment">! contains information on the grid to calculate &#39;regrid to&#39;</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="comment">! information</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: grid       <span class="comment">! grid one is regridding from</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: g_row_length, g_rows    <span class="comment">! this the row length and rows of the src grid    ! across all processes</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keywordtype">CHARACTER(len=*)</span>, <span class="keywordtype">INTENT(OUT)</span> :: cmessage</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="comment">! set if error occurs, otherwise empty</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(OUT)</span> :: error</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="comment">! set to -1 if an error occurs otherwise 0</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="comment">! local variables</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keywordtype">INTEGER</span> num_procs_send, num_procs_recv</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="comment">! number of procs for which this processor is a send concern    ! and receive concern respectively</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;       <span class="keywordtype">INTEGER</span> send_list(nproc), recv_list(nproc)</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="comment">! a list to possibly contain all processes you need to send to    ! or recv from</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keywordtype">INTEGER</span> recv_size(nproc), send_size(nproc)</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="comment">! number of grid points each process in list will be sending    ! to help allocate space on respective processes</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keywordtype">INTEGER</span> p_count_send, p_count_recv, pe_col, pe_row</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keywordtype">LOGICAL</span> found_proc</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keywordtype">INTEGER</span> lam, phi, proc, ierror, i, j, k, procCount</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordtype">INTEGER</span> :: xpt, ypt</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;   </div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    error = 0</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    cmessage = <span class="stringliteral">&quot;&quot;</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    p_count_recv = 0</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    p_count_send = 0</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="comment">! retrieve send and recv list as well as sizes    CALL CALC_PROC_LIST(global_index, index_size, send_list, recv_list, &amp;</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;         send_size, recv_size, p_count_send, p_count_recv, g_row_length)</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="comment">! allocate resources for recv and send concerns</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keyword">ALLOCATE</span>(recv_concern(p_count_recv))</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keyword">ALLOCATE</span>(send_concern(p_count_send))</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="comment">! allocate for recv and send concern space needed</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="comment">! for send and recv</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;       <span class="keywordflow">DO</span> i=1, p_count_recv</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;           <span class="keyword">ALLOCATE</span>(recv_concern(i)%x(recv_size(i)))</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;      <span class="keyword">ALLOCATE</span>(recv_concern(i)%y(recv_size(i)))</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;      <span class="keyword">ALLOCATE</span>(recv_concern(i)%field(recv_size(i)))</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;      recv_concern(i)%proc_num = recv_list(i)           <span class="comment">! init size to zero in order to</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;      <span class="comment">! use for grid initialisation</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;      recv_concern(i)%size = 0<span class="keywordflow">         END DO</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;          <span class="keywordflow">DO</span> i=1, p_count_send</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;      send_concern(i)%proc_num = send_list(i)      send_concern(i)%size = send_size(i)</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;      <span class="keyword">ALLOCATE</span>(send_concern(i)%x(send_size(i)))</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;      <span class="keyword">ALLOCATE</span>(send_concern(i)%y(send_size(i)))</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;      <span class="keyword">ALLOCATE</span>(send_concern(i)%field(send_size(i)))</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;       <span class="comment">! populate recv_concern with the data points you want</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;       <span class="keywordflow">DO</span> i=1, index_size</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;      xpt = mod(global_index(i)-1, g_row_length)+1</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;      ypt = (global_index(i)-1)/g_row_length+1</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;           pe_col = g_pe_index_ew(xpt)</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;      pe_row = g_pe_index_ns(ypt)</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;      proc = pe_row*nproc_x + pe_col           <span class="comment">! find relevant proc number and store grid point</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;      <span class="comment">! location, if relevant proc can&#39;t be found this      ! is a fatal error</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;      <span class="keywordflow">IF</span>(proc /= <a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;               found_proc = .false.</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        <span class="keywordflow">DO</span> j=1, p_count_recv</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                   <span class="keywordflow">IF</span>(proc==(recv_concern(j)%proc_num)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                       recv_concern(j)%size = recv_concern(j)%size + 1</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                       <span class="comment">! update to next grid point</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;            k = recv_concern(j)%size</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            recv_concern(j)%x(k) = xpt</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;            recv_concern(j)%y(k) = ypt</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            found_proc = .true.</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="keywordflow">                     END IF</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="keywordflow">        END DO</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;               <span class="keywordflow">IF</span>(.NOT. found_proc) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                   <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&quot;proc, xpt, ypt, :&quot;</span>, proc, xpt, ypt</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;          <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;regrid_alloc_calc_mod&#39;</span>)</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;          <span class="keyword">CALL </span>flush(6)</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                   <span class="comment">! proc has not been found in receive list</span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;          <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a>(<span class="stringliteral">&quot;CALC_ALLOC_CONCERNS&quot;</span>, 1,                        &amp;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;               <span class="stringliteral">&quot;Concerns not calclated successfully&quot;</span>)</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="keywordflow">                 END IF</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="keywordflow">         END DO</span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;       <span class="comment">! swap concerns with other processors</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceregrid__alloc__calc.xhtml#afc840167b45d161a0e4e0831a3fb4b25">swap_concerns</a>(send_concern, recv_concern, error, cmessage)       <span class="keywordflow">IF</span> (error /= 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;      <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a>(<span class="stringliteral">&quot;CALC_ALLOC_CONCERNS&quot;</span>, 1, cmessage)</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;       <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="keyword">  END SUBROUTINE </span><a class="code" href="namespaceregrid__alloc__calc.xhtml#ae7944e7dce0778046916fe7263d6fac1">calc_alloc_concerns</a></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="comment">! calculates and allocates space for regridding via map max method  SUBROUTINE CALC_ALLOC_MAX_CONCERNS(send_concern_max, recv_concern_max,&amp;</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;       contribution, base_tr, count_tr, row_length, rows,               &amp;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;       <a class="code" href="namespaceregrid__types.xhtml#a59ac04c6a0d1a1dd5bb4aee7e29e6423">weight</a>, src_grid, global_index, index_size, global_row_length,   &amp;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;       global_rows, local_targ_row_length, local_targ_rows, targ_grid,  &amp;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;       trip_mask, want, global_src_row_length, error, cmessage)</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;       <span class="keywordtype">USE </span>um_parvars <span class="keywordtype">, ONLY</span>: nproc, g_pe_index_ew, g_pe_index_ns, nproc_x,&amp;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;         nproc_y</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keywordtype">USE </span><a class="code" href="namespaceum__parcore.xhtml" title="This file belongs in section: MPP. ">um_parcore</a> <span class="keywordtype">, ONLY</span>: <a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>    use regrid_utils, only: local_to_global_gridpt, get_proc_for_gridpt,&amp;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;         sort_contributors</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="keywordtype">USE </span><a class="code" href="namespaceereport__mod.xhtml" title="This file belongs in section: Misc. ">ereport_mod</a><span class="keywordtype">, ONLY</span>: <a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a>    implicit none</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keywordtype">TYPE</span>(<a class="code" href="structregrid__types_1_1concern__max.xhtml">concern_max</a>), <span class="keywordtype">POINTER</span> :: send_concern_max(:)</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="keywordtype">TYPE</span>(<a class="code" href="structregrid__types_1_1concern__max.xhtml">concern_max</a>), <span class="keywordtype">POINTER</span> :: recv_concern_max(:)</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="comment">! the send and recv concern max to allocated and initialised with    ! coordination information need for map_max regridding</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="keywordtype">TYPE</span>(contribution_info), <span class="keywordtype">POINTER</span> :: contribution(:)</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="comment">! more convenient form of recv_concern_max</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: rows, row_length</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="comment">! the local row and row_length of the target grid</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: index_size, global_index(index_size)    <span class="comment">! stores indexes of contributing target pixels to src</span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: global_src_row_length</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="comment">! global row length of src grid</span></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span> :: weight(index_size)</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="comment">! contirbuting weight of src field points pointed to by global_index</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="keywordtype">LOGICAL</span>, <span class="keywordtype">INTENT(IN)</span> :: trip_mask(row_length, rows)</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="comment">! trip mask used to indicate wanted point</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;       <span class="keywordtype">LOGICAL</span>, <span class="keywordtype">INTENT(IN)</span> :: want</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="comment">! mask indicator to note wanted points</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: base_tr(row_length, rows)</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="comment">! starting index of contributors to target field pixel (x,y) in    ! global_index    INTEGER, INTENT(IN) :: count_tr(row_length, rows)    ! the number of targets that contributes in for a given pixel</span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="comment">! hence, global_index(base_tr(x,y):base_tr(x,y)+count_tr(x,y)) contribute    ! to target field pixel x,y</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> ::  global_rows, global_row_length</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="comment">! row and row length of the targ grid across processes</span></div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: src_grid, targ_grid</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="comment">! src grid, the grid being regridded from and target grid; the grid</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <span class="comment">! being regridded to</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: local_targ_row_length, local_targ_rows</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="comment">! number of rows, row length of the target grid on this process</span></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(OUT)</span> :: error    <span class="comment">! set to -1 if an error occurs and 0 otherwise</span></div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <span class="keywordtype">CHARACTER(len=*)</span>, <span class="keywordtype">INTENT(OUT)</span> :: cmessage</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="comment">! set if an error occurs explanating error</span></div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;       <span class="comment">! locals</span></div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="keywordtype">INTEGER</span> send_list(nproc), recv_list(nproc)</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="comment">! a list to possibly contain all processes you need to send to    ! or recv from</span></div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keywordtype">INTEGER</span> recv_size_a(nproc), send_size_a(nproc)</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <span class="comment">! number of grid points each process in list will be sending    ! to help allocate space on respective processes</span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <span class="keywordtype">INTEGER</span> p_count_send, p_count_recv</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="comment">! actual size of process and send/recv size lists</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;       <span class="keywordtype">INTEGER</span> i, j, k, l, m, ip, targx, targy, x, y, contrib_size</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="keywordtype">INTEGER</span> sc_size, dat_size, recv_size, rc_size</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <span class="keywordtype">REAL</span> weight_max</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <span class="keywordtype">INTEGER</span> proc, max_ip    <span class="keywordtype">LOGICAL</span> found_proc</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    error = 0</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    cmessage = <span class="stringliteral">&quot;&quot;</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;       <span class="comment">! calculate who you would list of processors you would send to and    ! receive from if you were going to regrid via area average</span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceregrid__alloc__calc.xhtml#a8d4a85d08f16f8eb545f931579baf172">calc_proc_list</a>(global_index, index_size, send_list, recv_list, &amp;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;         send_size_a, recv_size_a, p_count_send, p_count_recv,          &amp;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;         global_row_length)</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;       <span class="comment">! for the processors you would receive from this    ! represent src grid which have contributed to    ! target points in this subdomain    recv_size = p_count_recv    ALLOCATE(send_concern_max(recv_size))</span></div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;       <span class="keywordflow">DO</span> i=1, recv_size      dat_size = recv_size_a(i)           send_concern_max(i)%proc_num = recv_list(i)</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;      <span class="keyword">ALLOCATE</span>(send_concern_max(i)%x(dat_size))</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;      <span class="keyword">ALLOCATE</span>(send_concern_max(i)%y(dat_size))</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;           <span class="keyword">ALLOCATE</span>(send_concern_max(i)%xtarg(dat_size))</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;      <span class="keyword">ALLOCATE</span>(send_concern_max(i)%ytarg(dat_size))</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;           <span class="keyword">ALLOCATE</span>(send_concern_max(i)%weight(dat_size))</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;      <span class="keyword">ALLOCATE</span>(send_concern_max(i)%field(dat_size))</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;      <span class="keyword">ALLOCATE</span>(send_concern_max(i)%contribute(dat_size))</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;           send_concern_max(i)%size = 0</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;          <span class="comment">! for each src point that exist in this process&#39;s subdomain    ! determine which target point outwith this subdomain it contributes</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    <span class="comment">! to and store this in send_concern_max    sc_size = recv_size</span></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;       <span class="keywordflow">DO</span> j=1, rows       <span class="keywordflow">DO</span> i=1, row_length </div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;          <span class="keywordflow">IF</span>(count_tr(i,j) /= 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                     weight_max = 0.</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                       <span class="comment">! determine which src pixel contributes to this</span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;            <span class="comment">! this target the most</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;            <span class="keywordflow">DO</span> k=1, count_tr(i,j)              ip = base_tr(i,j) + k</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;              <span class="keywordflow">IF</span>(weight(ip) &gt; weight_max) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                weight_max = weight(ip)</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                max_ip = ip<span class="keywordflow">              END IF</span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="keywordflow">            END DO</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                       <span class="keywordflow">DO</span> k=1, count_tr(i,j)                           ip = base_tr(i,j) + k</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;              x = mod(global_index(ip)-1, global_row_length)+1</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;              y = (global_index(ip)-1)/global_row_length+1</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                           proc =  get_proc_for_gridpt(x, y, targ_grid)</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                           <span class="comment">! consider all processes except calling process</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;              <span class="keywordflow">IF</span>(proc /= <a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                               found_proc = .false.</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                <span class="comment">! look for process this src point contributes                ! to its subdomain</span></div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                <span class="keywordflow">DO</span> l=1, sc_size                  <span class="keywordflow">IF</span>(proc==send_concern_max(l)%proc_num) <span class="keywordflow">THEN</span>                    send_concern_max(l)%size = send_concern_max(l)%size + 1</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                    m = send_concern_max(l)%size</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                                       <span class="comment">! store src grid point (global indexing)                     ! this target contributes to</span></div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                                       send_concern_max(l)%xtarg(m) = x</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                    send_concern_max(l)%ytarg(m) = y</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                                       <span class="comment">! the target pixel currently being considered</span></div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                    targx = i</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                    targy = j</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                                       <span class="comment">! change local grid point to a                    ! global one</span></div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                    <span class="keyword">CALL </span>local_to_global_gridpt(targx, targy, src_grid)</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                                       <span class="comment">! record the global 2d indices the contributing                    ! target</span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                    send_concern_max(l)%x(m) = targx                    send_concern_max(l)%y(m) = targy</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                                     <span class="comment">! store target&#39;s weight contribution to src</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                    send_concern_max(l)%weight(m) = weight(ip)                                       <span class="comment">! indicate if target actually contributed                    ! to the most by this source                    ! (max contributor based regridder)</span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                    send_concern_max(l)%contribute(m) = (ip == max_ip) &amp;</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                         .AND. (trip_mask(i,j) .EQV. want)                                            found_proc = .true.</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;<span class="keywordflow">                                     END IF</span> <span class="comment">! proc = concern%proc_num</span></div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;<span class="keywordflow">                END DO</span> <span class="comment">! 1, sc_size</span></div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                               <span class="comment">! proc should be found if not fatal error!</span></div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                <span class="keywordflow">IF</span>(.NOT. found_proc) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                  <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&quot;Fatal error! proc not found: &quot;</span>, <a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                  <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;regrid_alloc_calc_mod&#39;</span>)</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;<span class="keywordflow">                END IF</span></div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;<span class="keywordflow">                             END IF</span> <span class="comment">! proc /= mype</span></div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="keywordflow">            END DO</span> <span class="comment">! 1 to cout_targ</span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="keywordflow">          END IF</span> <span class="comment">! count_tr_targ /= 0</span></div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="comment">!        END IF ! trip_mask .EQV. want</span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="keywordflow">      END DO</span> <span class="comment">! i</span></div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="keywordflow">    END DO</span> <span class="comment">! j</span></div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;            <span class="comment">! the data needed by this process equally reflect the send</span></div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    <span class="comment">! concerns needed for area average regridding. all target points    ! which contributed to determining current source will now have    ! the source value and their weights returned to them in    ! recv concern max</span></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    <span class="comment">! recv_concern_max resource should mirror send_concern</span></div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    recv_size = p_count_send       <span class="keyword">ALLOCATE</span>(recv_concern_max(recv_size))</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="keywordflow">DO</span> i=1, recv_size      dat_size = send_size_a(i)</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;      recv_concern_max(i)%size = dat_size</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;      recv_concern_max(i)%proc_num = send_list(i)</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;           <span class="keyword">ALLOCATE</span>(recv_concern_max(i)%x(dat_size))</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;      <span class="keyword">ALLOCATE</span>(recv_concern_max(i)%y(dat_size))</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;           <span class="keyword">ALLOCATE</span>(recv_concern_max(i)%xtarg(dat_size))</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;      <span class="keyword">ALLOCATE</span>(recv_concern_max(i)%ytarg(dat_size))</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;           <span class="keyword">ALLOCATE</span>(recv_concern_max(i)%weight(dat_size))</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;      <span class="keyword">ALLOCATE</span>(recv_concern_max(i)%field(dat_size))</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;      <span class="keyword">ALLOCATE</span>(recv_concern_max(i)%contribute(dat_size))</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="keywordflow">         END DO</span></div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;       <span class="comment">! swap concern data that does not change per regrid    ! iteration for recv concern</span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceregrid__alloc__calc.xhtml#a723d0f4feab9ae9994bdacb958034d5d">swap_concerns_max</a>(send_concern_max, recv_concern_max, error,   &amp;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;         cmessage)</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;       <span class="keywordflow">IF</span> (error /= 0) <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a>(<span class="stringliteral">&quot;CALC_ALLOC_MAX_CONCERNS&quot;</span>, -1,         &amp;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;         <span class="stringliteral">&quot;swap concern max failed&quot;</span>)</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;       contrib_size = local_targ_rows*local_targ_row_length</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    recv_size = p_count_send</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;       <span class="comment">! allocate space to contain all local target field points</span></div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <span class="keyword">ALLOCATE</span>(contribution(local_targ_rows*local_targ_row_length))</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;          <span class="comment">! calculate and intitalise contribution array    CALL CALC_CONTRIBUTORS(base_tr, count_tr, weight, row_length, rows, &amp;</span></div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;         global_index, index_size, global_row_length, targ_grid,        &amp;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;         src_grid, local_targ_row_length, recv_concern_max, recv_size,  &amp;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;         contribution, contrib_size, error)</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="keywordflow">IF</span> (error /= 0) <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a>(<span class="stringliteral">&quot;CALC_ALLOC_MAX_CONCERNS&quot;</span>, -1,         &amp;</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;         <span class="stringliteral">&quot;Failed calc contribtutions&quot;</span>)</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <span class="keyword">CALL </span>sort_contributors(contribution, contrib_size,                  &amp;</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;         global_src_row_length, error)</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <span class="keywordflow">IF</span> (error /= 0) <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a>(<span class="stringliteral">&quot;CALC_ALLOC_MAX_CONCERNS&quot;</span>, -1,         &amp;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;         <span class="stringliteral">&quot;Failed sort_contributions&quot;</span>)</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="keyword">  END SUBROUTINE </span>calc_alloc_max_concerns</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160; </div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;  <span class="comment">! the purpose of this routine is to recv grid points so  ! this processor know what field values it needs to send</span></div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;  <span class="comment">! to other processors</span></div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;<span class="keyword">  SUBROUTINE </span><a class="code" href="namespaceregrid__alloc__calc.xhtml#a723d0f4feab9ae9994bdacb958034d5d">swap_concerns_max</a>(send_concern_max, recv_concern_max,      &amp;</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;       error, cmessage)</div><div class="line"><a name="l00465"></a><span class="lineno"><a class="line" href="namespaceregrid__alloc__calc.xhtml#a723d0f4feab9ae9994bdacb958034d5d">  465</a></span>&#160;       <span class="keywordtype">USE </span>regrid_utils<span class="keywordtype">, ONLY</span>: error_check_mpl</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    <span class="keywordtype">TYPE</span>(concern_max), <span class="keywordtype">DIMENSION(:)</span>, <span class="keywordtype">INTENT(INOUT)</span> :: send_concern_max</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <span class="comment">! contains what this process needs to send to allow other procs</span></div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <span class="comment">! to regrid their field    ! the size of data and procs to send to, must be set before entry</span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    <span class="comment">! to this routine</span></div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <span class="keywordtype">TYPE</span>(concern_max), <span class="keywordtype">DIMENSION(:)</span>, <span class="keywordtype">INTENT(INOUT)</span> :: recv_concern_max    <span class="comment">! set to info needed by other procs to regrid their subdomain</span></div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <span class="comment">! the size of data and procs to recv from must be set before entry</span></div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    <span class="comment">! to this routine</span></div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;       <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(OUT)</span> :: error    <span class="comment">! set to -1 if an error occurs, otherwise 0</span></div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    <span class="keywordtype">CHARACTER(len=*)</span>, <span class="keywordtype">INTENT(OUT)</span> :: cmessage    <span class="comment">! set with info explaining error should one occurs, otherise empty</span></div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <span class="comment">! locals</span></div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    <span class="keywordtype">INTEGER</span> i, my_comm</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <span class="comment">! loop index</span></div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    <span class="keywordtype">INTEGER</span> X_TAG, Y_TAG, X_SRC_TAG, Y_SRC_TAG, W_TAG, C_TAG</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <span class="comment">! mpl tags to make sure procs receive the right information</span></div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <span class="keywordtype">INTEGER</span> s_concern_size, r_concern_size, request_size, req_offset,   &amp;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;         req_pt, error_i(1)</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    <span class="comment">! extent of send and recev concerns passed</span></div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">ALLOCATABLE</span> :: requests(:), statuses(:,:), ierror(:)</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;       error = 0    cmessage = <span class="stringliteral">&quot;&quot;</span></div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    <span class="keyword">CALL </span>gc_get_communicator(my_comm, error)</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    s_concern_size = <span class="keyword">SIZE</span>(send_concern_max,1)</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    r_concern_size = <span class="keyword">SIZE</span>(recv_concern_max,1)</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    request_size = s_concern_size*6 + r_concern_size*6</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    <span class="comment">! allocate requests for sends and recvs</span></div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    <span class="keyword">ALLOCATE</span>(requests(request_size))</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <span class="keyword">ALLOCATE</span>(ierror(request_size))</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    requests = 0</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    req_pt = 0</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    w_tag = 1</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    x_tag = 2</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    y_tag = 3</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    x_src_tag = 4</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    y_src_tag = 5</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    c_tag = 6</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;   </div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <span class="comment">! send lambda/phi gird point which tell what target maps    ! to what source and the weighting to apply to the associated</span></div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    <span class="comment">! field point value</span></div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    <span class="keywordflow">DO</span> i=1, s_concern_size</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;      req_pt =  (i-1)*6+1</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;      <span class="keyword">CALL </span>mpl_isend(send_concern_max(i)%weight,                        &amp;</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;           send_concern_max(i)%size, mpl_real,                          &amp;</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;           send_concern_max(i)%proc_num, w_tag, my_comm,                &amp;</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;           requests(req_pt), ierror(req_pt))</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;           req_pt =  (i-1)*6+2</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;      <span class="keyword">CALL </span>mpl_isend(send_concern_max(i)%x,                             &amp;</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;           send_concern_max(i)%size, mpl_integer,                       &amp;</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;           send_concern_max(i)%proc_num, x_tag, my_comm,                &amp;</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;           requests(req_pt), ierror(req_pt))</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;           req_pt =  (i-1)*6+3</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;      <span class="keyword">CALL </span>mpl_isend(send_concern_max(i)%y,                             &amp;</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;           send_concern_max(i)%size, mpl_integer,                       &amp;</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;           send_concern_max(i)%proc_num, y_tag, my_comm,                &amp;            requests(req_pt), ierror(req_pt))</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;           req_pt =  (i-1)*6+4</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;      <span class="keyword">CALL </span>mpl_isend(send_concern_max(i)%xtarg,                         &amp;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;           send_concern_max(i)%size, mpl_integer,                       &amp;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;           send_concern_max(i)%proc_num, x_src_tag, my_comm,            &amp;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;           requests(req_pt), ierror(req_pt))</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;           req_pt =  (i-1)*6+5</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;      <span class="keyword">CALL </span>mpl_isend(send_concern_max(i)%ytarg,                         &amp;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;           send_concern_max(i)%size, mpl_integer,                       &amp;</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;           send_concern_max(i)%proc_num, y_src_tag, my_comm,            &amp;</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;           requests(req_pt), ierror(req_pt))</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;           req_pt =  (i-1)*6+6</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;      <span class="keyword">CALL </span>mpl_isend(send_concern_max(i)%contribute,                    &amp;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;           send_concern_max(i)%size, mpl_logical,                       &amp;</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;           send_concern_max(i)%proc_num, c_tag, my_comm,                &amp;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;           requests(req_pt), ierror(req_pt))</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;<span class="keywordflow">         END DO</span></div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;       req_offset = s_concern_size*6</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <span class="comment">! recv lambda/phi gird point which tell what target maps    ! to what source and the weighting to apply to the associated</span></div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    <span class="comment">! field point value</span></div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    <span class="keywordflow">DO</span> i=1, r_concern_size           req_pt = (i-1)*6+1 + req_offset</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;      <span class="keyword">CALL </span>mpl_irecv(recv_concern_max(i)%weight,                        &amp;</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;           recv_concern_max(i)%size, mpl_real,                          &amp;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;           recv_concern_max(i)%proc_num, w_tag, my_comm,                &amp;             requests(req_pt), ierror(req_pt))</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;           req_pt = (i-1)*6+2 + req_offset</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;      <span class="keyword">CALL </span>mpl_irecv(recv_concern_max(i)%x,                             &amp;            recv_concern_max(i)%size, mpl_integer,                       &amp;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;           recv_concern_max(i)%proc_num, x_tag, my_comm,                &amp;</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;           requests(req_pt), ierror(req_pt))</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;           req_pt = (i-1)*6+3 + req_offset</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;      <span class="keyword">CALL </span>mpl_irecv(recv_concern_max(i)%y,                             &amp;</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;           recv_concern_max(i)%size, mpl_integer,                       &amp;</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;           recv_concern_max(i)%proc_num, y_tag, my_comm,                &amp;</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;           requests(req_pt), ierror(req_pt))</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;           req_pt = (i-1)*6+4 + req_offset</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;      <span class="keyword">CALL </span>mpl_irecv(recv_concern_max(i)%xtarg,                         &amp;</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;           recv_concern_max(i)%size, mpl_integer,                       &amp;</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;           recv_concern_max(i)%proc_num, x_src_tag, my_comm,            &amp;</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;           requests(req_pt), ierror(req_pt))</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;           req_pt = (i-1)*6+5 + req_offset</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;      <span class="keyword">CALL </span>mpl_irecv(recv_concern_max(i)%ytarg,                         &amp;</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;           recv_concern_max(i)%size, mpl_integer,                       &amp;</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;           recv_concern_max(i)%proc_num, y_src_tag, my_comm,            &amp;</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;           requests(req_pt), ierror(req_pt))</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;           req_pt = (i-1)*6+6 + req_offset</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;      <span class="keyword">CALL </span>mpl_irecv(recv_concern_max(i)%contribute,                    &amp;</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;           recv_concern_max(i)%size, mpl_logical,                       &amp;</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;           recv_concern_max(i)%proc_num, c_tag, my_comm,                &amp;</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;           requests(req_pt), ierror(req_pt))</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;<span class="keywordflow">         END DO</span></div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    <span class="comment">! check mpl errors of recv and send</span></div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    <span class="keyword">CALL </span>error_check_mpl(ierror, request_size,     &amp;</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;         error)</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;       <span class="keyword">ALLOCATE</span>(statuses(mpl_status_size, request_size))</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    statuses = 0</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;       <span class="keyword">CALL </span>mpl_waitall(request_size, requests, statuses, i)       <span class="comment">! check mpl errors of wait all</span></div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    <span class="keywordflow">IF</span>(request_size /= 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;      error_i(1) = i</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;      <span class="keyword">CALL </span>error_check_mpl(error_i, 1, error)</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    <span class="comment">! release request mem resource</span></div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    <span class="keyword">DEALLOCATE</span>(requests)</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    <span class="keyword">DEALLOCATE</span>(statuses)</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    <span class="keyword">DEALLOCATE</span>(ierror)</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;<span class="keyword">  END SUBROUTINE </span><a class="code" href="namespaceregrid__alloc__calc.xhtml#a723d0f4feab9ae9994bdacb958034d5d">swap_concerns_max</a></div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;   <span class="comment">! The routine gathers up target grid points which  ! contribute to this process&#39;s subdomain source</span></div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;  <span class="comment">! points and also the target point&#39;s weight  SUBROUTINE CALC_CONTRIBUTORS(base_tr, count_tr, weight, row_length,   &amp;</span></div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;       rows, g_index_src, lenl, g_targ_row_length, targ_grid, src_grid, &amp;</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;       l_targ_row_length, recv_concern_max, recv_size, contribution,    &amp;</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;       contrib_size, error)</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    <span class="keywordtype">USE </span>regrid_utils<span class="keywordtype">, ONLY</span>: local_to_global_gridpt,                     &amp;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;         get_proc_for_gridpt, global_to_local_gridpt,                   &amp;</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;         gridpt_outside_proc_domain</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    <span class="keywordtype">USE </span>um_parvars<span class="keywordtype">, ONLY</span>: nproc</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    <span class="keywordtype">USE </span><a class="code" href="namespaceum__parcore.xhtml" title="This file belongs in section: MPP. ">um_parcore</a><span class="keywordtype">, ONLY</span>: <a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a></div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    <span class="keywordtype">USE </span><a class="code" href="namespaceereport__mod.xhtml" title="This file belongs in section: Misc. ">ereport_mod</a><span class="keywordtype">, ONLY</span>: <a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a></div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: contrib_size, recv_size</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    <span class="comment">! the size of contribution and recv_concern_max arrays respectively</span></div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    <span class="keywordtype">TYPE</span>(concern_max), <span class="keywordtype">DIMENSION(recv_size)</span>, <span class="keywordtype">INTENT(IN)</span> :: recv_concern_max    <span class="comment">! contains information on src grid points this process needs to receive    ! to regrid</span></div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;    <span class="keywordtype">TYPE</span>(contribution_info), <span class="keywordtype">DIMENSION(contrib_size)</span>, <span class="keywordtype">INTENT(INOUT)</span> ::  &amp;</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;         contribution</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    <span class="comment">! this is set here using recv_concern_max, the contribution array is needed</span></div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    <span class="comment">! to compress and simplify information in recv concern max (to a more    ! usable form,  which for instance allows preserving reproducability    ! despite different decompositions).</span></div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: lenl, g_index_src(lenl)</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    <span class="comment">! stores indexes of contributing src pixels to target</span></div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span> :: weight(lenl)</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    <span class="comment">! contirbuting weight of src field points pointed to by global_index   </span></div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: l_targ_row_length</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    <span class="comment">! the local target row length</span></div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: rows, row_length</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    <span class="comment">! the local src row and row lengt</span></div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: base_tr(row_length, rows)</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    <span class="comment">! the starting point (&quot;base&quot;) of contributing pixels in    ! global index</span></div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: count_tr(row_length, rows)</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    <span class="comment">! the number of src points that contributes in for a given pixel</span></div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    <span class="comment">! hence, elements of global_index(base_tr(x,y):base_tr(x,y)+</span></div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    <span class="comment">! count_tr(x,y)) contribute to src field pixel x,y</span></div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: src_grid, targ_grid, g_targ_row_length</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    <span class="comment">! the src grid we&#39;re regridding from and target grid we&#39;re regrdding    ! to (e.g. atmos, river)</span></div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(OUT)</span> :: error    <span class="comment">! set to -1 if error occurs, 0 otherwise</span></div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;       <span class="comment">! local variables</span></div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    <span class="keywordtype">INTEGER</span> i, j, k, ip    <span class="comment">! loop counter variables</span></div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    <span class="keywordtype">INTEGER</span> xpt, ypt, y_max, x_max</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    <span class="comment">! grid point references</span></div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    <span class="keywordtype">INTEGER</span> index, dat_size</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    <span class="comment">! used to track 1-D global src grid point index</span></div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    <span class="keywordtype">REAL</span> weight_max</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    <span class="comment">! tracks the max weight contributed to a src field point by the target</span></div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">ALLOCATABLE</span> :: incr(:)</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    <span class="comment">! allows dynamic incrementing of index sizes</span></div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    <span class="keyword">ALLOCATE</span>(incr(contrib_size))</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    <span class="keywordflow">DO</span> i=1, contrib_size      contribution(i)%size = 0</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    <span class="comment">! a bit of a hack but fortran doesn&#39;t have native linked lists, so...</span></div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    <span class="comment">! so first we retrieve the space required of contributors for the target</span></div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    <span class="comment">! field subdomain which can then be used to allocate the space required    ! to store contribution information</span></div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;       <span class="comment">! firstly account for space required by src contributors within    ! prcoess&#39;s subdomain</span></div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    <span class="keywordflow">DO</span> j=1, rows</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;      <span class="keywordflow">DO</span> i=1, row_length               weight_max = 0</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;               <span class="keywordflow">IF</span>(count_tr(i,j) /= 0) <span class="keywordflow">THEN</span>                   <span class="comment">! get indices for target which src contributes          ! to the most</span></div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;          <span class="keywordflow">DO</span> k=1, count_tr(i,j)</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;            ip = base_tr(i,j) + k            <span class="keywordflow">IF</span>(weight(ip) &gt; weight_max) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;              weight_max = weight(ip)              x_max = mod(g_index_src(ip)-1,g_targ_row_length)+1</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;              y_max = (g_index_src(ip)-1)/g_targ_row_length+1</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;<span class="keywordflow">            END IF</span></div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;<span class="keywordflow">          END DO</span></div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;                   <span class="comment">! do not consider points contributed by src          ! outside proc domain</span></div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;          <span class="keywordflow">IF</span>(.NOT. gridpt_outside_proc_domain(x_max, y_max, targ_grid)) &amp;</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;               <span class="keywordflow">THEN</span>                       xpt = x_max            ypt = y_max            <span class="keyword">CALL </span>global_to_local_gridpt(xpt, ypt, targ_grid)</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;                       index = ((ypt-1)*l_targ_row_length)+xpt</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;                       <span class="comment">! increment to make space for this            ! contributing src</span></div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;            contribution(index)%size = contribution(index)%size + 1</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;<span class="keywordflow">          END IF</span>  <span class="comment">! gridpt_outside_proc_domain</span></div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;<span class="keywordflow">        END IF</span> <span class="comment">! count_tr /= 0</span></div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;<span class="keywordflow">             END DO</span></div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;          <span class="comment">! now account for space needed by contribution    ! by src points outside this process&#39;s subdomain</span></div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    <span class="comment">! which contribute to this process&#39;s target    ! subdomain</span></div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    <span class="keywordflow">DO</span> i=1, recv_size           dat_size = recv_concern_max(i)%size       <span class="keywordflow">DO</span> j=1, dat_size               <span class="comment">! account src that actually contributes</span></div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;        <span class="comment">! i.e. it is the maximum contributor</span></div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;        <span class="keywordflow">IF</span>(recv_concern_max(i)%contribute(j)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;                   <span class="comment">! target gridpt that src contributes to          x_max = recv_concern_max(i)%xtarg(j)          y_max = recv_concern_max(i)%ytarg(j)                   xpt = x_max          ypt = y_max          CALL GLOBAL_TO_LOCAL_GRIDPT(xpt, ypt, targ_grid)</span></div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;                   index = ((ypt-1)*l_targ_row_length)+xpt                   <span class="keywordflow">IF</span>(gridpt_outside_proc_domain(x_max, y_max, targ_grid)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;            error = -1<span class="keywordflow">          END IF</span></div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;                   <span class="comment">! increment to make space for this contributing src</span></div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;          contribution(index)%size = contribution(index)%size + 1</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;<span class="keywordflow">             END DO</span></div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;       <span class="comment">! allocate space to actually store src</span></div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    <span class="comment">! contribution info</span></div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    <span class="keywordflow">DO</span> i=1, contrib_size       dat_size = contribution(i)%size      <span class="keywordflow">IF</span>(dat_size&gt;0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;        <span class="keyword">ALLOCATE</span>(contribution(i)%x(dat_size))</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;        <span class="keyword">ALLOCATE</span>(contribution(i)%y(dat_size))</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;        <span class="keyword">ALLOCATE</span>(contribution(i)%weight(dat_size))</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;        <span class="keyword">ALLOCATE</span>(contribution(i)%contrib_proc(dat_size)) <span class="comment">! debug info</span></div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;       incr = 0</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;       <span class="comment">! now do everthing above again except allocation, and also now    ! initialising the newly allocated space with target contribution    ! info</span></div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    <span class="keywordflow">DO</span> j=1, rows</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;      <span class="keywordflow">DO</span> i=1, row_length                weight_max = 0</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;               <span class="keywordflow">IF</span>(count_tr(i,j) /= 0) <span class="keywordflow">THEN</span>                   <span class="comment">! get indices for src which target contributes          ! to the most</span></div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;          <span class="keywordflow">DO</span> k=1, count_tr(i,j)</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;            ip = base_tr(i,j) + k            <span class="keywordflow">IF</span>(weight(ip) &gt; weight_max) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;              weight_max = weight(ip)              x_max = mod(g_index_src(ip)-1,g_targ_row_length)+1</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;              y_max = (g_index_src(ip)-1)/g_targ_row_length+1</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;<span class="keywordflow">            END IF</span></div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;<span class="keywordflow">          END DO</span></div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;                   <span class="comment">! do not consider target points outside this process&#39;s domain</span></div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;          <span class="keywordflow">IF</span>(.NOT.gridpt_outside_proc_domain(x_max, y_max, targ_grid))  &amp;</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;               <span class="keywordflow">THEN</span>                       xpt = x_max            ypt = y_max            <span class="keyword">CALL </span>global_to_local_gridpt(xpt, ypt, targ_grid)</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;                       <span class="comment">! get src 1-d index            index = ((ypt-1)*l_targ_row_length)+xpt                       incr(index) = incr(index) + 1</span></div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;            xpt = i            ypt = j            <span class="keyword">CALL </span>local_to_global_gridpt(xpt, ypt, src_grid)</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;            contribution(index)%x(incr(index)) = xpt</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;            contribution(index)%y(incr(index)) = ypt            contribution(index)%weight(incr(index)) = weight_max            contribution(index)%contrib_proc(incr(index)) = <a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a></div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;<span class="keywordflow">                     END IF</span></div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;<span class="keywordflow">                 END IF</span></div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;       <span class="comment">! and now contributing srcs outside the process&#39;s    ! subdomain</span></div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    <span class="keywordflow">DO</span> i=1, recv_size            dat_size = recv_concern_max(i)%size      <span class="keywordflow">DO</span> j=1, dat_size                <span class="comment">! add only if target contributes</span></div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;        <span class="keywordflow">IF</span>(recv_concern_max(i)%contribute(j)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;                   x_max = recv_concern_max(i)%xtarg(j)          y_max = recv_concern_max(i)%ytarg(j)                   xpt = x_max          ypt = y_max          <span class="keyword">CALL </span>global_to_local_gridpt(xpt, ypt, targ_grid)</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;                   index = ((ypt-1)*l_targ_row_length)+xpt           incr(index) = incr(index) + 1</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;                   contribution(index)%x(incr(index)) = recv_concern_max(i)%x(j)</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;          contribution(index)%y(incr(index)) = recv_concern_max(i)%y(j)</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;          contribution(index)%weight(incr(index)) = recv_concern_max(i  &amp;</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;               )%weight(j)</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;          contribution(index)%contrib_proc(incr(index)) =               &amp;</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;               recv_concern_max(i)%proc_num</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;       <span class="comment">! release incrementer resource</span></div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    <span class="keyword">DEALLOCATE</span>(incr)</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;       <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;<span class="keyword">  END SUBROUTINE </span>calc_contributors</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;<span class="keyword"> END MODULE </span><a class="code" href="namespaceregrid__alloc__calc.xhtml" title="Module: REGRID_ALLOC_CALC!&gt; ">regrid_alloc_calc</a></div></div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
