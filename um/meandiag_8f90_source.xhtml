<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>UM General Atmosphere: /home/wilfred/PhD/UM/src/control/stash/meandiag.f90 Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="unified_model_logo_2.jpeg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">UM General Atmosphere
   &#160;<span id="projectnumber">8.6</span>
   </div>
   <div id="projectbrief">UK Met Offices Unified Model</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_b81b067251166617f9d0a8c0cfc3a4a9.xhtml">control</a></li><li class="navelem"><a class="el" href="dir_807f876cb6d36c1a4c0b1b86608d148a.xhtml">stash</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">meandiag.f90</div>  </div>
</div><!--header-->
<div class="contents">
<a href="meandiag_8f90.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">SUBROUTINE </span><a class="code" href="meandiag_8f90.xhtml#a72a0b96fb4670010dc65680c7e8ac636" title="LL Routine: MEANDIAG !&gt;LL. ">meandiag</a> (                                  &amp;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;#include &quot;argd1.h&quot;</div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="meandiag_8f90.xhtml#a72a0b96fb4670010dc65680c7e8ac636">   41</a></span>&#160;#include &quot;argduma.h&quot;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;#include &quot;argsts.h&quot;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;#include &quot;argptra.h&quot;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;#include &quot;arglndm.h&quot;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;#include &quot;arginfa.h&quot;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    i_ao,meanlev,pp_len_mean,step_dumps,mean_period,   &amp;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    max_size,                                          &amp;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    icode,cmessage)</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacemodel__file.xhtml" title="A simple data module containing variables related to STASH buffering. ">model_file</a><span class="keywordtype">, ONLY</span> :     &amp;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;      get_file_address,      &amp;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;      <a class="code" href="namespacemodel__file.xhtml#aacc094150900b26129ee4dd93e602617" title="!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!...">mf_lookup_address</a>,     &amp;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;      attachlookups,         &amp;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;      <a class="code" href="namespacemodel__file.xhtml#a07b515dfc8147e86355cd71196399c5d">model_file_open</a>,       &amp;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;      model_file_close</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacemppio__job__control.xhtml" title="Code Owner: See Unified Model Code owners HTML page. ">mppio_job_control</a><span class="keywordtype">, ONLY</span> :        &amp;      <a class="code" href="interfacemppio__job__control_1_1jobcntrl.xhtml" title="API for model code. Send a command/string to the pipe file. ">jobcntrl</a></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacemppio__job__control__common.xhtml" title="Code Owner: See Unified Model Code owners HTML page. ">mppio_job_control_common</a><span class="keywordtype">, ONLY</span> : &amp;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;      <a class="code" href="namespacemppio__job__control__common.xhtml#a508db6787db9035d3f4ed6a97a130761">jc_archiveppnochart</a>,             &amp;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;      <a class="code" href="namespacemppio__job__control__common.xhtml#a8ddba578055dd228976c35737688796a">jc_workstationsend</a>,              &amp;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;      <a class="code" href="namespacemppio__job__control__common.xhtml#a931f1417bb29bcd5298c3b0f246c35e2">jc_delete</a></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespaceio.xhtml" title="Code Owner: See Unified Model Code owners HTML page. ">io</a></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  <span class="keywordtype">USE </span>parkind1<span class="keywordtype">, ONLY</span>: jprb, jpim</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;  <span class="keywordtype">USE </span>yomhook<span class="keywordtype">, ONLY</span>: lhook, dr_hook</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  <span class="keywordtype">USE </span>atm_fields_bounds_mod</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespaceum__input__control__mod.xhtml" title="*****************************COPYRIGHT******************************** *****************************C...">um_input_control_mod</a><span class="keywordtype">, ONLY</span>: <a class="code" href="namespaceum__input__control__mod.xhtml#a9379d2394efa879a4fbd3be4ea34b035">lcal360</a></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacefilenamelength__mod.xhtml" title="Module for allocation of Filename length. Module for allocation of Filename length. ">filenamelength_mod</a><span class="keywordtype">, ONLY</span> : <a class="code" href="namespacefilenamelength__mod.xhtml#a1f0ba129cfb2cc488313a144ac04a0e8" title="The module sets the max length of a filename in the UM. ">filenamelength</a></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespaceio__configuration__mod.xhtml" title="This file belongs in section: C96. ">io_configuration_mod</a><span class="keywordtype">, ONLY</span> : <a class="code" href="namespaceio__configuration__mod.xhtml#a47a1a0bfdbd64545a5967659ae7d6435">io_field_padding</a></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  <span class="keywordtype">USE </span>um_parvars</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacecontrol__max__sizes.xhtml" title="This file belongs in section: Misc. ">control_max_sizes</a></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacedecomp__db.xhtml" title="This file belongs in section: MPP. ">decomp_db</a></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespaceumprintmgr.xhtml" title="This file belongs in section: Misc. ">umprintmgr</a><span class="keywordtype">, ONLY</span> :      &amp;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;      <a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>,                &amp;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;      <a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,              &amp;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;      <a class="code" href="namespaceumprintmgr.xhtml#a956d5068b5b528afc5bed1435ced4b99" title="$OMP THREADPRIVATE (umMessage) ">printstatus</a>,            &amp;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;      <a class="code" href="namespaceumprintmgr.xhtml#af03b710c9e538edb8c1e1b272939a657">prstatus_diag</a></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacelookup__addresses.xhtml" title="Parameters for addressing elements in a UM file lookup table. ">lookup_addresses</a></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacecppxref__mod.xhtml" title="Code Owner: See Unified Model Code Owners HTML page. ">cppxref_mod</a><span class="keywordtype">, ONLY</span>:      &amp;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;      <a class="code" href="namespacecppxref__mod.xhtml#a92932120a5316135ed39321fd93d34eb">ppx_grid_type</a>,          &amp;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;      <a class="code" href="namespacecppxref__mod.xhtml#a1e1bb8d235072b8e488c5f81a2686607">ppx_packing_acc</a></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacenlstgen__mod.xhtml" title="Control variables Control variables. ">nlstgen_mod</a><span class="keywordtype">, ONLY</span>: <a class="code" href="namespacenlstgen__mod.xhtml#aded406ffa8d50a7c4a6325c5b75eb03d">steps_per_periodim</a>, <a class="code" href="namespacenlstgen__mod.xhtml#a4a6ed31ef0d09bdc976baf277d1acbe7">secs_per_periodim</a>,   &amp;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;      <a class="code" href="namespacenlstgen__mod.xhtml#a5ee4ff12e6cb7044da2744229da35b1a" title="Number of steps between atmosphere restart dumps. ">dumpfreqim</a>, <a class="code" href="namespacenlstgen__mod.xhtml#ab5ec3bcd1be7dd522259efa361474cd2" title="PP field selectors. ">ppselectim</a>, <a class="code" href="namespacenlstgen__mod.xhtml#a78a9dc471e3a5c48c551a6f809cb91d5" title="Indicators for mean dump frequency. ">meanfreqim</a>, <a class="code" href="namespacenlstgen__mod.xhtml#a09486d8c08da329d62d75916daaddcbd" title="Switches for pp field archive. ">archppselim</a>, <a class="code" href="namespacenlstgen__mod.xhtml#a6e3df10397f8ff18d958e84567d665d2" title="Unit reserved for mean PPs. ">ft_meanim</a></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacesubmodel__mod.xhtml" title="A module to contain information about submodels A module to contain information about submodels...">submodel_mod</a></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacetypstsz__mod.xhtml" title="This file belongs in section: Top_level This file belongs in section: Top_level. ">typstsz_mod</a></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacenlstcall__mod.xhtml" title="Control variables Control variables. ">nlstcall_mod</a><span class="keywordtype">, ONLY</span> : <a class="code" href="namespacenlstcall__mod.xhtml#ac876dfc292cca09baeafc00914760fdb">pp_pack_code</a>, &amp;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                           <a class="code" href="namespacenlstcall__mod.xhtml#a28feded25ee0c3bf8d91cc063e2da08d">lclimrealyr</a>, &amp;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                           <a class="code" href="namespacenlstcall__mod.xhtml#a6742d2f37fdd588b78ebb6b25071487c">ft_select</a></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacechsunits__mod.xhtml" title="copied from include file chsunits.h ">chsunits_mod</a><span class="keywordtype">, ONLY</span> : <a class="code" href="namespacechsunits__mod.xhtml#af6e26d3a6a1fedf0b44203712a772f8e">nunits</a></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;  <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="preprocessor">#include &quot;cintfa.h&quot;</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;typsize.h&quot;</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;typd1.h&quot;</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;typduma.h&quot;</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;typsts.h&quot;</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;typptra.h&quot;</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;typlndm.h&quot;</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;typinfa.h&quot;</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;comvgrid.h&quot;</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="preprocessor"></span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  <span class="keywordtype">INTEGER</span>                          &amp;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;      I_AO,                     &amp;<span class="comment">! IN  Atmosphere/Ocean indicator</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;      MEANLEV,                  &amp;<span class="comment">! IN  Mean level indicator</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;      PP_LEN_MEAN,              &amp;<span class="comment">! IN  Number of fields in output PPfile</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;      STEP_DUMPS,               &amp;<span class="comment">! IN  Timestep in multiples of restart</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                                 <span class="comment">!     dump frequency.</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;      mean_period,              &amp;<span class="comment">! IN  meaning frequency.</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;      max_size,                 &amp;<span class="comment">! IN  maximum dump field size</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;      icode                      <span class="comment">! OUT return code; successful=0, error&gt; 0</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;  <span class="comment">!</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  <span class="keywordtype">CHARACTER(LEN=80)</span>                   &amp;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;      CMESSAGE                   <span class="comment">! OUT Error message if ICODE &gt; 0</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">!*</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">! Common blocks and parameters</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="preprocessor">#include &quot;stparam.h&quot;</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;chistory.h&quot;</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;ctime.h&quot;</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;c_mdi.h&quot;</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="preprocessor"></span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">! Function definition</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  <span class="keywordtype">INTEGER</span>  EXPPXI</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">! Dynamic allocated workspace</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">DIMENSION(:,:)</span>, <span class="keywordtype">POINTER</span> :: PPLOOK</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  <span class="keywordtype">REAL</span> buf(max_size)  <span class="comment">! I/O buffer space</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  <span class="keywordtype">INTEGER</span> IPPLOOK(len1_lookup)          <span class="comment">! Copy of D1 field header</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;     <span class="comment">!     Local variables and arrays</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  <span class="keywordtype">CHARACTER(LEN=filenamelength)</span> :: ppname  <span class="comment">! Name of PPfile</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  <span class="keywordtype">REAL</span> A_IO                      <span class="comment">! IO error return code on BUFFER IO</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  <span class="keywordtype">INTEGER</span>                       &amp;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;      WORD_ADDRESS,             &amp;<span class="comment">! IO word address on BUFFER IO</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;      LEN_IO,                   &amp;<span class="comment">! IO transfer length on BUFFER IO</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;      PPUNIT,                   &amp;<span class="comment">! FORTRAN unit number for PPfile</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;      INDEXM,                   &amp;<span class="comment">! Mean level index</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;      FIELD,                    &amp;<span class="comment">! Index over field number in LOOKUP</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;      FIELD_ADDRESS,            &amp;<span class="comment">! Address of field in D1</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;      FIELD_LENGTH,             &amp;<span class="comment">! Length of single field</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;      BUFFER_LENGTH,            &amp;<span class="comment">! Length of buffer for field</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;      IS,IM,                    &amp;<span class="comment">! STASH section,item codes for field</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;      IE,                       &amp;<span class="comment">! STLIST index over entries</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;      modl,                     &amp;<span class="comment">! Int. model no. read from STASH record</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;      TAG,                      &amp;<span class="comment">! STLIST tag used to identify field</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;      NROWS,                    &amp;<span class="comment">! No of rows in field</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;      NCOLS,                    &amp;<span class="comment">! No of columns in field</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;      NO,N_LEVS,                &amp;<span class="comment">! Bottom level and number of levels</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;      LEVEL,                    &amp;<span class="comment">! Index over levels</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;      COMP_ACCRCY,              &amp;<span class="comment">! Packing accracy</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;      LBTIM_IA,                 &amp;<span class="comment">! Sampling period in hours for LBTIM</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;      LBTIM_IB,                 &amp;<span class="comment">! Type of time field for LBTIM</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;      IWA,                      &amp;<span class="comment">! Word address used in SETPOS</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;      ICURRLL,                  &amp;<span class="comment">! Current position in PP LOOKUP table</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;      ICURRL1,                  &amp;<span class="comment">! Current position in PP LOOKUP table</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;      LEN_BUF_WORDS,            &amp;<span class="comment">! NUM_WORDS rounded to 512</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;      NUM_WORDS,                &amp;<span class="comment">! Number of words reqd to hold the data</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;      I,                        &amp;<span class="comment">! Loop index</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;      NF,                       &amp;<span class="comment">! No of field</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;      START_DAY,                &amp;<span class="comment">! Start time for mean period (days)</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;      START_SECOND,             &amp;<span class="comment">! Start time for mean period (seconds)</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;      PERIOD_DAYS,              &amp;<span class="comment">! Start time for mean period (days)</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;      PERIOD_SECS,              &amp;<span class="comment">! Start time for mean period (seconds)</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;      START_TIME(7),            &amp;<span class="comment">! Start time for mean period(date/time)</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;      im_ident,                 &amp;<span class="comment">! Internal Model Identifier</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;      im_index,                 &amp;<span class="comment">! Internal Model Index for stash</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;      LEN_PPNAME,               &amp;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;      PACKING_TYPE,             &amp;<span class="comment">! 0=unpacked, 1=WGDOS, 3=GRIB</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;      GRIB_PACKING,             &amp;<span class="comment">! packing profile used for grib packing</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;      D1POS,                    &amp;<span class="comment">! Position of info in D1_ADDR array</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;      orig_decomp,              &amp;<span class="comment">! Used to check for change in</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;      new_decomp                 <span class="comment">! decomposition</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;  <span class="keywordtype">INTEGER</span> LEN_EXTRA <span class="comment">! IN size of expected extra data</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;  <span class="keywordtype">INTEGER</span> SROW_OUT  <span class="comment">! Dummy - 1st southern row to output</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  <span class="keywordtype">INTEGER</span> WCOL_OUT  <span class="comment">! Dummy - 1st western column to output</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  <span class="keywordtype">LOGICAL</span>                          &amp;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;      PACKING,                  &amp;<span class="comment">! Switch to enable optional packing</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;      LPACKFIELD,               &amp;<span class="comment">! Per-field packing indicator          GRIB_OUT                   ! .True. if output to be in grib</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;  <span class="keywordtype">INTEGER</span>                       &amp;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;       GR,                      &amp;<span class="comment">! Gridtype code</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;       GLOBAL_PPHORIZ_OUT,      &amp;<span class="comment">! Size of global field</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;       info,                    &amp;<span class="comment">! Unused arg in GCOM calls</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;       LOCAL_LEN,               &amp;<span class="comment">! Length of field:</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                                 <span class="comment">! from GENERAL_GATHER_FIELD</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;       subm                      <span class="comment">! Submodel number for internal model id</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;   <span class="keywordtype">REAL</span> A                         <span class="comment">! To hold return code</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                                 <span class="comment">! from GENERAL_GATHER_FIELD</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;  <span class="keywordtype">INTEGER</span> grid_type <span class="comment">! grid type - for extra data processing</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;  <span class="keywordtype">INTEGER</span> fld_type  <span class="comment">! field type - for extra data processing</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;  <span class="keywordtype">INTEGER</span> EXTRA_VAR_DATA <span class="comment">! Length of variable grid data</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;  <span class="keywordtype">INTEGER</span> GET_FLD_TYPE <span class="comment">! Function</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  <span class="keywordtype">INTEGER</span> IERR  <span class="comment">! GCOM returns</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;  <span class="keywordtype">INTEGER</span> IPPVAL</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;  <span class="keywordtype">REAL</span>    RPPVAL</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">PARAMETER</span> :: CURRENT_IO_PE = 0</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;   <span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  <span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;  <span class="keywordtype">REAL(KIND=jprb)</span>               :: zhook_handle</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;       <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;MEANDIAG&#39;</span>,zhook_in,zhook_handle)</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;      im_ident = i_ao</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;      im_index = <a class="code" href="namespacesubmodel__mod.xhtml#a5a10dac97f579ecbf0c1c1879901e2e0" title="Sequence number of internal model indexed by internal model identifier required to map from id to STA...">internal_model_index</a>(im_ident)</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment">!L!L 1. Initialise output ppfile for mean data at level MEANLEV.</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">!L    OPEN the file ready to receive mean PPfields from STASH.</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment">!L</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment">! DEPENDS ON: ppctl_init_climate_means</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;      <span class="keyword">CALL </span><a class="code" href="ppctl__init__climate__means_8f90.xhtml#adab56a3cc0e15dd8146f81fef8a766e7">ppctl_init_climate_means</a> (          &amp;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="preprocessor">#include &quot;argduma.h&quot;</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="preprocessor"></span>           i_ao,meanlev,ppname,icode,cmessage)</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;      <span class="keywordflow">IF</span> (icode &gt;  0) <span class="keywordflow">GOTO</span> 9999</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;      <span class="keywordflow">IF</span> (i_ao == 1 .OR. i_ao == 2) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        ppunit = <a class="code" href="namespacenlstgen__mod.xhtml#a6e3df10397f8ff18d958e84567d665d2" title="Unit reserved for mean PPs. ">ft_meanim</a>(i_ao)</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;      <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        icode = 311</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        cmessage=<span class="stringliteral">&#39;MEANDIAG : I_AO has invalid value&#39;</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        <span class="keywordflow">GOTO</span> 9999</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;      len_ppname=len(ppname)</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;           <span class="keyword">CALL </span><a class="code" href="namespacemodel__file.xhtml#a07b515dfc8147e86355cd71196399c5d">model_file_open</a>(ppunit,ppname,len_ppname,1,1,icode)</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;      <span class="keywordflow">IF</span> (icode /= 0) <span class="keywordflow">GOTO</span> 9999</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment">!L!L 2. Extract mean fields from mean dump fields in D1, and append to</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment">!L    mean PPfile.  The fields dealt with in this section are the</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment">!L    prognostic fields as meaned by the climate meaning system, plus</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment">!L    fields derived from them (in the case of the atmosphere).</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment">!L    The STASH section number depends on the mean level and whether</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment">!L    atmosphere or ocean.  Different sets of fields can be requested</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment">!L    from different mean periods.</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment">!L</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;      <span class="keywordflow">IF</span> (i_ao == 1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment">! DEPENDS ON: st_mean</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        <span class="keyword">CALL </span><a class="code" href="st__mean_8f90.xhtml#a56c57d59e0430c6d123a6e4a366df8e6" title="LL Routine: ST_MEAN -!&gt;LL. ">st_mean</a> (                 &amp;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="preprocessor">#include &quot;argd1.h&quot;</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;argduma.h&quot;</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;argsts.h&quot;</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;argptra.h&quot;</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;arglndm.h&quot;</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="preprocessor"></span>     &amp;                20+meanlev,stash_maxlen(20+meanlev,im_index),     &amp;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;     &amp;                icode,cmessage)</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="keywordflow">      ENDIF</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;      <span class="keywordflow">IF</span> (icode &gt;  0) <span class="keywordflow">GOTO</span> 9999</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment">!L!L 3. Loop over STASHlist entries and extract tagged fields which are</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment">!L already processed into D1 by STASH to the mean PP file</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment">!L</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment">!L 3.1 Get the address of lookups for the PP file</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment">!L</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;      word_address=get_file_address(ppunit,<a class="code" href="namespacemodel__file.xhtml#aacc094150900b26129ee4dd93e602617" title="!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!&gt;!...">mf_lookup_address</a>)</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="comment">!L</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment">!L 3.2 Buffer in PPfile lookup header to PPLOOK work array</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment">!L</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;      <span class="keywordflow">IF</span> (<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a> == current_io_pe) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        pplook=&gt;attachlookups(ppunit)</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;      <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="keyword">ALLOCATE</span>(pplook(len1_lookup,pp_len_mean))</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment">! broadcast the lookup table to other PEs</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;      <span class="keyword">CALL </span>gc_ibcast(74,len1_lookup*pp_len_mean,current_io_pe,nproc,   &amp;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;          ierr,pplook)</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment">!L</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment">!L 3.3 Initialise output address and LOOKUP entry number in the PPfile</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment">!L</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;      icurrll=ft_lastfield(ppunit)</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;      icurrl1=ft_lastfield(ppunit)  <span class="comment">! required if grib output</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;      <span class="keywordflow">IF</span> (icurrll == 0) <span class="keywordflow">THEN</span>  <span class="comment">! this is the first field</span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        iwa=word_address+len1_lookup*pp_len_mean</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment">! round address up to io_field_padding-words</span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        iwa=((iwa+<a class="code" href="namespaceio__configuration__mod.xhtml#a47a1a0bfdbd64545a5967659ae7d6435">io_field_padding</a>-1)/<a class="code" href="namespaceio__configuration__mod.xhtml#a47a1a0bfdbd64545a5967659ae7d6435">io_field_padding</a>)*<a class="code" href="namespaceio__configuration__mod.xhtml#a47a1a0bfdbd64545a5967659ae7d6435">io_field_padding</a></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;      <span class="keywordflow">ELSE</span>                    <span class="comment">! append to the previous field</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        iwa=pplook(<a class="code" href="namespacelookup__addresses.xhtml#afbf7195b85d47a8f92d0769c84f846a4">lbegin</a>,icurrll)+pplook(<a class="code" href="namespacelookup__addresses.xhtml#a7fbd5df41f854a6fd5c4d35c0942742e">lbnrec</a>,icurrll)</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment">! Use pp_pack_code to set packing type and GRIB flag</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment">! For GRB output reset pp_pack_code to give packing profile.</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;      <span class="keywordflow">IF</span> (<a class="code" href="namespacenlstcall__mod.xhtml#ac876dfc292cca09baeafc00914760fdb">pp_pack_code</a>(ppunit) &gt;= 100) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        grib_out=.true.</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        <a class="code" href="namespacenlstcall__mod.xhtml#ac876dfc292cca09baeafc00914760fdb">pp_pack_code</a>(ppunit)=<a class="code" href="namespacenlstcall__mod.xhtml#ac876dfc292cca09baeafc00914760fdb">pp_pack_code</a>(ppunit)-100</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        grib_packing=<a class="code" href="namespacenlstcall__mod.xhtml#ac876dfc292cca09baeafc00914760fdb">pp_pack_code</a>(ppunit)</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        packing_type=3</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;      <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        grib_out=.false.</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment">! Set packing switch : profile 0 means no packing</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;      <span class="keywordflow">IF</span> (<a class="code" href="namespacenlstcall__mod.xhtml#ac876dfc292cca09baeafc00914760fdb">pp_pack_code</a>(ppunit) == 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        packing=.false.</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;      <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        packing=.true.</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="comment">!L</span></div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="comment">!L 3.4 Start loop over STASHlist entries.</span></div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment">!L</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment">!L 3.41 Check if job exceeds the UM field limit</span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;      nf=0</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;      <span class="keywordflow">DO</span> ie=1,<a class="code" href="namespacetypstsz__mod.xhtml#a37cf3a635bd0a87949973ea24fb6a680">totitems</a></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        tag=stlist(st_macrotag, ie)/1000</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        <span class="keywordflow">IF</span> (mod(tag/(2**(meanlev-1)),2)  == 1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;          <span class="keywordflow">IF</span> ((stlist(st_input_bottom,ie) == st_special_code).OR.       &amp;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;               (stlist(st_gridpoint_code,ie) &lt;  vert_mean_top .AND.     &amp;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                stlist(st_gridpoint_code,ie) &gt;  vert_mean_base).OR.     &amp;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;               (stlist(st_series_ptr,ie) &gt;  0)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            n_levs=1</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;          <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;            no=stlist(st_output_bottom,ie)</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            <span class="keywordflow">IF</span> (no &lt;  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;              n_levs=stash_levels(1,-no)</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;              n_levs=stlist(st_output_top,ie)-                          &amp;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                     stlist(st_output_bottom,ie)+1</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="keywordflow">            END IF</span></div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;          <span class="keywordflow">IF</span> (stlist(st_pseudo_out,ie) &gt;  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            no=stlist(st_pseudo_out,ie)</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;            n_levs=n_levs*stash_pseudo_levels(1,no)</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;          nf=nf+n_levs</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="keywordflow">      ENDDO</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;      <span class="keywordflow">IF</span> (nf &gt;  pp_len_mean) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*)<span class="stringliteral">&#39;ERROR: UM limit of &#39;</span>,pp_len_mean,                    &amp;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;     &amp;            <span class="stringliteral">&#39; fields exceed&#39;</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;meandiag&#39;</span>)</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*)<span class="stringliteral">&#39;Use VERIFY DIAGNOSTICS in UMUI&#39;</span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;meandiag&#39;</span>)</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*)<span class="stringliteral">&#39;See HELP in UMUI STASH panel&#39;</span></div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;meandiag&#39;</span>)</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        icode=4</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        cmessage=<span class="stringliteral">&#39; MEANDIAG: Exceed fields limit&#39;</span></div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        <span class="keywordflow">GOTO</span> 9999</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="comment">! Note in the case of grib output this loop is used to set up pp headers</span></div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="comment">! only</span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;      <span class="keywordflow">IF</span> (<a class="code" href="namespaceumprintmgr.xhtml#a956d5068b5b528afc5bed1435ced4b99" title="$OMP THREADPRIVATE (umMessage) ">printstatus</a> &gt;= <a class="code" href="namespaceumprintmgr.xhtml#af03b710c9e538edb8c1e1b272939a657">prstatus_diag</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;         <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*)<span class="stringliteral">&#39;MEANDIAG: Processing ...&#39;</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;         <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;meandiag&#39;</span>)</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;      <span class="keywordflow">DO</span> ie =1,<a class="code" href="namespacetypstsz__mod.xhtml#a37cf3a635bd0a87949973ea24fb6a680">totitems</a></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        modl=stlist(st_model_code  ,ie)</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        is  =stlist(st_sect_no_code,ie)</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        im  =stlist(<a class="code" href="stparam_8h.xhtml#a178dd1274371de0f13977f975781323a">st_item_code</a>   ,ie)</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        tag =stlist(st_macrotag    ,ie)/1000</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        <span class="keywordflow">IF</span> ( (mod(tag/(2**(meanlev-1)),2)  == 1) .AND.                  &amp;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;             (i_ao == modl) ) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        <span class="keywordflow">IF</span> (<a class="code" href="namespaceumprintmgr.xhtml#a956d5068b5b528afc5bed1435ced4b99" title="$OMP THREADPRIVATE (umMessage) ">printstatus</a> &gt;= <a class="code" href="namespaceumprintmgr.xhtml#af03b710c9e538edb8c1e1b272939a657">prstatus_diag</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;           <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(1X,A,I4,I4)&#39;</span>)<span class="stringliteral">&#39;MEANDIAG: Section, Item was set to &#39;</span>,&amp;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;           is,im</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;           <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;meandiag&#39;</span>)</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="comment">! The Tag matches this mean period and the item is in this dump  .</span></div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="comment">! Determine the number of output levels and starting LOOKUP header</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="comment">! (Number of levels now includes possible pseudo_levels)</span></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="comment">! NB: Note that vertical means (single output level) are a special case</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="comment">!     as are timeseries (also single output level)</span></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;          <span class="keywordflow">IF</span> (stlist(st_input_bottom,ie) == st_special_code) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;            n_levs=1                       <span class="comment">! Output is a special level</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;          <span class="keywordflow">ELSEIF</span> (stlist(st_gridpoint_code,ie) &lt;  vert_mean_top .AND.   &amp;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                  stlist(st_gridpoint_code,ie) &gt;  vert_mean_base) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;            n_levs=1                       <span class="comment">! Output is a vertical mean</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;          <span class="keywordflow">ELSEIF</span> (stlist(st_series_ptr,ie) &gt;  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;            n_levs=1                       <span class="comment">! Output is a timeseries</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;          <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;            no=stlist(st_output_bottom,ie)</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;            <span class="keywordflow">IF</span> (no &lt;  0) <span class="keywordflow">THEN</span>              <span class="comment">! Output is level list</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;              n_levs=stash_levels(1,-no)</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            <span class="keywordflow">ELSE</span>                           <span class="comment">! Output is level range</span></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;              n_levs=stlist(st_output_top,ie)-                          &amp;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                     stlist(st_output_bottom,ie)+1</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="keywordflow">            END IF</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;          <span class="keywordflow">IF</span> (stlist(st_pseudo_out,ie) &gt;  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;            no=stlist(st_pseudo_out,ie)</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;            n_levs=n_levs*stash_pseudo_levels(1,no)</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;          field=stlist(st_lookup_ptr,ie)</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;<span class="comment">! Address of distributed field in D1</span></div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;          field_address=stlist(st_output_addr,ie)</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="comment">! Loop over the number of output levels</span></div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;          <span class="keywordflow">DO</span> level=1,n_levs</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="comment">! Copy LOOKUP header for field from A_LOOKUP to work header</span></div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;            <span class="keywordflow">IF</span> (i_ao == 1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;              <span class="keywordflow">DO</span> i=1,len1_lookup</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                ipplook(i)=a_lookup(i,field+level-1)</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="keywordflow">              ENDDO</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="keywordflow">            END IF</span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="comment">! Field and buffer sizes, and field address in D1</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;            field_length =ipplook(<a class="code" href="namespacelookup__addresses.xhtml#ab82991ff70c45e8f733b4446f83e0556">lblrec</a>)</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;            <span class="keywordflow">IF</span> (field_length  &gt;   max_size) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;              <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;Error in MEANDIAG : MAX_SIZE too small.&#39;</span></div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;              <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;meandiag&#39;</span>)</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;              <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;MAX_SIZE= &#39;</span>,max_size</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;              <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;meandiag&#39;</span>)</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;              <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;FIELD_LENGTH= &#39;</span>,field_length</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;              <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;meandiag&#39;</span>)</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;              icode=1</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;              cmessage=<span class="stringliteral">&#39;MEANDIAG: MAX_SIZE too small&#39;</span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;              <span class="keywordflow">GOTO</span> 9999</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="keywordflow">            END IF</span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            nrows=ipplook(<a class="code" href="namespacelookup__addresses.xhtml#a54e6ad5def513311547cbefc60aee032">lbrow</a>)</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;            ncols=ipplook(<a class="code" href="namespacelookup__addresses.xhtml#a9ae4b281a4481f6737cda3288e5d7971">lbnpt</a>)</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;            buffer_length=((field_length+<a class="code" href="namespaceio__configuration__mod.xhtml#a47a1a0bfdbd64545a5967659ae7d6435">io_field_padding</a>-1)/             &amp;</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;            <a class="code" href="namespaceio__configuration__mod.xhtml#a47a1a0bfdbd64545a5967659ae7d6435">io_field_padding</a>)*<a class="code" href="namespaceio__configuration__mod.xhtml#a47a1a0bfdbd64545a5967659ae7d6435">io_field_padding</a></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="comment">! Section/Item codes</span></div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;            is=ipplook(<a class="code" href="namespacelookup__addresses.xhtml#a4f2a173b22a48250d86265493664e6ad">item_code</a>)/1000</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;            im=ipplook(<a class="code" href="namespacelookup__addresses.xhtml#a4f2a173b22a48250d86265493664e6ad">item_code</a>)-1000*is</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;      <span class="comment">! Ensure LEN_EXTRA is initialised</span></div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;      len_extra = ipplook(<a class="code" href="namespacelookup__addresses.xhtml#a36fe53c5769dee10ac1c6609f9fa6c2d">lbext</a>)</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;      srow_out = 1</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;      wcol_out = 1</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;      var_grid_type = 0</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;      extra_var_data = 0</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;      <span class="comment">! If we&#39;re dealing with an ocean model which uses variable</span></div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;      <span class="comment">! grid spacing.</span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;      <span class="keywordflow">IF</span> ((x_var_grid.OR.y_var_grid).AND.(i_ao == 2)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;         <span class="comment">! Find the grid type</span></div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="comment">! DEPENDS ON: exppxi</span></div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;         grid_type = exppxi( im_ident, is, im, <a class="code" href="namespacecppxref__mod.xhtml#a92932120a5316135ed39321fd93d34eb">ppx_grid_type</a>,           &amp;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;     &amp;             icode, cmessage)</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;         <span class="comment">! Find the field type</span></div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="comment">! DEPENDS ON: get_fld_type</span></div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;         fld_type=get_fld_type(grid_type)</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;         <span class="comment">! Each dimesion has 3 lots of extra grid data          ! grid coordinates, lower and upper box boundaries.</span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;         <span class="comment">! May need to incorporate test to exclude certain</span></div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;         <span class="comment">! grid types (eg LBCs) if they&#39;re not appropriate.</span></div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;         <span class="keywordflow">IF</span> (fld_type == fld_type_p) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;            var_grid_type = 1 <span class="comment">! It&#39;s a T field</span></div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;            <span class="keywordflow">IF</span> (x_var_grid) extra_var_data =                            &amp;</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                            extra_var_data + (3*(ncols+1))</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;            <span class="keywordflow">IF</span> (y_var_grid) extra_var_data =                            &amp;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                            extra_var_data + (3*(nrows+1))</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;         <span class="keywordflow">ELSEIF</span> (fld_type == fld_type_u.OR.                             &amp;</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                 fld_type == fld_type_v) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;            var_grid_type = 2 <span class="comment">! It&#39;s a U,V field</span></div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;            <span class="keywordflow">IF</span> (x_var_grid) extra_var_data =                            &amp;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                            extra_var_data + (3*(ncols+1))</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;            <span class="keywordflow">IF</span> (y_var_grid) extra_var_data =                            &amp;</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                            extra_var_data + (3*(nrows+1))</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="keywordflow">         END IF</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;         len_extra = extra_var_data</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="comment">! Packing accuracy of the data :! NB: Presence of extra data disables packing for this field</span></div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;            <span class="keywordflow">IF</span> (packing.AND.(ipplook(<a class="code" href="namespacelookup__addresses.xhtml#a36fe53c5769dee10ac1c6609f9fa6c2d">lbext</a>) &lt;= 0)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;               comp_accrcy=                                             &amp;</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;<span class="comment">! DEPENDS ON: exppxi</span></div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;     &amp;    exppxi(modl,is,im,<a class="code" href="namespacecppxref__mod.xhtml#a1e1bb8d235072b8e488c5f81a2686607">ppx_packing_acc</a>+<a class="code" href="namespacenlstcall__mod.xhtml#ac876dfc292cca09baeafc00914760fdb">pp_pack_code</a>(ppunit)-1,     &amp;</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;     &amp;                                 icode,cmessage)</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;              lpackfield=.true.</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;            <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;              comp_accrcy=-99</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;              lpackfield=.false.</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="keywordflow">            END IF</span></div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;            <span class="keywordflow">IF</span> (.NOT.grib_out) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;              <span class="keyword">CALL </span><a class="code" href="namespaceio.xhtml#a6eff09a3646b168907ebda58a5355b2a">setpos</a>(ppunit,iwa,icode)</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;              subm=<a class="code" href="namespacesubmodel__mod.xhtml#afa0d02e91180c750bc3e4d6cfb82f095" title="Submodel number for each submodel id. ">submodel_for_sm</a>(im_ident)</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;<span class="comment">!             Reuse decomposition type if it is unchanged. Otherwise</span></div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;<span class="comment">!             change it to the new type.</span></div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;              d1pos=stlist(st_d1pos,ie)</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;              orig_decomp=current_decomp_type</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;              new_decomp=orig_decomp</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;              <span class="keywordflow">IF</span> ((d1_addr(d1_imodl,d1pos,subm)  ==  <a class="code" href="namespacesubmodel__mod.xhtml#a46a6f4e4a4119ea74676854f5e7e5e2b">atmos_im</a>) .AND.    &amp;</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                (orig_decomp  /=  <a class="code" href="namespacedecomp__params.xhtml#afabb52a8e8d6cdfe3f3366dd918058d8" title="decomps for atmos ">decomp_standard_atmos</a>)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                new_decomp=<a class="code" href="namespacedecomp__params.xhtml#afabb52a8e8d6cdfe3f3366dd918058d8" title="decomps for atmos ">decomp_standard_atmos</a></div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;<span class="keywordflow">              END IF</span></div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;              <span class="keywordflow">IF</span> (new_decomp  /=  orig_decomp) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                icode=0</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                <span class="keyword">CALL </span>change_decomposition(new_decomp,icode)</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                <span class="keywordflow">IF</span> (icode  /=  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                  <span class="keywordflow">IF</span> (<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>  ==  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;ERROR : MEAN_DIAG&#39;</span></div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;meandiag&#39;</span>)</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;Failed to change decomposition to &#39;</span>,    &amp;</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;     &amp;                new_decomp</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;meandiag&#39;</span>)</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;Field M,S,I &#39;</span>,                          &amp;</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;     &amp;                d1_addr(d1_imodl,d1pos,subm),                     &amp;</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;     &amp;                d1_addr(d1_section,d1pos,subm),                   &amp;</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;     &amp;                d1_addr(d1_item,d1pos,subm)</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;meandiag&#39;</span>)</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;<span class="keywordflow">                  ENDIF</span></div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;                  cmessage=<span class="stringliteral">&#39;MEANDIAG : Failed to change decomposition&#39;</span></div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;                  <span class="keywordflow">GOTO</span> 9999</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;<span class="keywordflow">                END IF</span></div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;<span class="keywordflow">              END IF</span></div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;<span class="comment">!             Gather full field to PE0</span></div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;<span class="comment">! DEPENDS ON: general_gather_field</span></div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;              <span class="keyword">CALL </span><a class="code" href="general__gather__field_8f90.xhtml#a63a436a252da9e380674b97cf0f4ba86" title="Takes a general decomposed field on many processors and gathers it. ">general_gather_field</a>(d1(field_address),buf,local_len,&amp;</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                field_length,1,d1_addr(1,stlist(st_d1pos,ie),subm),0,   &amp;</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                -1,icode,cmessage)</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;              <span class="keywordflow">IF</span> (icode  ==  1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*)<span class="stringliteral">&#39;MEANDIAG: Field number &#39;</span>,is,                 &amp;</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;     &amp;            <span class="stringliteral">&#39;with dimensions &#39;</span>, ncols,<span class="stringliteral">&#39; x &#39;</span>,                      &amp;</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;     &amp;            nrows,<span class="stringliteral">&#39; and gridtype &#39;</span>,                               &amp;</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;     &amp;            d1_addr(d1_grid_type,stlist(st_d1pos,ie),subm),       &amp;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;     &amp;            <span class="stringliteral">&#39;was unrecognized and not gathered.&#39;</span></div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;meandiag&#39;</span>)</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                cmessage=<span class="stringliteral">&#39;MEANDIAG: Unrecognized field on write&#39;</span></div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                <span class="keywordflow">GOTO</span> 9999</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;              <span class="keywordflow">ELSEIF</span> (icode  /=  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                <span class="keywordflow">GOTO</span> 9999</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;<span class="keywordflow">              END IF</span></div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;              icode=0</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;              <span class="keywordflow">IF</span> (<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>  ==  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;<span class="comment">! DEPENDS ON: pp_file</span></div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                <span class="keyword">CALL </span><a class="code" href="pp__file_8f90.xhtml#a16dcddb977828f88bb3f21e8bc1b8c30" title="SUBROUTINE PP_FILE -!&gt; ">pp_file</a>(buf,-1,buffer_length,num_words,rmdi,   &amp;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                    comp_accrcy,field_length,ppunit,iwa,ncols,nrows,&amp;</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                    packing,im_ident,                               &amp;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                    packing_type,0,                                 &amp;</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                    len_extra,srow_out,wcol_out,icode,cmessage)</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;<span class="keywordflow">              END IF</span></div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;              <span class="keyword">CALL </span>gc_isum(1, nproc, info, icode)</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;              <span class="keywordflow">IF</span>(icode &gt;  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                cmessage=                                               &amp;</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                  <span class="stringliteral">&#39;MEANDIAG: Error in PP_FILE - see ICODE for item&#39;</span></div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                icode=1000*is+im</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                <span class="keywordflow">GOTO</span> 9999</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;<span class="keywordflow">              END IF</span></div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;<span class="comment">! Increment field address to point to next level if there is one.</span></div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;              field_address=field_address+local_len</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;<span class="keywordflow">            END IF</span></div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;<span class="comment">! Copy work header for field to next PPfile header</span></div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;            icurrll=icurrll+1                           <span class="comment">! Next field</span></div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;            <span class="keywordflow">DO</span> i=1,len1_lookup</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;              pplook(i,icurrll)=ipplook(i)</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;<span class="keywordflow">            ENDDO</span></div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;<span class="comment">! Reset PPheader words that differ from dump LOOKUP header conventions</span></div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;            pplook(<a class="code" href="namespacelookup__addresses.xhtml#aca3499f4f66ac530900eed38efcd282d">lbrel</a>,icurrll)=2                     <span class="comment">! PP release no</span></div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;            pplook(<a class="code" href="namespacelookup__addresses.xhtml#a0970ddf404f7e561573acd7914a99250">data_type</a>,icurrll)=1                 <span class="comment">! Real field</span></div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;            <span class="keywordflow">IF</span> (packing_type == 1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;              pplook(<a class="code" href="namespacelookup__addresses.xhtml#a506fad965bad508479cafb725dd659f1">lbpack</a>,icurrll)=02001              <span class="comment">! WGDOS packed</span></div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;            <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (packing_type == 3) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;              pplook(<a class="code" href="namespacelookup__addresses.xhtml#a506fad965bad508479cafb725dd659f1">lbpack</a>,icurrll)=02003              <span class="comment">! GRIB packed</span></div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;            <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (packing_type == 4) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;              pplook(<a class="code" href="namespacelookup__addresses.xhtml#a506fad965bad508479cafb725dd659f1">lbpack</a>,icurrll)=02004   <span class="comment">! Run length encoded</span></div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;            <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;              pplook(<a class="code" href="namespacelookup__addresses.xhtml#a506fad965bad508479cafb725dd659f1">lbpack</a>,icurrll)=02000              <span class="comment">! Unpacked</span></div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;<span class="keywordflow">            END IF</span></div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;            rppval = comp_accrcy                        <span class="comment">! Accuracy</span></div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;            pplook(<a class="code" href="namespacelookup__addresses.xhtml#a82f90fd378e614ed7aabca4f5aaeae8d">bacc</a>,icurrll) = transfer(rppval,ippval)</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;            rppval=rmdi                                 <span class="comment">! Missing data</span></div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;            pplook(<a class="code" href="namespacelookup__addresses.xhtml#aab140d56b5d424c50e71824cdee926c5">bmdi</a>,icurrll) = transfer(rppval,ippval)</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;            rppval = 1.0                                <span class="comment">! MKS scale fac</span></div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;            pplook(<a class="code" href="namespacelookup__addresses.xhtml#ae1943e1fea075c215b137cecfb4ca168">bmks</a>,icurrll) = transfer(rppval,ippval)</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;            <span class="keywordflow">IF</span> (.NOT.grib_out) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;              pplook(<a class="code" href="namespacelookup__addresses.xhtml#ab82991ff70c45e8f733b4446f83e0556">lblrec</a>,icurrll)=num_words         <span class="comment">! Packed length</span></div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;              pplook(<a class="code" href="namespacelookup__addresses.xhtml#a7fbd5df41f854a6fd5c4d35c0942742e">lbnrec</a>,icurrll)=((num_words+<a class="code" href="namespaceio__configuration__mod.xhtml#a47a1a0bfdbd64545a5967659ae7d6435">io_field_padding</a>-1)/     &amp;</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;              <a class="code" href="namespaceio__configuration__mod.xhtml#a47a1a0bfdbd64545a5967659ae7d6435">io_field_padding</a>)*<a class="code" href="namespaceio__configuration__mod.xhtml#a47a1a0bfdbd64545a5967659ae7d6435">io_field_padding</a></div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;                                                         <span class="comment">! Rounded length</span></div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;              pplook(<a class="code" href="namespacelookup__addresses.xhtml#afbf7195b85d47a8f92d0769c84f846a4">lbegin</a>,icurrll)=iwa                 <span class="comment">! Address</span></div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;              pplook(<a class="code" href="namespacelookup__addresses.xhtml#a16f485ed422b2c5c4014cfb66960f51a">naddr</a>,icurrll)=iwa                  <span class="comment">! Address</span></div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;              iwa=iwa+pplook(<a class="code" href="namespacelookup__addresses.xhtml#a7fbd5df41f854a6fd5c4d35c0942742e">lbnrec</a>,icurrll)             <span class="comment">! Next address</span></div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;<span class="keywordflow">            END IF</span></div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;<span class="keywordflow">          ENDDO</span>  <span class="comment">! End of loop over levels</span></div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;<span class="keywordflow">      ENDDO</span>      <span class="comment">! End of loop over STASHlist entries</span></div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;<span class="comment">! Update FT_LASTFIELD</span></div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;      ft_lastfield(ppunit)=icurrll</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;<span class="comment">!L!L 4.  Finally loop over PP headers and set correct timestamps for the</span></div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;<span class="comment">!L     mean period concerned, and also reset LBTIM and LBPROC codes to</span></div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;<span class="comment">!L     reflect the mean period for the individual fields.</span></div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;<span class="comment">!L     NB: This loop deals with fields from both sections 2 and 3 above.</span></div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;<span class="comment">!L</span></div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;<span class="comment">!L 4.1 Calculate start time of meaning period from current time</span></div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;<span class="comment">!L</span></div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;<span class="comment">! DEPENDS ON: time2sec</span></div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;      <span class="keyword">CALL </span>time2sec(i_year,i_month,i_day,i_hour,i_minute,i_second,      &amp;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;                    basis_time_days,basis_time_secs,                    &amp;</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;                    start_day,start_second,<a class="code" href="namespaceum__input__control__mod.xhtml#a9379d2394efa879a4fbd3be4ea34b035">lcal360</a>)</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;      i=1</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;      <span class="keywordflow">IF</span> (i_ao == 1 .OR. i_ao == 2) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;        <span class="keywordflow">DO</span> indexm=1,meanlev</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;          i=i*<a class="code" href="namespacenlstgen__mod.xhtml#a78a9dc471e3a5c48c551a6f809cb91d5" title="Indicators for mean dump frequency. ">meanfreqim</a>(indexm,i_ao)</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;<span class="keywordflow">        ENDDO</span></div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;<span class="comment">! DEPENDS ON: stp2time</span></div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;        <span class="keyword">CALL </span><a class="code" href="stp2time_8f90.xhtml#a16c94d2df5c9d67b675e4f1d4b3409fd" title="LL Routine: STP2TIME !&gt;LL. ">stp2time</a>(i*<a class="code" href="namespacenlstgen__mod.xhtml#a5ee4ff12e6cb7044da2744229da35b1a" title="Number of steps between atmosphere restart dumps. ">dumpfreqim</a>(i_ao),                               &amp;</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;              <a class="code" href="namespacenlstgen__mod.xhtml#aded406ffa8d50a7c4a6325c5b75eb03d">steps_per_periodim</a>(i_ao),<a class="code" href="namespacenlstgen__mod.xhtml#a4a6ed31ef0d09bdc976baf277d1acbe7">secs_per_periodim</a>(i_ao),         &amp;</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;                      period_days,period_secs)</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;      <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;        icode=312</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;        cmessage=<span class="stringliteral">&#39;MEANDIAG : I_AO has invalid value&#39;</span></div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;        <span class="keywordflow">GOTO</span> 9999</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;      start_second=start_second - period_secs</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;      start_day   =start_day    - period_days</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;<span class="comment">! Note: START_TIME(6) is set to Day Number, not seconds</span></div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;<span class="comment">! DEPENDS ON: sec2time</span></div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;      <span class="keyword">CALL </span><a class="code" href="sec2time_8f90.xhtml#ac74065211f64970d62c9e83164972f15" title="LL Routine: SEC2TIM0 !&gt;LL. ">sec2time</a>(start_day,start_second,                             &amp;</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;                    basis_time_days,basis_time_secs,                    &amp;</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;                    start_time(1),start_time(2),start_time(3),          &amp;</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;                    start_time(4),start_time(5),start_time(7),          &amp;</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;                    start_time(6),<a class="code" href="namespaceum__input__control__mod.xhtml#a9379d2394efa879a4fbd3be4ea34b035">lcal360</a>)</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;<span class="comment">!L</span></div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;<span class="comment">!L 4.2 Set start and end times in mean PP headers from START_TIME</span></div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;<span class="comment">!L     and current time from CTIME.</span></div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;<span class="comment">!L     Recalculate LBTIM and LBPROC if necessary.</span></div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;<span class="comment">!L</span></div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;      <span class="keywordflow">DO</span> indexm=1,ft_lastfield(ppunit)</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;<span class="comment">!L    Update YR, MON, DAT, DAY to start and end of mean period</span></div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;        pplook(<a class="code" href="namespacelookup__addresses.xhtml#aabd1e58da18c133f0ceeba0db78c9ecf">lbyr</a> ,indexm)=start_time(<a class="code" href="namespacelookup__addresses.xhtml#aabd1e58da18c133f0ceeba0db78c9ecf">lbyr</a>)</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;        pplook(<a class="code" href="namespacelookup__addresses.xhtml#aeaaef1dcf94dbe6d39b5783438cdda5b">lbmon</a> ,indexm)=start_time(<a class="code" href="namespacelookup__addresses.xhtml#aeaaef1dcf94dbe6d39b5783438cdda5b">lbmon</a>)</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;        pplook(<a class="code" href="namespacelookup__addresses.xhtml#ad8b62de4259cf3a7c56f0ae188e526f8">lbdat</a> ,indexm)=start_time(<a class="code" href="namespacelookup__addresses.xhtml#ad8b62de4259cf3a7c56f0ae188e526f8">lbdat</a>)</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;        pplook(<a class="code" href="namespacelookup__addresses.xhtml#a1e2e3863b21846750a0050a2c31c3b5c">lbyrd</a> ,indexm)=i_year</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;        pplook(<a class="code" href="namespacelookup__addresses.xhtml#a8f7f5cb431a34329a65af835c2ff9038">lbmond</a>,indexm)=i_month</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;        pplook(<a class="code" href="namespacelookup__addresses.xhtml#a5ac67ad7ba51ace85cd20c4f10b2c8f7">lbdatd</a>,indexm)=i_day</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;<span class="comment">!L    Decode LBTIM IA and IB elements</span></div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;        lbtim_ia=pplook(<a class="code" href="namespacelookup__addresses.xhtml#a27c45d3289bc2f747dd0912b6909cae1">lbtim</a>,indexm)/100                <span class="comment">! Sample period</span></div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;        lbtim_ib=(pplook(<a class="code" href="namespacelookup__addresses.xhtml#a27c45d3289bc2f747dd0912b6909cae1">lbtim</a>,indexm)-(lbtim_ia*100))/10 <span class="comment">! Time type</span></div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;<span class="comment">!L    Update HR and MIN to the start and end of the mean period</span></div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;<span class="comment">!L    unless IA and IB indicate a mean sampled at a particular time</span></div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;<span class="comment">!L    of day (assumed to represent part of a mean diurnal cycle, say),</span></div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;<span class="comment">!L    in which case the original starting offset time is</span></div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;<span class="comment">!L    retained for both the starting and ending time of day.</span></div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;<span class="comment">!L    Note: This special case is required to generate the distinguishable</span></div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;<span class="comment">!L    PP headers in the case of mean diurnal-cycle type diagnostics.</span></div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;<span class="comment">!L    It is not an ideal general solution, and may need reassessment</span></div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;<span class="comment">!L    at some time in the future.</span></div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;        <span class="keywordflow">IF</span> ((lbtim_ia == 24).AND.(lbtim_ib == 2)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;          pplook(<a class="code" href="namespacelookup__addresses.xhtml#a2fb28367de3bc21b1a4702460b6c2a0b">lbhrd</a> ,indexm)=pplook(<a class="code" href="namespacelookup__addresses.xhtml#ab2bce3bc87d25358476475aed562f068">lbhr</a> ,indexm)</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;          pplook(<a class="code" href="namespacelookup__addresses.xhtml#af089abfa7a156eaf12983559df8acc76">lbmind</a> ,indexm)=pplook(<a class="code" href="namespacelookup__addresses.xhtml#a284423d27573ccb30828cde5ff510b52">lbmin</a> ,indexm)</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;          pplook(<a class="code" href="namespacelookup__addresses.xhtml#aefb0ae53542fec05683950c6badb04f1">lbsecd</a> ,indexm)=pplook(<a class="code" href="namespacelookup__addresses.xhtml#ac40a8889f8d7a68dd880a2ccc1769338">lbsec</a> ,indexm)</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;        <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;          pplook(<a class="code" href="namespacelookup__addresses.xhtml#ab2bce3bc87d25358476475aed562f068">lbhr</a> ,indexm)=start_time(<a class="code" href="namespacelookup__addresses.xhtml#ab2bce3bc87d25358476475aed562f068">lbhr</a>)</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;          pplook(<a class="code" href="namespacelookup__addresses.xhtml#a284423d27573ccb30828cde5ff510b52">lbmin</a> ,indexm)=start_time(<a class="code" href="namespacelookup__addresses.xhtml#a284423d27573ccb30828cde5ff510b52">lbmin</a>)</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;          pplook(<a class="code" href="namespacelookup__addresses.xhtml#ac40a8889f8d7a68dd880a2ccc1769338">lbsec</a> ,indexm)=start_time(<a class="code" href="namespacelookup__addresses.xhtml#ac40a8889f8d7a68dd880a2ccc1769338">lbsec</a>)</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;          pplook(<a class="code" href="namespacelookup__addresses.xhtml#a2fb28367de3bc21b1a4702460b6c2a0b">lbhrd</a> ,indexm)=i_hour</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;          pplook(<a class="code" href="namespacelookup__addresses.xhtml#af089abfa7a156eaf12983559df8acc76">lbmind</a>,indexm)=i_minute</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;          pplook(<a class="code" href="namespacelookup__addresses.xhtml#aefb0ae53542fec05683950c6badb04f1">lbsecd</a>,indexm)=i_second</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;        <span class="keywordflow">IF</span> (<a class="code" href="namespacenlstcall__mod.xhtml#a28feded25ee0c3bf8d91cc063e2da08d">lclimrealyr</a>) <span class="keywordflow">THEN</span>      <span class="comment">! real-period means always start</span></div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;          pplook(<a class="code" href="namespacelookup__addresses.xhtml#ad8b62de4259cf3a7c56f0ae188e526f8">lbdat</a>,indexm)=1   <span class="comment">! on 1st of month</span></div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;          <span class="keywordflow">if</span> (pplook(<a class="code" href="namespacelookup__addresses.xhtml#aeaaef1dcf94dbe6d39b5783438cdda5b">lbmon</a>,indexm)  ==  1 .AND.                         &amp;</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;              pplook(<a class="code" href="namespacelookup__addresses.xhtml#a8f7f5cb431a34329a65af835c2ff9038">lbmond</a>,indexm)  ==  3) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;            pplook(<a class="code" href="namespacelookup__addresses.xhtml#aeaaef1dcf94dbe6d39b5783438cdda5b">lbmon</a>,indexm)=2 <span class="comment">! correct start month for Feb mean</span></div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;        <span class="keywordflow">IF</span> (lbtim_ia == 0) <span class="keywordflow">THEN</span>                     <span class="comment">! Reset to dump</span></div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;          lbtim_ia = (<a class="code" href="namespacenlstgen__mod.xhtml#a5ee4ff12e6cb7044da2744229da35b1a" title="Number of steps between atmosphere restart dumps. ">dumpfreqim</a>(i_ao)*<a class="code" href="namespacenlstgen__mod.xhtml#a4a6ed31ef0d09bdc976baf277d1acbe7">secs_per_periodim</a>(i_ao))/        &amp;</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;                     (<a class="code" href="namespacenlstgen__mod.xhtml#aded406ffa8d50a7c4a6325c5b75eb03d">steps_per_periodim</a>(i_ao)*3600)</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;        <span class="keywordflow">IF</span> (i_ao == 1) <span class="keywordflow">THEN</span>    <span class="comment">!         Calendar + 20 + 100*sample_prd              PPLOOK(LBTIM,INDEXM)=A_FIXHD(8)+20+100*LBTIM_IA</span></div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;        <span class="keywordflow">IF</span> (mod(pplook(<a class="code" href="namespacelookup__addresses.xhtml#a6d3e005221e5b6baf748473338310a4d">lbproc</a>,indexm)/128,2) == 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;          pplook(<a class="code" href="namespacelookup__addresses.xhtml#a6d3e005221e5b6baf748473338310a4d">lbproc</a>,indexm)=pplook(<a class="code" href="namespacelookup__addresses.xhtml#a6d3e005221e5b6baf748473338310a4d">lbproc</a>,indexm)+128  <span class="comment">! not a mean</span></div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;<span class="keywordflow">      ENDDO</span></div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;<span class="comment">! -!  4.2A Section to output fields in grib code</span></div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;<span class="comment">!  NOTE - pp headers must be correct in everything except field lengths</span></div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;<span class="comment">!         before call to GRIB_FILE</span></div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;      <span class="keywordflow">IF</span> (grib_out) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;<span class="comment">!L  loop over STASHlist entries.</span></div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;<span class="comment">!L</span></div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;        <span class="keywordflow">DO</span> ie  =1,<a class="code" href="namespacetypstsz__mod.xhtml#a37cf3a635bd0a87949973ea24fb6a680">totitems</a></div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;          modl =stlist(st_model_code  ,ie)</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;          is   =stlist(st_sect_no_code,ie)</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;          im   =stlist(<a class="code" href="stparam_8h.xhtml#a178dd1274371de0f13977f975781323a">st_item_code</a>   ,ie)</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;          <span class="keywordflow">IF</span> (<a class="code" href="namespaceumprintmgr.xhtml#a956d5068b5b528afc5bed1435ced4b99" title="$OMP THREADPRIVATE (umMessage) ">printstatus</a> &gt;= <a class="code" href="namespaceumprintmgr.xhtml#af03b710c9e538edb8c1e1b272939a657">prstatus_diag</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;            <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*)<span class="stringliteral">&#39;MEANDIAG: Processing ...&#39;</span></div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;            <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;meandiag&#39;</span>)</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;            <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(1X,A,I4,I4)&#39;</span>)<span class="stringliteral">&#39;Section, Item was: &#39;</span>,is,im</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;            <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;meandiag&#39;</span>)</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;          tag  =stlist(st_macrotag    ,ie)/1000</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;          <span class="keywordflow">IF</span> ( (mod(tag/(2**(meanlev-1)),2) == 1) .AND.                 &amp;</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;                                     (i_ao == modl) ) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;<span class="comment">! The Tag matches this mean period and the item is in this dump  .</span></div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;<span class="comment">! Determine the number of output levels and starting LOOKUP header</span></div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;<span class="comment">! (Number of levels now includes possible pseudo_levels)</span></div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;<span class="comment">! NB: Note that vertical means (single output level) are a special case</span></div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;<span class="comment">!     as are timeseries (also single output level)</span></div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;           <span class="keywordflow">IF</span> (stlist(st_input_bottom,ie) == st_special_code) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;            n_levs=1                       <span class="comment">! Output is a special level</span></div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;           <span class="keywordflow">ELSEIF</span> (stlist(st_gridpoint_code,ie) &lt;  vert_mean_top .AND.  &amp;</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;                  stlist(st_gridpoint_code,ie) &gt;  vert_mean_base) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;            n_levs=1                       <span class="comment">! Output is a vertical mean</span></div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;           <span class="keywordflow">ELSEIF</span> (stlist(st_series_ptr,ie) &gt;  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;            n_levs=1                       <span class="comment">! Output is a timeseries</span></div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;           <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;            no=stlist(st_output_bottom,ie)</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;            <span class="keywordflow">IF</span> (no &lt;  0) <span class="keywordflow">THEN</span>              <span class="comment">! Output is level list</span></div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;              n_levs=stash_levels(1,-no)</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;            <span class="keywordflow">ELSE</span>                           <span class="comment">! Output is level range</span></div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;              n_levs=stlist(st_output_top,ie)-                          &amp;</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;                     stlist(st_output_bottom,ie)+1</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;<span class="keywordflow">            END IF</span></div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;<span class="keywordflow">           END IF</span></div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;           <span class="keywordflow">IF</span> (stlist(st_pseudo_out,ie) &gt;  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;            no=stlist(st_pseudo_out,ie)</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;            n_levs=n_levs*stash_pseudo_levels(1,no)</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;<span class="keywordflow">           END IF</span></div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;           field=stlist(st_lookup_ptr,ie)</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;<span class="comment">! Address of distributed field in D1</span></div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;           field_address=stlist(st_output_addr,ie)</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;<span class="comment">! Loop over the number of output levels</span></div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;           <span class="keywordflow">DO</span> level=1,n_levs</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;<span class="comment">! Copy  header for field ready to extract address information</span></div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;            icurrl1=icurrl1+1                           <span class="comment">! Next field</span></div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;            <span class="keywordflow">DO</span> i=1,len1_lookup</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;              ipplook(i)=pplook(i,icurrl1)</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;<span class="keywordflow">            ENDDO</span></div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;<span class="comment">! Field and buffer sizes, and field address in D1</span></div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;            field_length =ipplook(<a class="code" href="namespacelookup__addresses.xhtml#ab82991ff70c45e8f733b4446f83e0556">lblrec</a>)</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;            buffer_length=((field_length+<a class="code" href="namespaceio__configuration__mod.xhtml#a47a1a0bfdbd64545a5967659ae7d6435">io_field_padding</a>-1)/           &amp;</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;            <a class="code" href="namespaceio__configuration__mod.xhtml#a47a1a0bfdbd64545a5967659ae7d6435">io_field_padding</a>)*<a class="code" href="namespaceio__configuration__mod.xhtml#a47a1a0bfdbd64545a5967659ae7d6435">io_field_padding</a></div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;<span class="comment">! Section/Item codes</span></div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;            is=ipplook(<a class="code" href="namespacelookup__addresses.xhtml#a4f2a173b22a48250d86265493664e6ad">item_code</a>)/1000</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;            im=ipplook(<a class="code" href="namespacelookup__addresses.xhtml#a4f2a173b22a48250d86265493664e6ad">item_code</a>)-1000*is</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;<span class="comment">! Packing accuracy of the data :! NB: Presence of extra data disables packing for this field</span></div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;            <span class="keywordflow">IF</span> (packing.AND.(ipplook(<a class="code" href="namespacelookup__addresses.xhtml#a36fe53c5769dee10ac1c6609f9fa6c2d">lbext</a>) &lt;= 0)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;              comp_accrcy=                                              &amp;</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;<span class="comment">! DEPENDS ON: exppxi</span></div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;     &amp;     exppxi(modl,is,im,<a class="code" href="namespacecppxref__mod.xhtml#a1e1bb8d235072b8e488c5f81a2686607">ppx_packing_acc</a>+<a class="code" href="namespacenlstcall__mod.xhtml#ac876dfc292cca09baeafc00914760fdb">pp_pack_code</a>(ppunit)-1,    &amp;</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;     &amp;                                 icode,cmessage)</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;              lpackfield=.true.</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;            <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;              comp_accrcy=-99</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;              lpackfield=.false.</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;<span class="keywordflow">            END IF</span></div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;              <span class="keyword">CALL </span><a class="code" href="namespaceio.xhtml#a6eff09a3646b168907ebda58a5355b2a">setpos</a>(ppunit,iwa,icode)</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;              subm=<a class="code" href="namespacesubmodel__mod.xhtml#afa0d02e91180c750bc3e4d6cfb82f095" title="Submodel number for each submodel id. ">submodel_for_sm</a>(im_ident)</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;<span class="comment">!             Check that decomposition type is up to date.</span></div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;              d1pos=stlist(st_d1pos,ie)</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;              orig_decomp=current_decomp_type</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;              new_decomp=orig_decomp</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;              <span class="keywordflow">IF</span> ((d1_addr(d1_imodl,d1pos,subm)  ==  <a class="code" href="namespacesubmodel__mod.xhtml#a46a6f4e4a4119ea74676854f5e7e5e2b">atmos_im</a>) .AND.    &amp;</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;                (orig_decomp  /=  <a class="code" href="namespacedecomp__params.xhtml#afabb52a8e8d6cdfe3f3366dd918058d8" title="decomps for atmos ">decomp_standard_atmos</a>)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;                new_decomp=<a class="code" href="namespacedecomp__params.xhtml#afabb52a8e8d6cdfe3f3366dd918058d8" title="decomps for atmos ">decomp_standard_atmos</a></div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;<span class="keywordflow">              END IF</span></div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;              <span class="keywordflow">IF</span> (new_decomp  /=  orig_decomp) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;                icode=0</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;                <span class="keyword">CALL </span>change_decomposition(new_decomp,icode)</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;                <span class="keywordflow">IF</span> (icode  /=  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;                  <span class="keywordflow">IF</span> (<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>  ==  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;                    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;ERROR : MEAN_DIAG&#39;</span></div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;                    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;meandiag&#39;</span>)</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;                    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;Failed to change decomposition to &#39;</span>,    &amp;</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;     &amp;                new_decomp</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;                    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;meandiag&#39;</span>)</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;                    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;Field M,S,I &#39;</span>,                          &amp;</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;     &amp;                d1_addr(d1_imodl,d1pos,subm),                     &amp;</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;     &amp;                d1_addr(d1_section,d1pos,subm),                   &amp;</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;     &amp;                d1_addr(d1_item,d1pos,subm)</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;                    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;meandiag&#39;</span>)</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;<span class="keywordflow">                  ENDIF</span></div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;                  cmessage=<span class="stringliteral">&#39;MEANDIAG : Failed to change decomposition&#39;</span></div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;                  <span class="keywordflow">GOTO</span> 9999</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;<span class="keywordflow">                END IF</span></div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;<span class="keywordflow">              END IF</span></div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;<span class="comment">!             Gather full field to PE0</span></div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;<span class="comment">! DEPENDS ON: general_gather_field</span></div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;              <span class="keyword">CALL </span><a class="code" href="general__gather__field_8f90.xhtml#a63a436a252da9e380674b97cf0f4ba86" title="Takes a general decomposed field on many processors and gathers it. ">general_gather_field</a>(d1(field_address),buf,local_len,&amp;</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;                field_length,1,d1_addr(1,stlist(st_d1pos,ie),subm),0,   &amp;</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;                -1,icode,cmessage)</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;              <span class="keywordflow">IF</span> (icode  ==  1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;                <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*)<span class="stringliteral">&#39;MEANDIAG: Field number &#39;</span>,is,                 &amp;</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;     &amp;            <span class="stringliteral">&#39;with dimensions &#39;</span>, ncols,<span class="stringliteral">&#39; x &#39;</span>,                      &amp;</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;     &amp;            nrows,<span class="stringliteral">&#39; and gridtype &#39;</span>,                               &amp;</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;     &amp;            d1_addr(d1_grid_type,stlist(st_d1pos,ie),subm),       &amp;</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;     &amp;            <span class="stringliteral">&#39;was unrecognized and not gathered.&#39;</span></div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;                <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;meandiag&#39;</span>)</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;                cmessage=<span class="stringliteral">&#39;MEANDIAG: Unrecognized field on write&#39;</span></div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;                <span class="keywordflow">GOTO</span> 9999</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;              <span class="keywordflow">ELSEIF</span> (icode  /=  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;                <span class="keywordflow">GOTO</span> 9999</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;<span class="keywordflow">              END IF</span></div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;              <span class="keywordflow">IF</span> (<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>  ==  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;<span class="comment">! DEPENDS ON: grib_file</span></div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;                <span class="keyword">CALL </span><a class="code" href="grib__file_8f90.xhtml#ae9ef8da0f47b5d06ed87aaedd376de69" title="Purpose: This routine acts as an interface between the model and. ">grib_file</a>(len1_lookup,pp_len_mean,pplook,pplook,   &amp;</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;                  icurrl1,buf,field_length,                             &amp;</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;                  buffer_length,num_words,ppunit,iwa,                   &amp;</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;                  grib_packing,icode,cmessage)</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;<span class="keywordflow">              END IF</span></div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;              <span class="keyword">CALL </span>gc_ibcast(999,1,0,nproc,info,icode)</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;              <span class="keywordflow">IF</span>(icode &gt;  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;                cmessage=                                               &amp;</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;          <span class="stringliteral">&#39;MEANDIAG: Error in GRIB_FILE - see ICODE for item&#39;</span></div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;                icode=1000*is+im</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;                <span class="keywordflow">GOTO</span> 9999</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;<span class="keywordflow">              END IF</span></div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;              iwa=iwa+pplook(<a class="code" href="namespacelookup__addresses.xhtml#a7fbd5df41f854a6fd5c4d35c0942742e">lbnrec</a>,icurrl1) <span class="comment">! Next address</span></div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;<span class="keywordflow">           ENDDO</span>  <span class="comment">! End of loop over levels</span></div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;<span class="keywordflow">        ENDDO</span>      <span class="comment">! End of loop over STASHlist entries</span></div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;<span class="comment">! reset pp_pack_code for future use</span></div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;        <a class="code" href="namespacenlstcall__mod.xhtml#ac876dfc292cca09baeafc00914760fdb">pp_pack_code</a>(ppunit)=<a class="code" href="namespacenlstcall__mod.xhtml#ac876dfc292cca09baeafc00914760fdb">pp_pack_code</a>(ppunit)+100</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;<span class="comment">! -!L</span></div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;<span class="comment">!L 4.3 Buffer LOOKUP headers from work array back to file and close it</span></div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;<span class="comment">!L</span></div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;      <span class="keyword">CALL </span><a class="code" href="namespaceio.xhtml#a6eff09a3646b168907ebda58a5355b2a">setpos</a>(ppunit,word_address,icode)</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;      <span class="keyword">CALL </span>buffout(ppunit,pplook(:,:),len1_lookup*pp_len_mean,len_io,   &amp;</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;                                                                a_io)</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;      <span class="keywordflow">IF</span>(a_io /= -1.0.OR.len_io /= len1_lookup*pp_len_mean) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;<span class="comment">! DEPENDS ON: ioerror</span></div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;        <span class="keyword">CALL </span><a class="code" href="ioerror_8f90.xhtml#aa3812224bd42148a2e00c44c715f82de" title="SUBROUTINE IOERROR!&gt; ">ioerror</a>(<span class="stringliteral">&#39;Buffer out of LOOKUP table   &#39;</span>,a_io,len_io,       &amp;</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;                      len1_lookup*pp_len_mean)</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;        cmessage=<span class="stringliteral">&#39;MEANDIAG : Error writing PPfile LOOKUP table&#39;</span></div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;        icode=314</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;        <span class="keywordflow">GOTO</span> 9999</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;      len_ppname=len(ppname)</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;      <span class="keyword">CALL </span>model_file_close(ppunit,ppname,len_ppname,1,0,icode)</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;<span class="comment">!L!L 5. Construct mean PPfile processing requests and output to server</span></div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;<span class="comment">!L    This deals with both &quot;normal&quot; and section 21-24 etc period means</span></div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;<span class="comment">!L</span></div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;      indexm = meanlev</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;      <span class="keywordflow">IF</span>(<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a> == 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;      <span class="keywordflow">IF</span> (i_ao == 1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;        <span class="keywordflow">IF</span> (<a class="code" href="namespacenlstgen__mod.xhtml#ab5ec3bcd1be7dd522259efa361474cd2" title="PP field selectors. ">ppselectim</a>(indexm,i_ao) == 1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;          <span class="keywordflow">IF</span> (<a class="code" href="namespacenlstgen__mod.xhtml#a09486d8c08da329d62d75916daaddcbd" title="Switches for pp field archive. ">archppselim</a>(indexm,i_ao) == 1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;            <span class="keyword">CALL </span><a class="code" href="interfacemppio__job__control_1_1jobcntrl.xhtml" title="API for model code. Send a command/string to the pipe file. ">jobcntrl</a>(<a class="code" href="namespacemppio__job__control__common.xhtml#a508db6787db9035d3f4ed6a97a130761">jc_archiveppnochart</a>,ppname)<span class="comment">! Archive without plotting</span></div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;          <span class="keywordflow">IF</span> (ppunit == 22.OR.ppunit == 42.OR.(ppunit &gt;  59.AND.        &amp;</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;              ppunit &lt;  68).OR.ppunit == 27) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;            <span class="keywordflow">IF</span> (<a class="code" href="namespacenlstcall__mod.xhtml#a6742d2f37fdd588b78ebb6b25071487c">ft_select</a>(ppunit) == <span class="stringliteral">&quot;Y&quot;</span>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;              <span class="keyword">CALL </span><a class="code" href="interfacemppio__job__control_1_1jobcntrl.xhtml" title="API for model code. Send a command/string to the pipe file. ">jobcntrl</a>(<a class="code" href="namespacemppio__job__control__common.xhtml#a931f1417bb29bcd5298c3b0f246c35e2">jc_delete</a>,ppname) <span class="comment">! Delete from machine</span></div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;<span class="keywordflow">            END IF</span></div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;          <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;            <span class="keyword">CALL </span><a class="code" href="interfacemppio__job__control_1_1jobcntrl.xhtml" title="API for model code. Send a command/string to the pipe file. ">jobcntrl</a>(<a class="code" href="namespacemppio__job__control__common.xhtml#a931f1417bb29bcd5298c3b0f246c35e2">jc_delete</a>,ppname) <span class="comment">! Delete from machine</span></div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160; 9999 <span class="keywordflow">CONTINUE</span></div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;      <span class="keywordflow">IF</span> (<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a> /= current_io_pe) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;        <span class="keyword">DEALLOCATE</span>(pplook)</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;      <span class="keyword">NULLIFY</span>(pplook)</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;      <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;MEANDIAG&#39;</span>,zhook_out,zhook_handle)</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;      <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;<span class="keyword">      END SUBROUTINE </span><a class="code" href="meandiag_8f90.xhtml#a72a0b96fb4670010dc65680c7e8ac636" title="LL Routine: MEANDIAG !&gt;LL. ">meandiag</a></div></div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
