<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>UM General Atmosphere: /home/wilfred/PhD/UM/src/atmosphere/UKCA/emiss_io_mod.f90 Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="unified_model_logo_2.jpeg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">UM General Atmosphere
   &#160;<span id="projectnumber">8.6</span>
   </div>
   <div id="projectbrief">UK Met Offices Unified Model</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_1df14ea1ac826f73bc3062fa8a76e0c2.xhtml">atmosphere</a></li><li class="navelem"><a class="el" href="dir_3b087d695daa154bfcb7242bcfd0fbd3.xhtml">UKCA</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">emiss_io_mod.f90</div>  </div>
</div><!--header-->
<div class="contents">
<a href="emiss__io__mod_8f90.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">!  Description:!    Module to hold data and procedures for handling NetCDF emission files.</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">! Code description:</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">MODULE</span> emiss_io_mod</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespaceum__types.xhtml" title="Code Owner: See Unified Model Code owners HTML page. ">um_types</a><span class="keywordtype">,              ONLY</span>: <a class="code" href="namespaceum__types.xhtml#af5fbacdfa62f7f4f6d3aaab1a1149e9a">integer32</a>, <a class="code" href="namespaceum__types.xhtml#a9470dbfbe40a87f88b6cde47783187d1">real32</a>  <span class="comment">! For NetCDF arguments</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keywordtype">USE </span>netcdf</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keywordtype">USE </span>um_parvars<span class="keywordtype">,            ONLY</span>: datastart</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespaceereport__mod.xhtml" title="This file belongs in section: Misc. ">ereport_mod</a><span class="keywordtype">,           ONLY</span>: <a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespaceumprintmgr.xhtml" title="This file belongs in section: Misc. ">umprintmgr</a><span class="keywordtype">, ONLY</span> : <a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>, <a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>, <a class="code" href="namespaceumprintmgr.xhtml#af03b710c9e538edb8c1e1b272939a657">prstatus_diag</a>, <a class="code" href="namespaceumprintmgr.xhtml#a956d5068b5b528afc5bed1435ced4b99" title="$OMP THREADPRIVATE (umMessage) ">printstatus</a></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespaceum__input__control__mod.xhtml" title="*****************************COPYRIGHT******************************** *****************************C...">um_input_control_mod</a><span class="keywordtype">,  ONLY</span>: <a class="code" href="namespaceum__input__control__mod.xhtml#a9379d2394efa879a4fbd3be4ea34b035">lcal360</a></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keywordtype">USE </span>parkind1<span class="keywordtype">,              ONLY</span>: jpim, jprb         <span class="comment">! DrHook</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keywordtype">USE </span>yomhook<span class="keywordtype">,               ONLY</span>: lhook, dr_hook     <span class="comment">! DrHook</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keywordtype">PRIVATE</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keywordtype">INTEGER (KIND=integer32)</span>, <span class="keywordtype">SAVE</span>, <span class="keywordtype">PUBLIC</span> :: nfid  <span class="comment">! ID of NetCDF file</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keywordtype">INTEGER (KIND=integer32)</span>, <span class="keywordtype">SAVE</span> :: nstatus       <span class="comment">! status of NetCDF file</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keywordtype">INTEGER</span>                        :: ecode         <span class="comment">! return code for ereport</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">PARAMETER</span>             :: max_dims = 5  <span class="comment">! Max nr of dimens per variable</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">PARAMETER</span>, <span class="keywordtype">PUBLIC</span> :: iupd_single = 0  <span class="comment">! single time (not tested yet)</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">PARAMETER</span>, <span class="keywordtype">PUBLIC</span> :: iupd_serial = 1  <span class="comment">! time seriesINTEGER, PARAMETER, PUBLIC :: iupd_cyclic = 2  ! perodic time series</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keywordtype">PUBLIC</span> :: em_fopen, em_fclose, nd_error</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keywordtype">PUBLIC</span> :: em_var_check_dims, em_get_time_rec</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keyword">INTERFACE</span> em_get_data</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  <span class="keyword">MODULE PROCEDURE</span>         &amp;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    em_get_data_char,      &amp;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    em_get_data_int,       &amp;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    em_get_data_real,      &amp;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    em_get_data_real2d,    &amp;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    em_get_data_real3d</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="keyword">END INTERFACE</span>PUBLIC em_get_data</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="keyword">CONTAINS</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">! Description:</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; <span class="keywordtype">CHARACTER (LEN=*)</span>, <span class="keywordtype">INTENT(IN)</span>  :: filename</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; <span class="keywordtype">INTEGER</span>,           <span class="keywordtype">INTENT(OUT)</span> :: fileid</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160; <span class="keywordtype">INTEGER (KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160; <span class="keywordtype">INTEGER (KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; <span class="keywordtype">REAL    (KIND=jprb)</span>            :: zhook_handle</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook (<span class="stringliteral">&#39;EM_FOPEN&#39;</span>, zhook_in, zhook_handle)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; nstatus = nf90_open(filename, nf90_nowrite, nfid)</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; <span class="keyword">CALL </span>nd_error (<span class="stringliteral">&#39;EM_FOPEN&#39;</span>, trim(filename))</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; fileid = nfid</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook (<span class="stringliteral">&#39;EM_FOPEN&#39;</span>, zhook_out, zhook_handle)</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="keyword"> END SUBROUTINE </span>em_fopen</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">! -! Description:</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">! Method:</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">! 1) Check whether name or ID of variable in NetCDF file is supplied!    (if name is supplied then get the id). Store id as varid_local and</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">!    pass it to NF90_INQUIRE_VARIABLE to get info on the variable.</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">! 2) Loop through all dimensions in the variable and call!    NF90_INQUIRE_DIMENSION for each one to get their size.</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">! 3) If the optional argument lrec is present then call NF90_INQUIRE!    and get the time record dimension, assuming it is the last dims</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">!    in the file.</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">! 4) If the optional argument var_type is present then get it as string.</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">! -  SUBROUTINE em_get_var_info (ncid,  varid,    varnam,          &amp;</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                              ndims, vdimsize, lrec,  var_type)</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">! Subroutine arguments</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;  <span class="keywordtype">INTEGER</span>,           <span class="keywordtype">INTENT(IN)</span>    :: ncid                <span class="comment">! File id</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  <span class="keywordtype">INTEGER</span>,           <span class="keywordtype">INTENT(INOUT)</span> :: varid               <span class="comment">! Variable id</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  <span class="keywordtype">CHARACTER (LEN=*)</span>, <span class="keywordtype">INTENT(INOUT)</span> :: varnam              <span class="comment">! Variable name</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;  <span class="keywordtype">INTEGER</span>,           <span class="keywordtype">OPTIONAL</span>      :: ndims               <span class="comment">! Nr of dims</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  <span class="keywordtype">INTEGER</span>,           <span class="keywordtype">OPTIONAL</span>      :: vdimsize(max_dims)  <span class="comment">! Size of dims</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  <span class="keywordtype">LOGICAL</span>,           <span class="keywordtype">OPTIONAL</span>      :: lrec            <span class="comment">! T if var contains                                                      ! record/unlimited dim</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  <span class="keywordtype">CHARACTER( LEN=4)</span>, <span class="keywordtype">OPTIONAL</span>      :: var_type        <span class="comment">! Variable type</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">! Local variables</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  <span class="keywordtype">INTEGER (KIND=integer32)</span> :: varid_local, itype, idumm, n, undid</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;  <span class="keywordtype">INTEGER (KIND=integer32)</span> :: ndim_local</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  <span class="keywordtype">INTEGER (KIND=integer32)</span> :: dimid       (max_dims)</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  <span class="keywordtype">INTEGER (KIND=integer32)</span> :: dsize_local (max_dims)     <span class="keywordtype">CHARACTER (LEN=80)</span>       :: varnam_local</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  <span class="keywordtype">INTEGER (KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  <span class="keywordtype">INTEGER (KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  <span class="keywordtype">REAL    (KIND=jprb)</span>            :: zhook_handle</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  <span class="comment">! End of header</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook (<span class="stringliteral">&#39;EM_GET_VAR_INFO&#39;</span>, zhook_in, zhook_handle)</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">! Check whether Name or ID of variable in NetCDF file is supplied.</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  nfid = ncid</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  <span class="keywordflow">IF</span> (varnam /= <span class="stringliteral">&quot; &quot;</span> ) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="comment">! Note: &#39;varnam&#39; is intent(int) in nf90_inq_varid.</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="comment">! See note below about &#39;varnam_local&#39;.</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    nstatus = nf90_inq_varid(nfid, trim(varnam), varid_local)</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keyword">CALL </span>nd_error ( <span class="stringliteral">&#39;EM_GET_VAR_INFO&#39;</span>, <span class="stringliteral">&#39;INQ_VARID &#39;</span> // varnam )</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    varid = varid_local</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;  <span class="keywordflow">ELSE</span>                        <span class="comment">! Varname not provided</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keywordflow">IF</span> ( varid &lt;= 0 )      &amp;  <span class="comment">! ID also not provided</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;      ecode = 1</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;      <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a> (<span class="stringliteral">&#39;EM_GET_VAR_INFO&#39;</span>, ecode,                               &amp;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;           <span class="stringliteral">&#39;Either variable name or ID should be provided&#39;</span>)</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    varid_local = varid</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="keywordflow">  END IF</span>            <span class="comment">! check if name/id provided</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  <span class="comment">! Get type information, dimension ids, etc.</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">! (Note: We get the name of the variable, now &#39;varnam_local&#39;,</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment">! which unlike &#39;varnam&#39; above needs to be intent(out) in</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">! nf90_inquire_variable. That is the reason why two</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment">! &#39;varnams&#39; are used. It is necessary to get &#39;varnam_local&#39;</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">! because when this routine is called from EM_GET_TIME_REC! &#39;varnam&#39; is empty).</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  nstatus = nf90_inquire_variable(nfid,  varid_local, varnam_local, itype, &amp;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                                   ndim_local, dimid, idumm)</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  <span class="keyword">CALL </span>nd_error ( <span class="stringliteral">&#39;EM_GET_VAR_INFO&#39;</span>, <span class="stringliteral">&#39;INQ_VARIABLE &#39;</span> // trim(varnam_local) )</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;  varnam = varnam_local</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">! Get optional parameters, starting with nr of dimensions</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  <span class="keywordflow">IF</span> ( <span class="keyword">PRESENT</span>(ndims) ) ndims = ndim_local</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">! Get size of each dimension</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;  <span class="keywordflow">IF</span> ( <span class="keyword">PRESENT</span>(vdimsize) ) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keywordflow">DO</span> n = 1, ndim_local      nstatus = nf90_inquire_dimension(nfid, dimid(n), len = dsize_local(n))</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;      <span class="keyword">CALL </span>nd_error ( <span class="stringliteral">&#39;EM_GET_VAR_INFO&#39;</span>, <span class="stringliteral">&#39;INQ_DIMSIZE &#39;</span> // trim(varnam) )</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    vdimsize(1:ndim_local) = dsize_local(1:ndim_local)</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">! Check if there is record/unlimited dimension. For that get</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">! the corresponding id and later compare it to that of the last! dimension (we assume that time record is always the last dim).</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;  <span class="keywordflow">IF</span> ( <span class="keyword">PRESENT</span>(lrec) )<span class="keywordflow">THEN</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    lrec = .false.</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="comment">! This gets id of unlimited dimension    nstatus = nf90_inquire (nfid, unlimitedDimId = undid)</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keywordflow">IF</span> (dimid(ndim_local) == undid ) lrec = .true.</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;  <span class="comment">! Convert type into string (only the following common types for now)</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;  <span class="keywordflow">IF</span> ( <span class="keyword">PRESENT</span>(var_type) ) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordflow">SELECT CASE</span>(itype)</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;      <span class="keywordflow">CASE</span> (nf90_char)</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        var_type = <span class="stringliteral">&#39;CHAR&#39;</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;      <span class="keywordflow">CASE</span> (nf90_int)</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        var_type = <span class="stringliteral">&#39;INT&#39;</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;      <span class="keywordflow">CASE</span> (nf90_float)</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        var_type = <span class="stringliteral">&#39;REAL&#39;</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;      <span class="keywordflow">CASE</span> (nf90_double)</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        var_type = <span class="stringliteral">&#39;DBLE&#39;</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="keywordflow">      CASE DEFAULT</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keyword">WRITE</span> (<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(A,X,I2)&#39;</span>) <span class="stringliteral">&#39;EM_GET_VAR_INFO: &#39;</span> //                   &amp;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                             <span class="stringliteral">&#39;Unknown variable type defined &#39;</span>, itype</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;em_get_var_info&#39;</span>)</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        <span class="keyword">WRITE</span> (<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(A)&#39;</span>) <span class="stringliteral">&#39;Should be one of: CHAR / INT / REAL / DBLE&#39;</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;em_get_var_info&#39;</span>)</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        nstatus = nf90_ebadname</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <span class="keyword">CALL </span>nd_error ( <span class="stringliteral">&#39;EM_GET_VAR_INFO&#39;</span>, <span class="stringliteral">&#39;VAR_TYPE &#39;</span> // trim(varnam) )</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="keywordflow">    END SELECT</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="keywordflow">  END IF</span>      <span class="comment">! is var_type present?</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook (<span class="stringliteral">&#39;EM_GET_VAR_INFO&#39;</span>, zhook_out, zhook_handle)</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;  <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="keyword">  END SUBROUTINE </span>em_get_var_info</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">! -! Description:</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment">!   Check that dimensions of a variable in a NetCDF file match global sizes.</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment">! Method:</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment">! 1) Call EM_GET_VAR_INFO to get the dimensions and check they match.</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment">! 2) If wrong dimensions or if there is no time record then stop with</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">!    call to EREPORT</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment">! - SUBROUTINE em_var_check_dims (global_row_length, global_rows, model_levels, &amp;</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                               fileid, varname, dimsize)</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160; <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160; <span class="comment">! Subroutine arguments</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160; <span class="keywordtype">INTEGER</span>,           <span class="keywordtype">INTENT(IN)</span>    :: global_row_length</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160; <span class="keywordtype">INTEGER</span>,           <span class="keywordtype">INTENT(IN)</span>    :: global_rows</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160; <span class="keywordtype">INTEGER</span>,           <span class="keywordtype">INTENT(IN)</span>    :: model_levels</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160; <span class="keywordtype">INTEGER</span>,           <span class="keywordtype">INTENT(IN)</span>    :: fileid</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160; <span class="keywordtype">CHARACTER (LEN=*)</span>, <span class="keywordtype">INTENT(INOUT)</span> :: varname</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; <span class="keywordtype">INTEGER</span>,           <span class="keywordtype">INTENT(OUT)</span>   :: dimsize(max_dims)</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160; <span class="comment">! Local variables</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160; <span class="keywordtype">INTEGER</span>                        :: vid    <span class="comment">! variable id</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160; <span class="keywordtype">LOGICAL</span>                        :: lreco  <span class="comment">! true if contains record dim</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160; <span class="keywordtype">INTEGER (KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160; <span class="keywordtype">INTEGER (KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160; <span class="keywordtype">REAL    (KIND=jprb)</span>            :: zhook_handle</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160; <span class="comment">! End of header</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160; <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook (<span class="stringliteral">&#39;EM_VAR_CHECK_DIMS&#39;</span>, zhook_in, zhook_handle)</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment">! Emission files should be defined as (x,y,lev,t)</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment">! Get information on variable</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160; <span class="keyword">CALL </span>em_get_var_info (fileid, vid, varname, vdimsize=dimsize, lrec=lreco)</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment">! Check that dimensions (x, y, lev) match those of the model</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160; <span class="keywordflow">IF</span> ( dimsize(1) /= global_row_length .OR. dimsize(2) /= global_rows .OR.  &amp;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;     (dimsize(3) &gt; 1 .AND. dimsize(3) /= model_levels)               .OR.  &amp;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;      dimsize(3) &lt; 1 )  <span class="keywordflow">THEN</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;   <span class="keyword">WRITE</span> (<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(A,A)&#39;</span>) <span class="stringliteral">&#39;ERROR: Variable dimensions do not match for &#39;</span>,&amp;                    trim(varname)</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;   <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;em_get_var_info&#39;</span>)</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;   <span class="keyword">WRITE</span> (<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(A,3(1x,I5))&#39;</span>) <span class="stringliteral">&#39;Expected:&#39;</span>, global_row_length,  &amp;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                     global_rows, model_levels</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;   <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;em_get_var_info&#39;</span>)</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;   <span class="keyword">WRITE</span> (<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(A,3(1x,I5))&#39;</span>) <span class="stringliteral">&#39;Found:&#39;</span>, dimsize(1:3)</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;   <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;em_get_var_info&#39;</span>)</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;   <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a> (<span class="stringliteral">&#39;EM_VAR_CHECK_DIMS&#39;</span>, fileid,                              &amp;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;       <span class="stringliteral">&#39;Dimension mismatch for: &#39;</span> // trim(varname))</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="keywordflow"> END IF</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment">! Check that there is time record IF (.NOT. lreco )  THEN   WRITE (umMessage,&#39;(A,A)&#39;) &#39;No record dimension found for &#39;, TRIM(varname)</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;   <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;em_get_var_info&#39;</span>)</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;   <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a> (<span class="stringliteral">&#39;EM_VAR_CHECK_DIMS&#39;</span>, fileid,                              &amp;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;       <span class="stringliteral">&#39;Dimension mismatch for: &#39;</span> // trim(varname))</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="keywordflow"> END IF</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160; <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook (<span class="stringliteral">&#39;EM_VAR_CHECK_DIMS&#39;</span>, zhook_out, zhook_handle)</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160; <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="keyword"> END SUBROUTINE </span>em_var_check_dims</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment">! Description:</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment">!   Get time information (in days and seconds) for specified record.</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment">! Method:</span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment">! 1) Call NF90_INQUIRE to get some information about the file: nr of!    variables and id of unlimited dimension.</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment">! 2) Loop through the variables, get info about each one of them by calling!    EM_GET_VAR_INFO and exit when the time variable has been found.</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment">! 3) Get time origin, given by the attribute &#39;units&#39; of the time variable,!    and decode it. Once decoded pass it to TIME2SEC to get that starting!    time in days and seconds: dayfilest, secfilest.</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="comment">! 4) Call EM_GET_DATA to get the values of time in hours (ftime).!    Decode ftime to get that time in days and seconds: tday, tsec</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment">! 5) Update (tday, tsec) by adding the starting times (dayfilest, secfilest)</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment">!    obtained in (3).</span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment">! SUBROUTINE em_get_time_rec (row_length, rows, fileid, irec, iupd_type, &amp;</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                             l_first, l_new_year, tday, tsec, l_notime)</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;  <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;  <span class="comment">! Subroutine arguments </span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span>  :: row_length  <span class="comment">! horiz. model dimensions</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span>  :: rows</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span>  :: fileid      <span class="comment">! File id</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span>  :: irec        <span class="comment">! Which record to check</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span>  :: iupd_type   <span class="comment">! update_type: iupd_serial = 1                                      !              iupd_cyclic = 2</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;  <span class="keywordtype">LOGICAL</span>, <span class="keywordtype">INTENT(IN)</span>  :: l_first     <span class="comment">! First time</span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;  <span class="keywordtype">LOGICAL</span>, <span class="keywordtype">INTENT(IN)</span>  :: l_new_year  <span class="comment">! True if we need to get time</span></div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                                      <span class="comment">! for a new year</span></div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(OUT)</span> :: tday        <span class="comment">! time (in days) found for irec</span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(OUT)</span> :: tsec        <span class="comment">! time (in secs) found for irec</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;  <span class="keywordtype">LOGICAL</span>, <span class="keywordtype">INTENT(OUT)</span> :: l_notime    <span class="comment">! True if no time record in file</span></div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment">! Local variables</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;  <span class="keywordtype">INTEGER (KIND=integer32)</span> ::varid_local, nvars, undid</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;  <span class="keywordtype">INTEGER</span>          :: vid, ndim, dim_size(max_dims)</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;  <span class="keywordtype">INTEGER</span>          :: n</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;  <span class="keywordtype">REAL</span>             :: ftime(1)    <span class="comment">! Fractional time read from the file</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                                  <span class="comment">! Decl as (1) to match nc_get() args</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;  <span class="keywordtype">REAL</span>             :: ftfrac      <span class="comment">! used to separate days &amp; sec in ftime</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;  <span class="keywordtype">CHARACTER(LEN=32)</span>:: tim_name    <span class="comment">! name of record dimensions</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;  <span class="keywordtype">CHARACTER(LEN=40)</span>:: ct_units    <span class="comment">! To store the &quot;units&quot; attribute,                                  ! expected to be something like</span></div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                                  <span class="comment">! &quot;days since yyyy-01-01 00:00:00&quot;</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="comment">! Dummy characters while decoding the time attribute &quot;units&quot;</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;  <span class="keywordtype">CHARACTER(LEN=1)</span> :: cd1         <span class="comment">! for &#39;-&#39;, &#39; &#39; or &#39;:&#39;</span></div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;  <span class="keywordtype">CHARACTER(LEN=4)</span> :: cdumm4      <span class="comment">! for &quot;days&quot;     CHARACTER(LEN=5) :: cdumm5      ! for &quot;hours&quot;</span></div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;  <span class="keywordtype">INTEGER</span>          :: file_origt(6)  <span class="comment">! File origin time, also read from units</span></div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                                     <span class="comment">! 6 posit to hold: yyyy, mm, dd, hh, mm, ss</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;  <span class="keywordtype">INTEGER</span>          :: dayfilest, secfilest <span class="comment">! file orig time in days/sec</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;  <span class="keywordtype">LOGICAL</span>          :: lreco       <span class="comment">! true if single record dim is found  LOGICAL          :: L_unit_dy   ! true if time is in days, otherwise in hours</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">PARAMETER</span> :: sec_in_day  = 86400   <span class="comment">! conv factor, seconds in a day</span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;  <span class="keywordtype">REAL</span>,    <span class="keywordtype">PARAMETER</span> :: hour_to_day = 1./24.  <span class="comment">! conv factor, hours to days</span></div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;  <span class="keywordtype">INTEGER (KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0  <span class="comment">! for DrHook</span></div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;  <span class="keywordtype">INTEGER (KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;  <span class="keywordtype">REAL    (KIND=jprb)</span>            :: zhook_handle</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="comment">! End of header</span></div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook (<span class="stringliteral">&#39;EM_GET_TIME_REC&#39;</span>, zhook_in, zhook_handle)</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="comment">! The code below looks for the time dimension and gets info on it</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="comment">! First get information on file: num variables and id of unlimited dimension</span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;  nfid    = fileid</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;  nstatus = nf90_inquire(nfid, nvariables=nvars, unlimiteddimid = undid)</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;  <span class="keyword">CALL </span>nd_error ( <span class="stringliteral">&#39;EM_GET_TIME_REC&#39;</span>, <span class="stringliteral">&#39;get file info&#39;</span> )</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="comment">! Loop over vars until we get a single record dimension.</span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="comment">! (Note: The variable tim_name is initially passed empty to EM_GET_VAR_INFO;</span></div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="comment">! then that routine returns it filled together with the nr of dims and info</span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="comment">! about whether it is a record variable or not)</span></div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;  <span class="keywordflow">DO</span> n = 1, nvars</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;   vid      = n</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;   tim_name = <span class="stringliteral">&quot; &quot;</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;   <span class="keyword">CALL </span>em_get_var_info (fileid, vid, tim_name, ndims=ndim, lrec=lreco)</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;   <span class="keywordflow">IF</span> ( ndim == 1 .AND. lreco ) <span class="keywordflow">EXIT</span>  <span class="comment">! time dimension found with id and name                                      ! equal to vid and tim_name, respectively</span></div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;  <span class="keywordflow">IF</span> (tim_name == <span class="stringliteral">&quot; &quot;</span>) <span class="keywordflow">THEN</span>     <span class="comment">! No time variable found</span></div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;   <span class="keyword">CALL </span>em_fclose (fileid)</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;   <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a> (<span class="stringliteral">&#39;EM_GET_TIME_REC&#39;</span>, fileid,        &amp;        <span class="stringliteral">&#39;Variable for time not found in file&#39;</span>)</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="comment">! ! Get time origin, given by the attribute &#39;units&#39;, and store it in ct_units</span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;  varid_local = vid   <span class="comment">! variable id for time</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;  nstatus = nf90_get_att(nfid, varid_local, <span class="stringliteral">&#39;units&#39;</span>, ct_units)</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;  <span class="keyword">CALL </span>nd_error ( <span class="stringliteral">&#39;EM_GET_TIME_REC&#39;</span>, <span class="stringliteral">&#39;get time units &#39;</span> // tim_name )</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="comment">! Decode what is held in ct_units, which should be sth similar to!    &quot;days since yyyy-01-01 00:00:00&quot;</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="comment">!   &quot;hours since yyyy-01-01 00:00:00&quot;</span></div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="comment">! Only units allowed are &#39;days&#39; or &#39;hours&#39;.</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;  <span class="keywordflow">IF</span> ( ct_units(1:4) /= <span class="stringliteral">&#39;days&#39;</span> .AND. ct_units(1:4) /= <span class="stringliteral">&#39;hour&#39;</span> )     &amp;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;       <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a>(<span class="stringliteral">&#39;EM_GET_TIME_REC&#39;</span>,fileid,                      &amp;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;            <span class="stringliteral">&#39;Time units should be in days or hours only&#39;</span>)</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;  l_unit_dy = .false.                        <span class="comment">! units are hours  L_unit_dy = ( ct_units(1:4) == &#39;days&#39; )    ! units are days</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="comment">! Continue decoding the units attribute. Now get file_orig (1:6),! which holds (year, month, day, hour, min, sec)</span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;  <span class="keywordflow">IF</span> ( l_unit_dy ) <span class="keywordflow">THEN</span>     <span class="comment">! assume start with the 4-letter word &#39;days&#39;</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <span class="keyword">READ</span> (ct_units,                                             &amp;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        <span class="stringliteral">&#39;(A4,1x,A5,1x,I4,A1,I2,A1,I2,1x,I2,A1,I2,A1,I2)&#39;</span>)       &amp;</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;         cdumm4, cdumm5,                                        &amp; <span class="comment">! &#39;days since&#39;</span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;         file_origt(1), cd1, file_origt(2), cd1, file_origt(3), &amp; <span class="comment">! &#39;yyyy-mm-dd&#39;</span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;         file_origt(4), cd1, file_origt(5), cd1, file_origt(6)    <span class="comment">! &#39;hh:mm:ss&#39;</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;  <span class="keywordflow">ELSE</span>                       <span class="comment">! assume start with the 5-letter word &#39;hours&#39;</span></div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    <span class="keyword">READ</span> (ct_units,                                            &amp;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;       <span class="stringliteral">&#39;(A5,1x,A5,1x,I4,A1,I2,A1,I2,1x,I2,A1,I2,A1,I2)&#39;</span>)       &amp;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        cdumm5, cdumm5,                                        &amp; <span class="comment">! &#39;hours since&#39;</span></div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        file_origt(1), cd1, file_origt(2), cd1, file_origt(3), &amp; <span class="comment">! &#39;yyyy-mm-dd&#39;</span></div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        file_origt(4), cd1, file_origt(5), cd1, file_origt(6)    <span class="comment">! &#39;hh:mm:ss&#39;</span></div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="comment">! Get file data start time in days/secs, e.g. from 0000-01-01.</span></div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="comment">! If file is periodic then ignore year. Note that the year is set to</span></div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="comment">! 0 or 1 depending on the calendar chosen in order to get reasonable! values of dayfilest from TIME2SEC.</span></div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;  <span class="keywordflow">IF</span> (iupd_type == iupd_cyclic) <span class="keywordflow">THEN</span>  <span class="comment">! periodic time series</span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <span class="keywordflow">IF</span>  (lcal360) <span class="keywordflow">THEN</span>                <span class="comment">! 360-d calendar</span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;      file_origt(1) = 0</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    <span class="keywordflow">ELSE</span>      file_origt(1) = 1</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    <span class="comment">! Add one year if indicated by GET_EMFILE_REC (in UKCA_EMISS_MOD)</span></div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="keywordflow">IF</span> (l_new_year) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;      file_origt(1) = file_origt(1) + 1</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="comment">! Pass file_orig (1:6) to time2sec and get the starting time as! days and secs since basis time: dayfilest &amp; secfilest</span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;<span class="comment">! DEPENDS ON: time2sec</span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;  <span class="keyword">CALL </span>time2sec (file_origt(1), file_origt(2), file_origt(3),  &amp;</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                 file_origt(4), file_origt(5), file_origt(6),  &amp;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                 0, 0,                                         &amp;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                 dayfilest, secfilest, lcal360 )</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="comment">! Print out time origin in NetCDF file if first time and extra diags.</span></div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;  <span class="keywordflow">IF</span> (l_first .AND. irec == 1) <span class="keywordflow">THEN</span>    <span class="keywordflow">IF</span> (printstatus &gt;= prstatus_diag) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;      <span class="keyword">WRITE</span> (<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(A,I4,5(1x,I2),2(1x,I8))&#39;</span>) <span class="stringliteral">&#39;EM_GET_TIME_REC: &#39;</span>// &amp;</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;             <span class="stringliteral">&#39;File starts &#39;</span>, file_origt(1:6), dayfilest, secfilest</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;      <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;em_get_var_info&#39;</span>)</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;<span class="comment">! ! Get record for requested time (i.e. record irec from variable</span></div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<span class="comment">! with name tim_name) and store it in ftime</span></div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;  l_notime = .false.</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;  <span class="keyword">CALL </span>em_get_data (row_length, rows, fileid, irec, tim_name, ftime, l_notime)</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;  <span class="keywordflow">IF</span> ( l_notime ) <span class="keywordflow">RETURN</span>   <span class="comment">! no time record found in file</span></div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="comment">! If time is in hours then convert to days</span></div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;  <span class="keywordflow">IF</span> (.NOT. l_unit_dy) ftime(:) = ftime(:) * hour_to_day</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="comment">! Now calculate time in ful days &amp; seconds: tday &amp; tsec.</span></div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="comment">! For that check if ftime value is full days or decimal.! This is done in a crude way, which can lead to very! low decimal diffs at REAL8. Seconds may be rounded off,</span></div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;<span class="comment">! but this is not expected to have any impact.</span></div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;  ftfrac = float( int(ftime(1)) )                    <span class="comment">! Fractional day  tsec   = INT   ( (ftime(1) - ftfrac) * sec_in_day ) ! Fractional part</span></div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                                                      <span class="comment">! of ftime in secs</span></div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;  tday   = int(ftime(1))                           <span class="comment">! Full days</span></div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;<span class="comment">! Finally, get the final time in days and seconds by adding the starting</span></div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="comment">! days and seconds that we read from the attribute &#39;units&#39;.</span></div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;  tday = tday + dayfilest</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;  tsec = tsec + secfilest</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="comment">! tday and tsec can now be passed to other emission routines, where</span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="comment">! they will be compared with the current model time in order to</span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;<span class="comment">! perform interpolations of the emission fields.</span></div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook (<span class="stringliteral">&#39;EM_GET_TIME_REC&#39;</span>, zhook_out, zhook_handle)</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;  <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="keyword"> END SUBROUTINE </span>em_get_time_rec</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;<span class="comment">! ! Description:!   Read data values of character variable in NetCDF file.</span></div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;<span class="comment">! Method:</span></div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="comment">!   Call EM_GET_VAR_INFO to get info on the variable, get</span></div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="comment">!   domain/indices to extract, and call NF90_GET_VAR!   to get the variable values: cvalue.</span></div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;<span class="comment">!  SUBROUTINE em_get_data_char (row_length, rows, fileid, trec,  &amp;</span></div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                              var_name, cvalue, l_norec)</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;   <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;<span class="comment">!  Subroutine arguments</span></div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;   <span class="keywordtype">INTEGER</span>,          <span class="keywordtype">INTENT(IN)</span>    :: row_length <span class="comment">! model horiz dimensions</span></div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;   <span class="keywordtype">INTEGER</span>,          <span class="keywordtype">INTENT(IN)</span>    :: rows</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;   <span class="keywordtype">INTEGER</span>,          <span class="keywordtype">INTENT(IN)</span>    :: fileid    <span class="comment">! file id</span></div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;   <span class="keywordtype">INTEGER</span>,          <span class="keywordtype">INTENT(IN)</span>    :: trec      <span class="comment">! time record wanted</span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;   <span class="keywordtype">CHARACTER(LEN=*)</span>, <span class="keywordtype">INTENT(IN)</span>    :: var_name  <span class="comment">! variable name</span></div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;   <span class="keywordtype">CHARACTER(LEN=*)</span>, <span class="keywordtype">INTENT(INOUT)</span> :: cvalue(*) <span class="comment">! value out</span></div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;   <span class="keywordtype">LOGICAL</span>,          <span class="keywordtype">INTENT(OUT)</span>   :: l_norec   <span class="comment">! T if record not in file (EOF?)</span></div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;<span class="comment">!  Local variables</span></div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;   <span class="keywordtype">INTEGER(KIND=integer32)</span> :: start   (max_dims)</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="comment">!  Vector specifying the index in the variable from which!  the first data value will be read along each dimension</span></div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;   <span class="keywordtype">INTEGER(KIND=integer32)</span> :: counter (max_dims)</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;<span class="comment">!  Vector specifying the number of counters to read along each dimension</span></div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;   <span class="keywordtype">INTEGER(KIND=integer32)</span> :: varid32</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;   <span class="keywordtype">INTEGER</span>                 :: varid, ndim, dim_size(max_dims), n, ilen</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;   <span class="keywordtype">LOGICAL</span>                 :: lreco</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;   <span class="keywordtype">CHARACTER (LEN=80)</span>      :: varname_local</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;   <span class="keywordtype">INTEGER (KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;   <span class="keywordtype">INTEGER (KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;   <span class="keywordtype">REAL    (KIND=jprb)</span>            :: zhook_handle</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;<span class="comment">!  End of header</span></div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;     <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook (<span class="stringliteral">&#39;EM_GET_DATA_CHAR&#39;</span>, zhook_in, zhook_handle)</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;<span class="comment">! Get information on variable</span></div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;   varname_local = var_name    <span class="comment">! need to pass INOUT argument</span></div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;   <span class="keyword">CALL </span>em_get_var_info (fileid,      varid,             varname_local, &amp;</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                         ndims=ndim,  vdimsize=dim_size, lrec=lreco)</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;<span class="comment">! Default indices/domain to extract.</span></div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;<span class="comment">! Default is to get complete data array from NetCDF file so set! all dimensions equal to the size of the variable in the file.</span></div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;   start(1:ndim) = 1</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;   counter(1:ndim) = dim_size(1:ndim)</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;   <span class="keywordflow">IF</span> (lreco) <span class="keywordflow">THEN</span>             <span class="comment">! If var contains time dimension</span></div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;     <span class="keywordflow">IF</span> ( trec &gt; dim_size(ndim) ) <span class="keywordflow">RETURN</span>  <span class="comment">! record out of bounds</span></div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;     <span class="comment">! Read a single time from the file</span></div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;     start(ndim) = trec     <span class="comment">! last index corresponds to record number</span></div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;     counter(ndim) = 1        <span class="comment">! read only one record</span></div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;<span class="keywordflow">   END IF</span></div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;<span class="comment">! Compute ilen: total size needed for upper bound of assumed-size! array used in nf90_get_var. The total array size is the product! of all dimension sizes.</span></div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;   ilen = 1</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;   <span class="keywordflow">DO</span> n =1, ndim</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;     ilen = ilen * counter(n)</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;<span class="keywordflow">   END DO</span></div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;   nfid    = fileid</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;   varid32 = varid    <span class="comment">! 32-bit integer needed</span></div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;   nstatus = nf90_get_var(nfid, varid32, cvalue(1:ilen),   &amp;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                           start(1:ndim), counter(1:ndim))</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;   <span class="keyword">CALL </span>nd_error (<span class="stringliteral">&#39;EM_GET_DATA&#39;</span>, var_name)</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;   <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook (<span class="stringliteral">&#39;EM_GET_DATA_CHAR&#39;</span>, zhook_out, zhook_handle)</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;  <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;<span class="keyword"> END SUBROUTINE </span>em_get_data_char</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;<span class="comment">! ! Description:!   Read data values of integer variable in NetCDF file.</span></div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;<span class="comment">! Method:</span></div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;<span class="comment">!   Call EM_GET_VAR_INFO to get info on the variable, get</span></div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;<span class="comment">!   domain/indices to extract, and call NF90_GET_VAR!   to get the variable values: ivalue.</span></div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;<span class="comment">!  SUBROUTINE em_get_data_int (row_length, rows, fileid, trec,  &amp;</span></div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                             var_name, ivalue, l_norec)</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;   <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;<span class="comment">! Subroutine arguments</span></div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;   <span class="keywordtype">INTEGER</span>,           <span class="keywordtype">INTENT (IN)</span>    :: row_length <span class="comment">! model horiz dimensions</span></div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;   <span class="keywordtype">INTEGER</span>,           <span class="keywordtype">INTENT (IN)</span>    :: rows</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;   <span class="keywordtype">INTEGER</span>,           <span class="keywordtype">INTENT (IN)</span>    :: fileid   <span class="comment">! file id</span></div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;   <span class="keywordtype">INTEGER</span>,           <span class="keywordtype">INTENT (IN)</span>    :: trec     <span class="comment">! time record wanted</span></div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;   <span class="keywordtype">CHARACTER (LEN=*)</span>, <span class="keywordtype">INTENT (IN)</span>    :: var_name <span class="comment">! variable name</span></div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;   <span class="keywordtype">INTEGER</span>,           <span class="keywordtype">INTENT (INOUT)</span> :: ivalue (:) <span class="comment">! variable values to read</span></div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;   <span class="keywordtype">LOGICAL</span>,           <span class="keywordtype">INTENT (OUT)</span>   :: l_norec  <span class="comment">! T if rec not in file, EOF</span></div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;<span class="comment">! Local variables</span></div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;   <span class="keywordtype">INTEGER (KIND=integer32)</span> :: start   (max_dims)</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;<span class="comment">!  Vector specifying the index in the variable from which!  the first data value will be read along each dimension</span></div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;   <span class="keywordtype">INTEGER (KIND=integer32)</span> :: counter (max_dims)</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;<span class="comment">!  Vector specifying the number of counters to read along each dimension</span></div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;   <span class="keywordtype">INTEGER (KIND=integer32)</span> :: varid32</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;   <span class="keywordtype">INTEGER</span>                  :: varid, ndim, dim_size(max_dims), n, ilen</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;   <span class="keywordtype">LOGICAL</span>                  :: lreco    <span class="comment">! true if contains time record dim</span></div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;   <span class="keywordtype">CHARACTER (LEN=80)</span>       :: varname_local</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;   <span class="keywordtype">INTEGER (KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;   <span class="keywordtype">INTEGER (KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;   <span class="keywordtype">REAL    (KIND=jprb)</span>            :: zhook_handle</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;<span class="comment">! End of header</span></div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;   <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook (<span class="stringliteral">&#39;EM_GET_DATA_INT&#39;</span>, zhook_in, zhook_handle)</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;<span class="comment">! Get information on variable</span></div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;   varname_local = var_name    <span class="comment">! need to pass INOUT argument</span></div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;   <span class="keyword">CALL </span>em_get_var_info (fileid,     varid,             varname_local, &amp;</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;                         ndims=ndim, vdimsize=dim_size, lrec=lreco)</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;<span class="comment">! Default indices/domain to extract.</span></div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;<span class="comment">! Default is to get complete data array from NetCDF file so set! all dimensions equal to the size of the variable in the file.</span></div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;   start(1:ndim) = 1</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;   counter(1:ndim) = dim_size(1:ndim)</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;<span class="comment">! If var contains time dimension then select record to read</span></div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;   <span class="keywordflow">IF</span> (lreco) <span class="keywordflow">THEN</span>                 l_norec = .true.       <span class="keywordflow">IF</span> ( trec &gt; dim_size(ndim) ) <span class="keywordflow">RETURN</span>  <span class="comment">! Record out of bounds and</span></div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;                                          <span class="comment">! return that no record found</span></div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;     l_norec        = .false.  <span class="comment">! Indicate to main routine that time rec found</span></div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;     <span class="comment">! Read a single time from the file</span></div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;     start(ndim) = trec     <span class="comment">! last index corresponds to record number</span></div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;     counter(ndim) = 1        <span class="comment">! read only one record</span></div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;<span class="keywordflow">   END IF</span></div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;<span class="comment">! Compute ilen: total size needed for upper bound of assumed-size! array used in nf90_get_var. The total array size is the product! of all dimension sizes.</span></div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;   ilen = 1</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;   <span class="keywordflow">DO</span> n =1, ndim</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;     ilen = ilen * counter(n)</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;<span class="keywordflow">   END DO</span></div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;<span class="comment">! Check that array with data values to read (ivalue) has the right dimensions</span></div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;   <span class="keywordflow">IF</span> (<span class="keyword">SIZE</span> (ivalue,1) /= counter(1)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;     ecode = 1</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;     <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a> (<span class="stringliteral">&#39;EM_GET_DATA_INT&#39;</span>, ecode,           &amp;          <span class="stringliteral">&#39;Dimension mismatch for: &#39;</span> // trim(var_name))</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;<span class="keywordflow">   END IF</span></div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;<span class="comment">!  Get values of the variable as ivalue, specifying what to read</span></div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;<span class="comment">!  with the optional start and counter arguments</span></div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;   nfid    = fileid</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;   varid32 = varid    <span class="comment">! 32-bit integer needed</span></div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;   nstatus = nf90_get_var(nfid, varid32, ivalue(1:ilen), &amp;</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;                           start(1:ndim), counter(1:ndim))</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;   <span class="keyword">CALL </span>nd_error (<span class="stringliteral">&#39;EM_GET_DATA_INT&#39;</span>, var_name)</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;   <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook (<span class="stringliteral">&#39;EM_GET_DATA_INT&#39;</span>, zhook_out, zhook_handle)</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;  <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;<span class="keyword"> END SUBROUTINE </span>em_get_data_int</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;<span class="comment">! ! Description:!   Read data values of one-dimensional real variable</span></div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;<span class="comment">!   in NetCDF file.</span></div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;<span class="comment">! Method:</span></div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;<span class="comment">!   Call EM_GET_VAR_INFO to get info on the variable, get</span></div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;<span class="comment">!   domain/indices to extract, and call NF90_GET_VAR!   to get the variable values: rvalue.</span></div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;<span class="comment">! SUBROUTINE em_get_data_real (row_length, rows, fileid, trec, &amp;</span></div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;                              var_name, rvalue, l_norec)</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;   <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;<span class="comment">! Subroutine arguments</span></div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;   <span class="keywordtype">INTEGER</span>,           <span class="keywordtype">INTENT (IN)</span>    :: row_length <span class="comment">! model horiz dimensions</span></div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;   <span class="keywordtype">INTEGER</span>,           <span class="keywordtype">INTENT (IN)</span>    :: rows</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;   <span class="keywordtype">INTEGER</span>,           <span class="keywordtype">INTENT (IN)</span>    :: fileid     <span class="comment">! file id   INTEGER,           INTENT (IN)    :: trec       ! time record wanted</span></div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;   <span class="keywordtype">CHARACTER (LEN=*)</span>, <span class="keywordtype">INTENT (IN)</span>    :: var_name   <span class="comment">! variable name</span></div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;   <span class="keywordtype">REAL</span>,              <span class="keywordtype">INTENT (INOUT)</span> :: rvalue (:) <span class="comment">! variable values to read</span></div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;   <span class="keywordtype">LOGICAL</span>,           <span class="keywordtype">INTENT (OUT)</span>   :: l_norec    <span class="comment">! T if rec not in file, EOF</span></div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;<span class="comment">! Local variables</span></div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;   <span class="keywordtype">INTEGER (KIND=integer32)</span> :: start   (max_dims)</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;<span class="comment">!  Vector specifying the index in the variable from which!  the first data value will be read along each dimension</span></div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;   <span class="keywordtype">INTEGER (KIND=integer32)</span> :: counter (max_dims)</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;<span class="comment">!  Vector specifying the number of counters to read along each dimension</span></div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;   <span class="keywordtype">INTEGER (KIND=integer32)</span> :: varid32</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;   <span class="keywordtype">INTEGER</span>                  :: varid, ndim, dim_size(max_dims)</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;   <span class="keywordtype">LOGICAL</span>                  :: lreco    <span class="comment">! true if contains time record dim</span></div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;   <span class="keywordtype">CHARACTER (LEN=80)</span>       :: varname_local</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;   <span class="keywordtype">INTEGER (KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;   <span class="keywordtype">INTEGER (KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;   <span class="keywordtype">REAL    (KIND=jprb)</span>            :: zhook_handle</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;<span class="comment">! End of header</span></div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;   <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook (<span class="stringliteral">&#39;EM_GET_DATA_REAL&#39;</span>, zhook_in, zhook_handle)</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;<span class="comment">! Get information on variable</span></div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;   varname_local = var_name    <span class="comment">! need to pass INOUT argument</span></div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;   <span class="keyword">CALL </span>em_get_var_info (fileid,     varid,             varname_local,  &amp;</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;                         ndims=ndim, vdimsize=dim_size, lrec=lreco)</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;<span class="comment">! Default indices/domain to extract.</span></div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;<span class="comment">! Default is to get complete data array from NetCDF file so set! all dimensions equal to the size of the variable in the file.</span></div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;   start(1:ndim) = 1</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;   counter(1:ndim) = dim_size(1:ndim)</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;<span class="comment">! If var contains time dimension then select record to read</span></div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;   <span class="keywordflow">IF</span> (lreco) <span class="keywordflow">THEN</span>                 l_norec = .true.       <span class="keywordflow">IF</span> ( trec &gt; dim_size(ndim) ) <span class="keywordflow">RETURN</span>  <span class="comment">! Record out of bounds and</span></div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;                                          <span class="comment">! return that no record found</span></div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;     l_norec        = .false.  <span class="comment">! Indicate to main routine that time rec found</span></div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;     <span class="comment">! Read a single time from the file</span></div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;     start(ndim) = trec     <span class="comment">! last index corresponds to record number</span></div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;     counter(ndim) = 1        <span class="comment">! read only one record</span></div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;<span class="keywordflow">   END IF</span></div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;<span class="comment">! Check that array with data values to read (rvalue) has the right dimensions</span></div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;   <span class="keywordflow">IF</span> (<span class="keyword">SIZE</span> (rvalue,1) /= counter(1)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;     ecode = 1</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;     <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a> (<span class="stringliteral">&#39;EM_GET_DATA_REAL&#39;</span>, ecode,                 &amp;          <span class="stringliteral">&#39;Dimension mismatch for: &#39;</span> // trim(var_name))</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;<span class="keywordflow">   END IF</span></div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;<span class="comment">!  Get values of the variable as rvalue, specifying what to read</span></div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;<span class="comment">!  with the optional start and counter arguments</span></div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;   nfid    = fileid</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;   varid32 = varid    <span class="comment">! 32-bit integer needed</span></div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;   nstatus = nf90_get_var(nfid, varid32, rvalue, start(1:ndim),&amp;</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;                           counter(1:ndim))</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;   <span class="keyword">CALL </span>nd_error (<span class="stringliteral">&#39;EM_GET_DATA_REAL&#39;</span>, var_name)</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;   <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook (<span class="stringliteral">&#39;EM_GET_DATA_REAL&#39;</span>, zhook_out, zhook_handle)</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;  <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;<span class="keyword"> END SUBROUTINE </span>em_get_data_real</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;<span class="comment">! ! Description:!   Read data values of two-dimensional real variable!   in NetCDF file.</span></div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;<span class="comment">! Method:</span></div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;<span class="comment">!   Call EM_GET_VAR_INFO to get info on the variable, get</span></div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;<span class="comment">!   domain/indices to extract, and call NF90_GET_VAR!   to get the variable values: rvalue.</span></div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;<span class="comment">!  SUBROUTINE em_get_data_real2D (row_length, rows, fileid, trec, &amp;</span></div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;                                var_name, rvalue, l_norec)</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;   <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;  <span class="comment">! Subroutine arguments</span></div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;   <span class="keywordtype">INTEGER</span>,           <span class="keywordtype">INTENT (IN)</span>    :: row_length <span class="comment">! model horiz dimensions</span></div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;   <span class="keywordtype">INTEGER</span>,           <span class="keywordtype">INTENT (IN)</span>    :: rows</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;   <span class="keywordtype">INTEGER</span>,           <span class="keywordtype">INTENT (IN)</span>    :: fileid     <span class="comment">! file id   INTEGER,           INTENT (IN)    :: trec       ! time record wanted</span></div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;   <span class="keywordtype">CHARACTER (LEN=*)</span>, <span class="keywordtype">INTENT (IN)</span>    :: var_name   <span class="comment">! variable name</span></div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;   <span class="keywordtype">REAL</span>,              <span class="keywordtype">INTENT (INOUT)</span> :: rvalue (:,:) <span class="comment">! variable values to read</span></div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;   <span class="keywordtype">LOGICAL</span>,           <span class="keywordtype">INTENT (OUT)</span>   :: l_norec    <span class="comment">! T if rec not in file, EOF</span></div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;<span class="comment">! Local variables</span></div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;   <span class="keywordtype">INTEGER (KIND=integer32)</span> :: start   (max_dims)</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;<span class="comment">!  Vector specifying the index in the variable from which!  the first data value will be read along each dimension</span></div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;   <span class="keywordtype">INTEGER (KIND=integer32)</span> :: counter (max_dims)</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;<span class="comment">!  Vector specifying the number of counters to read along each dimension</span></div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;   <span class="keywordtype">INTEGER (KIND=integer32)</span> :: varid32</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;   <span class="keywordtype">INTEGER</span>                  :: varid, ndim, dim_size(max_dims)</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;   <span class="keywordtype">LOGICAL</span>                  :: lreco    <span class="comment">! true if contains time record dim</span></div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;   <span class="keywordtype">CHARACTER (LEN=80)</span>       :: varname_local</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;   <span class="keywordtype">INTEGER (KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;   <span class="keywordtype">INTEGER (KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;   <span class="keywordtype">REAL    (KIND=jprb)</span>            :: zhook_handle</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;<span class="comment">! End of header</span></div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;   <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook (<span class="stringliteral">&#39;EM_GET_DATA_REAL2D&#39;</span>, zhook_in, zhook_handle)</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;<span class="comment">! Get information on variable</span></div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;   varname_local = var_name    <span class="comment">! need to pass INOUT argument</span></div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;   <span class="keyword">CALL </span>em_get_var_info (fileid,      varid,             varname_local, &amp;</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;                         ndims=ndim,  vdimsize=dim_size, lrec=lreco)</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;<span class="comment">! Default indices/domain to extract.</span></div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;<span class="comment">! Default is to get complete data array from NetCDF file so set! all dimensions equal to the size of the variable in the file.</span></div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;   start(1:ndim) = 1</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;   counter(1:ndim) = dim_size(1:ndim)</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;<span class="comment">! If var contains time dimension then select record to read</span></div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;   <span class="keywordflow">IF</span> (lreco) <span class="keywordflow">THEN</span>                 l_norec = .true.       <span class="keywordflow">IF</span> ( trec &gt; dim_size(ndim) ) <span class="keywordflow">RETURN</span>  <span class="comment">! Record out of bounds and</span></div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;                                          <span class="comment">! return that no record found</span></div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;     l_norec        = .false.  <span class="comment">! Indicate to main routine that time rec found  </span></div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;     <span class="comment">! Read a single time from the file</span></div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;     start(ndim) = trec     <span class="comment">! last index corresponds to record number</span></div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;     counter(ndim) = 1        <span class="comment">! read only one record</span></div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;<span class="keywordflow">   END IF</span></div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;<span class="comment">! Check that array with data values to read (rvalue) has the right dimensions</span></div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;   <span class="keywordflow">IF</span> (<span class="keyword">SIZE</span> (rvalue,1) /= counter(1) .OR.              &amp;</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;       <span class="keyword">SIZE</span> (rvalue,2) /= counter(2)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;     ecode = 1</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;     <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a> (<span class="stringliteral">&#39;EM_GET_DATA_REAL2D&#39;</span>, ecode,         &amp;          <span class="stringliteral">&#39;Dimension mismatch for: &#39;</span> // trim(var_name))</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;<span class="keywordflow">   END IF</span></div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;<span class="comment">!  Get values of the variable as rvalue, specifying what to read</span></div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;<span class="comment">!  with the optional start and counter arguments</span></div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;   nfid    = fileid</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;   varid32 = varid    <span class="comment">! 32-bit integer needed</span></div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;   nstatus = nf90_get_var(nfid, varid32, rvalue, start(1:ndim), &amp;</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;                           counter(1:ndim))</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;   <span class="keyword">CALL </span>nd_error (<span class="stringliteral">&#39;EM_GET_DATA_REAL2D&#39;</span>, var_name)</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;   <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook (<span class="stringliteral">&#39;EM_GET_DATA_REAL2D&#39;</span>, zhook_out, zhook_handle)</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;  <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;<span class="keyword"> END SUBROUTINE </span>em_get_data_real2d</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;<span class="comment">! ! Description:!   Read data values of three-dimensional real variable!   in NetCDF file.</span></div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;<span class="comment">! Method:</span></div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;<span class="comment">!   Call EM_GET_VAR_INFO to get info on the variable, get</span></div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;<span class="comment">!   domain/indices to extract, and call NF90_GET_VAR!   to get the variable values: rvalue.</span></div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;<span class="comment">!   Assumes (lon, lat, lev, time).</span></div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;<span class="comment">!  SUBROUTINE em_get_data_real3D (row_length, rows, fileid, trec,   &amp;</span></div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;                                var_name, rvalue, l_norec)</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160; <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;  <span class="comment">! Subroutine arguments</span></div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160; <span class="keywordtype">INTEGER</span>,           <span class="keywordtype">INTENT (IN)</span>    :: row_length <span class="comment">! model horiz dimensions</span></div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160; <span class="keywordtype">INTEGER</span>,           <span class="keywordtype">INTENT (IN)</span>    :: rows</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160; <span class="keywordtype">INTEGER</span>,           <span class="keywordtype">INTENT (IN)</span>    :: fileid    <span class="comment">! file id</span></div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160; <span class="keywordtype">INTEGER</span>,           <span class="keywordtype">INTENT (IN)</span>    :: trec      <span class="comment">! time record wanted</span></div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160; <span class="keywordtype">CHARACTER (LEN=*)</span>, <span class="keywordtype">INTENT (IN)</span>    :: var_name  <span class="comment">! variable name</span></div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160; <span class="keywordtype">REAL</span>,              <span class="keywordtype">INTENT (INOUT)</span> :: rvalue (:,:,:) <span class="comment">! variable values to read</span></div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160; <span class="keywordtype">LOGICAL</span>,           <span class="keywordtype">INTENT (OUT)</span>   :: l_norec     <span class="comment">! T if rec not in file, EOF</span></div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;<span class="comment">! Local variables</span></div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160; <span class="keywordtype">INTEGER (KIND=integer32)</span> :: start   (max_dims)</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;<span class="comment">! Vector specifying the index in the variable from which! the first data value will be read along each dimension.</span></div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160; <span class="keywordtype">INTEGER (KIND=integer32)</span> :: counter (max_dims)</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;<span class="comment">! Vector specifying the number of counters to read along each dimension</span></div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160; <span class="keywordtype">INTEGER (KIND=integer32)</span> :: varid32</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160; <span class="keywordtype">INTEGER</span>                  :: varid, ndim, dim_size(max_dims)</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160; <span class="keywordtype">LOGICAL</span>                  :: lreco    <span class="comment">! true if contains time record dim</span></div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160; <span class="keywordtype">CHARACTER (LEN=80)</span>       :: varname_local</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160; <span class="keywordtype">INTEGER (KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160; <span class="keywordtype">INTEGER (KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160; <span class="keywordtype">REAL    (KIND=jprb)</span>            :: zhook_handle</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;<span class="comment">! End of header</span></div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160; <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook (<span class="stringliteral">&#39;EM_GET_DATA_REAL3D&#39;</span>, zhook_in, zhook_handle)</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;<span class="comment">! Get information on variable</span></div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160; varname_local = var_name    <span class="comment">! need to pass INOUT argument</span></div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160; <span class="keyword">CALL </span>em_get_var_info (fileid,      varid,             varname_local,   &amp;</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;                       ndims=ndim,  vdimsize=dim_size, lrec=lreco)</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;<span class="comment">! Default indices for the first data value and number of counters</span></div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;<span class="comment">! along three dimensions: lon-lat-lev. Note that counter(3) will</span></div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;<span class="comment">! often be different from the number of model vertical levels, as</span></div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;<span class="comment">! it happens in the case of surface emissions. start   (1:2) = datastart (1:2)</span></div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160; start(3)   = 1</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160; counter(1)   = row_length</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160; counter(2)   = rows</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160; counter(3)   = dim_size(3)</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;<span class="comment">! If var contains time dimension then select record to read</span></div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160; <span class="keywordflow">IF</span> (lreco) <span class="keywordflow">THEN</span>    l_norec = .true.     <span class="keywordflow">IF</span> ( trec &gt; dim_size(ndim) ) <span class="keywordflow">RETURN</span>  <span class="comment">! Record out of bounds and</span></div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;                                        <span class="comment">! return that no record found   L_norec        = .FALSE.  ! Indicate to main routine that time rec found</span></div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;   <span class="comment">! Read a single time from the file</span></div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;   start(ndim) = trec     <span class="comment">! last index corresponds to record number</span></div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;   counter(ndim) = 1        <span class="comment">! read only one record</span></div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;<span class="keywordflow"> END IF</span></div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;<span class="comment">! Check that array with data values to read (rvalue) has the right dimensions</span></div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;<span class="keywordflow">IF</span> (<span class="keyword">SIZE</span> (rvalue,1) /= counter(1) .OR.              &amp;</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;    <span class="keyword">SIZE</span> (rvalue,2) /= counter(2) .OR.              &amp;</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;    <span class="keyword">SIZE</span> (rvalue,3) /= counter(3)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;  ecode = 1</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;  <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a> (<span class="stringliteral">&#39;EM_GET_DATA_REAL3D&#39;</span>, ecode,         &amp;       <span class="stringliteral">&#39;Dimension mismatch for: &#39;</span> // trim(var_name))</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;<span class="keywordflow">END IF</span></div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;<span class="comment">! Get values of the variable as rvalue, specifying what to read</span></div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;<span class="comment">! with the optional start and counter arguments</span></div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160; nfid    = fileid</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160; varid32 = varid    <span class="comment">! 32-bit integer needed</span></div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160; nstatus = nf90_get_var(nfid, varid32, rvalue, start(1:ndim), counter(1:ndim))</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160; <span class="keyword">CALL </span>nd_error (<span class="stringliteral">&#39;EM_GET_DATA_REAL3D&#39;</span>, var_name)</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160; <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook (<span class="stringliteral">&#39;EM_GET_DATA_REAL3D&#39;</span>, zhook_out, zhook_handle)</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160; <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;<span class="keyword"> END SUBROUTINE </span>em_get_data_real3d</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;<span class="comment">! Description:</span></div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;<span class="comment">!   Close NetCDF emission file.</span></div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;<span class="comment">! Method:</span></div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;<span class="comment">!   Call NF90_CLOSE to close a NetCDF file and return nstatus.</span></div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;<span class="comment">!   Call ND_ERROR, which will stop the model if nstatus reports errors.</span></div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;<span class="comment">! SUBROUTINE em_fclose (fileid)</span></div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160; <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;<span class="comment">! Subroutine arguments</span></div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160; <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: fileid</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;<span class="comment">! Local variables</span></div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160; <span class="keywordtype">INTEGER (KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160; <span class="keywordtype">INTEGER (KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160; <span class="keywordtype">REAL    (KIND=jprb)</span>            :: zhook_handle</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;<span class="comment">! End of header</span></div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160; <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook (<span class="stringliteral">&#39;EM_FCLOSE&#39;</span>, zhook_in, zhook_handle)</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160; nfid    = fileid</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160; nstatus = nf90_close(nfid)</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160; <span class="keyword">CALL </span>nd_error (<span class="stringliteral">&#39;EM_FCLOSE&#39;</span>, <span class="stringliteral">&#39; &#39;</span>)</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160; <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook (<span class="stringliteral">&#39;EM_FCLOSE&#39;</span>, zhook_out, zhook_handle)</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160; <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;<span class="keyword"> END SUBROUTINE </span>em_fclose</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;<span class="comment">! ! Description:</span></div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;<span class="comment">!   Checks return status of netcdf call and stop if needed.</span></div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;<span class="comment">! Method:</span></div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;<span class="comment">!   If the return status (nstatus) indicates error then:</span></div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;<span class="comment">!    * Close the NetCDF file by using NF90_CLOSE.</span></div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;<span class="comment">!    * Obtain error message from NF90_STRERROR and concatenate it with</span></div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;<span class="comment">!      the string cmessage, which contains more detailed information passed!      from the routine where the error was found. Then print out</span></div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;<span class="comment">!      those messages and call EREPORT to stop the model.</span></div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;<span class="comment">!   SUBROUTINE nd_error (routine_name, cmessage)</span></div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;  <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;<span class="comment">! Subroutine arguments  CHARACTER (LEN=*), INTENT(IN) :: routine_name ! routine where error found</span></div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;  <span class="keywordtype">CHARACTER (LEN=*)</span>, <span class="keywordtype">INTENT(IN)</span> :: cmessage     <span class="comment">! error messg from that routine</span></div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;<span class="comment">! Local variables</span></div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;  <span class="keywordtype">INTEGER (KIND=integer32)</span>       :: ncode</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;  <span class="keywordtype">INTEGER (KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;  <span class="keywordtype">INTEGER (KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;  <span class="keywordtype">REAL    (KIND=jprb)</span>            :: zhook_handle</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;<span class="comment">! End of header</span></div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook (<span class="stringliteral">&#39;ND_ERROR&#39;</span>, zhook_in, zhook_handle)</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;  <span class="keywordflow">IF</span> ( nstatus /= nf90_noerr ) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;    ncode = nf90_close(nfid)</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;    ecode = 1</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;    <span class="comment">! Printing error messages first to avoid passing</span></div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;    <span class="comment">! a very long string argument to ereport</span></div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;    <span class="keyword">WRITE</span> (<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(a)&#39;</span>) <span class="stringliteral">&#39;Error in &#39;</span> // routine_name    //  <span class="stringliteral">&quot;: &quot;</span>  // &amp;</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;                    trim(nf90_strerror(nstatus))  //  <span class="stringliteral">&quot; - &quot;</span> // &amp;</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;                    trim(cmessage)</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;em_get_var_info&#39;</span>)</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;    <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a> (routine_name, ecode, <span class="stringliteral">&#39;NetCDF error&#39;</span>)</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook (<span class="stringliteral">&#39;ND_ERROR&#39;</span>, zhook_out, zhook_handle)</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;  <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;<span class="keyword">   END SUBROUTINE </span>nd_error</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;<span class="comment">!END MODULE emiss_io_mod</span></div></div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
