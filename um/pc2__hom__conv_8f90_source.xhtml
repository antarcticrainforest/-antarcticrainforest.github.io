<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>UM General Atmosphere: /home/wilfred/PhD/UM/src/atmosphere/large_scale_cloud/pc2_hom_conv.f90 Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="unified_model_logo_2.jpeg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">UM General Atmosphere
   &#160;<span id="projectnumber">8.6</span>
   </div>
   <div id="projectbrief">UK Met Offices Unified Model</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_1df14ea1ac826f73bc3062fa8a76e0c2.xhtml">atmosphere</a></li><li class="navelem"><a class="el" href="dir_4a718005dcd2cc89f5e703eb62b98c3c.xhtml">large_scale_cloud</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">pc2_hom_conv.f90</div>  </div>
</div><!--header-->
<div class="contents">
<a href="pc2__hom__conv_8f90.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="keyword">SUBROUTINE </span><a class="code" href="pc2__hom__conv_8f90.xhtml#aa4b21b820c4e2e186cb800d4266a3c7a" title="Cloud Scheme: Homogenous forcing and Turbulence (non-updating) ">pc2_hom_conv</a>(                                                &amp;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;!&gt;      Pressure related fields</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160; p_theta_levels,                                                        &amp;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;!&gt;      Array dimensions</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160; nlevels,                                                               &amp;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;!&gt;      Timestep</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160; timestep,                                                              &amp;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;!&gt;      Prognostic Fields</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160; t, q, qcl, cf, cfl, cff,                                               &amp;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;!&gt;      Forcing quantities for driving the homogenous forcing</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160; dtin, dqin, dqclin, dpdt, dcflin,                                      &amp;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;!&gt;      Cloud fraction in layers above and below.  cf_above, cf_below,                                                    &amp;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;!&gt;      Output increments to the prognostic fields</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160; dtpc2, dqpc2, dqclpc2, dcfpc2, dcflpc2,                                &amp;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;!&gt;      Other quantities for the turbulence</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160; pc2mixingrate, dbsdtbs1, l_mixing_ratio)</div><div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="pc2__hom__conv_8f90.xhtml#aa4b21b820c4e2e186cb800d4266a3c7a">   21</a></span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;  <span class="keywordtype">USE </span>water_constants_mod<span class="keywordtype">,   ONLY</span>: lc</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;  <span class="keywordtype">USE </span>atmos_constants_mod<span class="keywordtype">,   ONLY</span>: cp, r, repsilon</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;  <span class="keywordtype">USE </span>yomhook<span class="keywordtype">,               ONLY</span>: lhook, dr_hook</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;  <span class="keywordtype">USE </span>parkind1<span class="keywordtype">,              ONLY</span>: jprb, jpim</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;  <span class="keywordtype">USE </span>atm_fields_bounds_mod<span class="keywordtype">, ONLY</span>: pdims, qdims, tdims</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacecloud__inputs__mod.xhtml" title="*****************************COPYRIGHT************************************** ************************...">cloud_inputs_mod</a><span class="keywordtype">,      ONLY</span>: <a class="code" href="namespacecloud__inputs__mod.xhtml#adbc5120f39bf63095329704a1d302e7d">i_pc2_erosion_method</a>,                &amp;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;       l_fixbug_pc2_qcl_incr,<a class="code" href="namespacecloud__inputs__mod.xhtml#a8d957eb7dd8afa520bd3a74c21609daa">l_fixbug_pc2_mixph</a></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacepc2__constants__mod.xhtml" title="*****************************COPYRIGHT************************************** ************************...">pc2_constants_mod</a><span class="keywordtype">,     ONLY</span>: pc2eros_exp_rh,                      &amp;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;       pc2eros_hybrid_allfaces, <a class="code" href="namespacepc2__constants__mod.xhtml#a423668ffaf6ddbef4a38272d2960bb7d">pc2eros_hybrid_sidesonly</a>,               &amp;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;       <a class="code" href="namespacepc2__constants__mod.xhtml#ad2e116520c99b141a71962877ae23956">pdf_power</a>, <a class="code" href="namespacepc2__constants__mod.xhtml#a39237214fa62bcd91fd953adf97b9257">pdf_merge_power</a>, <a class="code" href="namespacepc2__constants__mod.xhtml#a27b925d1b1c25d678f61253aa53b5f96">dbsdtbs_exp</a>, <a class="code" href="namespacepc2__constants__mod.xhtml#ae7b0a4ece1bca69bb8e1b8af489cbc3d">cloud_rounding_tol</a></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespaceereport__mod.xhtml" title="This file belongs in section: Misc. ">ereport_mod</a><span class="keywordtype">, ONLY</span> : <a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">! Description:</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">! Description of Code:</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  <span class="keywordtype">INTEGER</span> ::                                                            &amp;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                        <span class="comment">!, INTENT(IN)</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;   nlevels</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  <span class="keywordtype">REAL</span> ::                                                               &amp;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                        <span class="comment">!, INTENT(IN)</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;   timestep,                                                            &amp;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;   pc2mixingrate,                                                            &amp;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;   dbsdtbs1</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  <span class="keywordtype">REAL</span> ::                                                               &amp;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                        <span class="comment">!, INTENT(IN)</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;   <a class="code" href="varcld_8h.xhtml#acd7a57e90bb1e737ecae71f1c1830ad6">p_theta_levels</a>(pdims%i_start:pdims%i_end,                            &amp;                  pdims%j_start:pdims%j_end,                            &amp;                   nlevels),                                             &amp;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;   t(             tdims%i_start:tdims%i_end,                            &amp;                  tdims%j_start:tdims%j_end,                            &amp;                   nlevels),                                             &amp;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;   q(             qdims%i_start:qdims%i_end,                            &amp;                  qdims%j_start:qdims%j_end,                            &amp;                   nlevels),                                             &amp;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;   qcl(           qdims%i_start:qdims%i_end,                            &amp;                  qdims%j_start:qdims%j_end,                            &amp;                   nlevels),                                             &amp;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;   cf(            qdims%i_start:qdims%i_end,                            &amp;                  qdims%j_start:qdims%j_end,                            &amp;                   nlevels),                                             &amp;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;   cfl(           qdims%i_start:qdims%i_end,                            &amp;                  qdims%j_start:qdims%j_end,                            &amp;                   nlevels),                                             &amp;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;   cff(           qdims%i_start:qdims%i_end,                            &amp;                  qdims%j_start:qdims%j_end,                            &amp;                   nlevels),                                             &amp;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;   dtin(          tdims%i_start:tdims%i_end,                            &amp;                  tdims%j_start:tdims%j_end,                            &amp;                   nlevels),                                             &amp;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;   dqin(          qdims%i_start:qdims%i_end,                            &amp;                  qdims%j_start:qdims%j_end,                            &amp;                   nlevels),                                             &amp;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;   dqclin(        qdims%i_start:qdims%i_end,                            &amp;                  qdims%j_start:qdims%j_end,                            &amp;                   nlevels),                                             &amp;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;   dpdt(          pdims%i_start:pdims%i_end,                            &amp;                  pdims%j_start:pdims%j_end,                            &amp;                   nlevels),                                             &amp;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">!       Increment in pressure from forcing mechanism (Pa)</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;   dcflin(        qdims%i_start:qdims%i_end,                            &amp;                  qdims%j_start:qdims%j_end,                            &amp;                   nlevels),                                             &amp;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">!       Increment in liquid cloud fraction (no units)</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;   cf_above(      qdims%i_start:qdims%i_end,                            &amp;                  qdims%j_start:qdims%j_end,                            &amp;                   nlevels),                                             &amp;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">!       Total cloud fraction in layer above (no units)</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;   cf_below(      qdims%i_start:qdims%i_end,                            &amp;                  qdims%j_start:qdims%j_end,                            &amp;                   nlevels)</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">!       Total cloud fraction in layer below (no units)</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;  <span class="keywordtype">LOGICAL</span> ::                                                            &amp;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                         <span class="comment">!, INTENT(IN)</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;   l_mixing_ratio        <span class="comment">! Use mixing ratio formulation</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">! Arguments with intent out. ie: output variables.</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  <span class="keywordtype">REAL</span> ::                                                               &amp;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                        <span class="comment">!, INTENT(OUT)</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;   dtpc2(         tdims%i_start:tdims%i_end,                            &amp;                  tdims%j_start:tdims%j_end,                            &amp;                   nlevels),                                             &amp;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">!       PC2 Increment to Temperature (K)</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;   dqpc2(         qdims%i_start:qdims%i_end,                            &amp;                  qdims%j_start:qdims%j_end,                            &amp;                   nlevels),                                             &amp;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">!       PC2 Increment to Vapour content (kg water per kg air)</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;   dqclpc2(       qdims%i_start:qdims%i_end,                            &amp;                  qdims%j_start:qdims%j_end,                            &amp;                   nlevels),                                             &amp;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">!       PC2 Increment to Liquid content (kg water per kg air)</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;   dcfpc2(        qdims%i_start:qdims%i_end,                            &amp;                  qdims%j_start:qdims%j_end,                            &amp;                   nlevels),                                             &amp;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">!       PC2 Increment to Total cloud fraction (no units)</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;   dcflpc2(       qdims%i_start:qdims%i_end,                            &amp;                  qdims%j_start:qdims%j_end,                            &amp;                   nlevels)</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">!       PC2 Increment to Liquid cloud fraction (no units)</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">!  External subroutine calls:</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">!  Local parameters and other physical constants</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  <span class="keywordtype">REAL</span>, <span class="keywordtype">PARAMETER</span> :: lcrcp = lc / cp</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">!       Latent heat of condensation divided by heat capacity of air.</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  <span class="keywordtype">REAL</span>, <span class="keywordtype">PARAMETER</span> :: b_factor = (<a class="code" href="namespacepc2__constants__mod.xhtml#ad2e116520c99b141a71962877ae23956">pdf_power</a>+1.0) / (<a class="code" href="namespacepc2__constants__mod.xhtml#ad2e116520c99b141a71962877ae23956">pdf_power</a>+2.0)</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">!       Premultiplier to calculate the amplitude of the probability</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">!       density function at the saturation boundary (G_MQC).</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  <span class="keywordtype">REAL</span>, <span class="keywordtype">PARAMETER</span> :: smallp = 1.0e-10</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">!       Small positive value for use in if tests</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">!  Local scalars-</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  <span class="keywordtype">REAL</span> ::                                                               &amp;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;   alpha,                                                               &amp;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">!       Rate of change of saturation specific humidity with</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">!       temperature calculated at dry-bulb temperature (kg kg-1 K-1)</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;   alpha_p,                                                             &amp;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">!       Rate of change of saturation specific humidity with</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">!       pressure calculated at dry-bulb temperature (Pa K-1)</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;   al,                                                                  &amp;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">!       1 / (1 + alpha L/cp)  (no units)</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;   c_1,                                                                 &amp;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">!       Mid-timestep liquid cloud fraction (no units)</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;   dbsdtbs,                                                             &amp;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">!       Relative rate of change of distribution width (s-1)</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;   dqcdt,                                                               &amp;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">!       Forcing of QC (kg kg-1 s-1)</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;   deltal,                                                              &amp;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">!       Change in liquid content (kg kg-1)</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;   cfl_to_m,                                                            &amp;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">!       CFL(i,j,k)**PDF_MERGE_POWER</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;   sky_to_m,                                                            &amp;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">!       (1-CFL(i,j,k))**PDF_MERGE_POWER</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;   g_mqc,                                                               &amp;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">!       Amplitude of the probability density function at</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">!       the saturation boundary (kg kg-1)-1</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;   qc,                                                                  &amp;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">!       aL (q + l - qsat(TL) )  (kg kg-1)</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;   sd,                                                                  &amp;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">!       Saturation deficit (= aL (q - qsat(T)) )  (kg kg-1)</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;   dcs       <span class="comment">!       Injected cloud fraction</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">!  (b)  Others.</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;  <span class="keywordtype">INTEGER</span> :: k,i,j <span class="comment">! Loop counters:   K - vertical level index</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">!                                   I,J - horizontal position index</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  <span class="keywordtype">INTEGER</span> :: npt</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;  <span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  <span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  <span class="keywordtype">REAL   (KIND=jprb)</span>            :: zhook_handle</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">!  Local arrays</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;  <span class="keywordtype">REAL</span> ::                                                               &amp;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;   qsl_t(     (1+qdims%i_end-qdims%i_start)*                            &amp;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;              (1+qdims%j_end-qdims%<a class="code" href="typ__atm__fields_8h.xhtml#a6d85a200859105ba485b3629e45bf3f1">j_start</a>) ),                          &amp;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">!       Saturated specific humidity for dry bulb temperature T</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;   qsl_tl(    (1+qdims%i_end-qdims%i_start)*                            &amp;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;              (1+qdims%j_end-qdims%j_start) ),                          &amp;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">!       Saturated specific humidity for liquid temperature TL</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;   tl_c(      (1+qdims%i_end-qdims%i_start)*                            &amp;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;              (1+qdims%j_end-qdims%j_start) ),                          &amp;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">!    Liquid temperature (= T - L/cp QCL)  (K)</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;   t_c(       (1+qdims%i_end-qdims%i_start)*                            &amp;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;              (1+qdims%j_end-qdims%j_start) ),                          &amp;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;   p_c(       (1+qdims%i_end-qdims%i_start)*                            &amp;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;              (1+qdims%j_end-qdims%j_start) )</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">!    Temperature and pressure on compressed points for qsat call</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  <span class="keywordtype">INTEGER</span> ::                                                            &amp;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;   index_npt(qdims%i_start:qdims%i_end,                                 &amp;             qdims%j_start:qdims%j_end)</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;  <span class="keywordtype">REAL</span> :: tmp</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;  <span class="keywordtype">REAL</span> :: dqcl, dcl, midpoint_qcl</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  <span class="keywordtype">REAL</span> :: exposed_area, side_face, satdiff, top_face, bot_face</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  <span class="keywordtype">CHARACTER(LEN=256)</span>       :: message</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;  <span class="keywordtype">INTEGER</span>                  :: errorstatus</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment">!- End of Header</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">! ==Main Block==-</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;PC2_HOM_CONV&#39;</span>,zhook_in,zhook_handle)</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment">! Loop round levels to be processed</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment">! Levels_do1:</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;  <span class="keywordflow">DO</span> k = 1, nlevels</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">! copy points into compressed arrays</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    npt = 0</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keywordflow">DO</span> j = qdims%j_start, qdims%j_end</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;      <span class="keywordflow">DO</span> i = qdims%i_start, qdims%i_end</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        <span class="keywordflow">IF</span> (cfl(i,j,k) &gt; <a class="code" href="namespacepc2__constants__mod.xhtml#ae7b0a4ece1bca69bb8e1b8af489cbc3d">cloud_rounding_tol</a> ) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;          npt = npt + 1</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;          index_npt(i,j) = npt</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;          t_c(npt) = t(i,j,k)</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;          tl_c(npt) = t(i,j,k)-lcrcp*qcl(i,j,k)</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;          p_c(npt) = <a class="code" href="varcld_8h.xhtml#acd7a57e90bb1e737ecae71f1c1830ad6">p_theta_levels</a>(i,j,k)</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment">! ! 2. Calculate Saturated Specific Humidity with respect to liquid water</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment">!    for both dry bulb and wet bulb temperatures.</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment">!     IF (npt &gt; 0) THEN</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment">! DEPENDS ON: qsat_wat_mix</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;      <span class="keyword">CALL </span><a class="code" href="qsat__wat__mix_8f90.xhtml#a2c76d0fec243d54bbf3512ebc16d81dc" title="Saturation Specific Humidity Scheme (Qsat_Wat): Vapour to Liquid. ">qsat_wat_mix</a>(qsl_t, t_c, p_c, npt, l_mixing_ratio)</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment">! DEPENDS ON: qsat_wat_mix</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;      <span class="keyword">CALL </span><a class="code" href="qsat__wat__mix_8f90.xhtml#a2c76d0fec243d54bbf3512ebc16d81dc" title="Saturation Specific Humidity Scheme (Qsat_Wat): Vapour to Liquid. ">qsat_wat_mix</a>(qsl_tl, tl_c, p_c, npt, l_mixing_ratio)</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keywordflow">DO</span> j = qdims%j_start, qdims%j_end</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;      <span class="keywordflow">DO</span> i = qdims%i_start, qdims%i_end</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment">! There is no need to perform the total cloud fraction calculation in</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment">! this subroutine if there is no, or full, liquid cloud cover.</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <span class="keywordflow">IF</span> (cfl(i,j,k) &gt;        <a class="code" href="namespacepc2__constants__mod.xhtml#ae7b0a4ece1bca69bb8e1b8af489cbc3d">cloud_rounding_tol</a> .AND.                &amp;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            cfl(i,j,k) &lt; (1.0 - <a class="code" href="namespacepc2__constants__mod.xhtml#ae7b0a4ece1bca69bb8e1b8af489cbc3d">cloud_rounding_tol</a>)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment">! ! 3. Calculate the parameters relating to the probability density func.</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment">! Need to estimate the rate of change of saturated specific humidity</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment">! with respect to temperature (alpha) first, then use this to calculate</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment">! factor aL. Also estimate the rate of change of qsat with pressure.</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;          alpha   = repsilon*lc*qsl_t(index_npt(i,j)) /                 &amp;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                    (r*t_c(index_npt(i,j))**2)</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;          al      = 1.0 / ( 1.0 + lcrcp * alpha )</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;          alpha_p = -qsl_t(index_npt(i,j)) / p_c(index_npt(i,j))</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment">! Calculate the saturation deficit SD</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;          sd      = al * ( qsl_t(index_npt(i,j)) - q(i,j,k) )</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment">! Calculate the amplitude of the probability density function at the</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment">! saturation boundary.</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;          <span class="keywordflow">IF</span> (qcl(i,j,k) &gt; smallp .AND. sd &gt; smallp) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            cfl_to_m = cfl(i,j,k)**<a class="code" href="namespacepc2__constants__mod.xhtml#a39237214fa62bcd91fd953adf97b9257">pdf_merge_power</a></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;            sky_to_m = (1.0 - cfl(i,j,k))**<a class="code" href="namespacepc2__constants__mod.xhtml#a39237214fa62bcd91fd953adf97b9257">pdf_merge_power</a></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            g_mqc = b_factor * ( (1.0-cfl(i,j,k))**2 *                  &amp;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;             cfl_to_m / (sd * (cfl_to_m + sky_to_m))                    &amp;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                  +                   cfl(i,j,k)**2 *                   &amp;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;             sky_to_m / (qcl(i,j,k) * (cfl_to_m + sky_to_m)) )</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;          <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            g_mqc = 0.0</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment">! Calculate the rate of change of Qc due to the forcing</span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;          dqcdt = al * ( dqin(i,j,k) - alpha*dtin(i,j,k)                &amp;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                 -alpha_p*dpdt(i,j,k) ) + dqclin(i,j,k)</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment">! For the background homogeneous forcing from the convection there is</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment">! an additional term because the detrained plume must be saturated.</span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment">! This can also be written as a forcing.</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="comment">!              IF (CFL(i,j,k)  &gt;   0.0 .AND. CFL(i,j,k)  &lt;   1.0) THEN</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment">! This if test is already guaranteed</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;          <span class="keywordflow">IF</span> (dcflin(i,j,k) &gt; 0.0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            dcs = dcflin(i,j,k) / (1.0 - cfl(i,j,k))</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;          <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (dcflin(i,j,k) &lt; 0.0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            dcs = dcflin(i,j,k) / ( - cfl(i,j,k))</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;          <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            dcs = 0.0</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="comment">! Limit DCS to 0 and 1</span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;          dcs   = max( min(dcs,1.0) ,0.0)</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;          dqcdt = dqcdt - al * dcs * (qsl_t(index_npt(i,j))-q(i,j,k))</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment">! Calculate Qc</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;          qc    = al * ( q(i,j,k) + qcl(i,j,k) - qsl_tl(index_npt(i,j)) )</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment">! Calculate the relative rate of change of width of the distribution</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment">! dbsdtbs from the forcing rate</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;          <span class="keywordflow">IF</span> (<a class="code" href="namespacecloud__inputs__mod.xhtml#adbc5120f39bf63095329704a1d302e7d">i_pc2_erosion_method</a> == pc2eros_exp_rh) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            <span class="comment">! Original Wilson et al (2008) formulation: rate of             ! narrowing related to RH via an ad-hoc exponetial.            dbsdtbs = (pc2mixingrate * timestep + dqcdt * dbsdtbs1) *   &amp;</span></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                   exp(-<a class="code" href="namespacepc2__constants__mod.xhtml#a27b925d1b1c25d678f61253aa53b5f96">dbsdtbs_exp</a> * qc / (al * qsl_tl(index_npt(i,j))))</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;          <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (<a class="code" href="namespacecloud__inputs__mod.xhtml#adbc5120f39bf63095329704a1d302e7d">i_pc2_erosion_method</a> == pc2eros_hybrid_allfaces .OR. &amp;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                   <a class="code" href="namespacecloud__inputs__mod.xhtml#adbc5120f39bf63095329704a1d302e7d">i_pc2_erosion_method</a> == <a class="code" href="namespacepc2__constants__mod.xhtml#a423668ffaf6ddbef4a38272d2960bb7d">pc2eros_hybrid_sidesonly</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;            <span class="comment">! Hybrid method            dbsdtbs = 0.0</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            <span class="comment">! By setting this to zero, the next bit of code will not            ! do any width-narrowing to represent erosion.            ! So need to represent erosion in some other way.          ELSE</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            errorstatus=10</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;            message=<span class="stringliteral">&#39;Attempting to use undefined i_pc2_erosion_method&#39;</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;            <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a>(<span class="stringliteral">&#39;PC2_hom_conv&#39;</span>,errorstatus,message)</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="comment">! ! 4. Calculate the change of liquid cloud fraction. This uses the</span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="comment">! arrival value of QC for better behaved numerics.</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="comment">! DQCDT is the homogeneous forcing part, (QC+DQCDT)*DBSDTBS is the</span></div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="comment">! width narrowing part</span></div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;          dcflpc2(i,j,k) = g_mqc * ( dqcdt - (qc + dqcdt)*dbsdtbs)</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment">! Calculate the condensation amount DELTAL. This uses a mid value</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment">! of cloud fraction for better numerical behaviour.</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;          c_1 = max( 0., min( (cfl(i,j,k) + dcflpc2(i,j,k)), 1.) )</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;          dcflpc2(i,j,k) = c_1 - cfl(i,j,k)</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;          c_1 = 0.5 * (c_1 + cfl(i,j,k))</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;          <span class="keywordflow">IF</span> (l_fixbug_pc2_qcl_incr) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;            <span class="comment">! Calculate increment here, without checking it for</span></div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;            <span class="comment">! potential removal of more QCL than there is.</span></div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;            <span class="comment">! A check is carried out at end of routine.</span></div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;            deltal = (c_1 * dqcdt) +                                    &amp;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                   <span class="comment">! The homogeneous forcing part                     ( ( qcl(i,j,k) - (qc * c_1) ) * dbsdtbs)</span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                   <span class="comment">! The PDF width-narrowing part.</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            <span class="comment">! If we have removed all fraction, remove all liquid</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;            <span class="keywordflow">IF</span>(cfl(i,j,k)+dcflpc2(i,j,k) == 0.0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;               deltal = -qcl(i,j,k)</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="keywordflow">            END IF</span></div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;          <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            <span class="comment">! Original code. Note that only the width-narrowing            ! (erosion) bit is limited to not remove more QCL than there</span></div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;            <span class="comment">! is. The homog forcing part can remove too much QCL.</span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            deltal = c_1 * dqcdt +                                      &amp;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                max( (qcl(i,j,k) - qc * c_1) * dbsdtbs , (-qcl(i,j,k)) )</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="keywordflow">          ENDIF</span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;          <span class="keywordflow">IF</span> (<a class="code" href="namespacecloud__inputs__mod.xhtml#adbc5120f39bf63095329704a1d302e7d">i_pc2_erosion_method</a> == pc2eros_exp_rh) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="comment">! Only calculate change in total cloud fraction here if not using! hybrid method as need to add increments from hybrid erosion. Change in</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="comment">! total cloud fraction will be done later.</span></div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="comment">! ! 5. Calculate change in total cloud fraction.</span></div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="comment">! ! The following If test is a copy of the PC2_TOTAL_CF subroutine.</span></div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="comment">!             IF (dcflpc2(i,j,k) &gt; 0.0) THEN</span></div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;<span class="comment">! ...  .AND. CFL(i,j,k)  &lt;   1.0 already assured.</span></div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;               <span class="keywordflow">IF</span> (<a class="code" href="namespacecloud__inputs__mod.xhtml#a8d957eb7dd8afa520bd3a74c21609daa">l_fixbug_pc2_mixph</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="comment">! minimum overlap, this is consistent with pc2_totalcf</span></div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                  dcfpc2(i,j,k) = min(dcflpc2(i,j,k),(1.0-cf(i,j,k)))</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;               <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="comment">! random overlap, this is inconsistent with pc2_totalcf</span></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                  dcfpc2(i,j,k) = dcflpc2(i,j,k) * (1.0 - cf(i,j,k)) /  &amp;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                                                   (1.0 - cfl(i,j,k))</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="keywordflow">               END IF</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;            <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (dcflpc2(i,j,k) &lt; 0.0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="comment">! ...  .AND. CFL(i,j,k)  &gt;   0.0 already assured.</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;               <span class="keywordflow">IF</span> (<a class="code" href="namespacecloud__inputs__mod.xhtml#a8d957eb7dd8afa520bd3a74c21609daa">l_fixbug_pc2_mixph</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="comment">! minimum overlap, this is consistent with pc2_totalcf</span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                  dcfpc2(i,j,k) = max(dcflpc2(i,j,k),(cff(i,j,k)-cf(i,j,k)))</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;               <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="comment">! random overlap, this is inconsistent with pc2_totalcf</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                  dcfpc2(i,j,k) = dcflpc2(i,j,k) *                      &amp;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                      (cf(i,j,k)- cff(i,j,k)) / cfl(i,j,k)</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="keywordflow">               END IF</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;            <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;              dcfpc2(i,j,k) = 0.0</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="keywordflow">            END IF</span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="comment">!           END IF</span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> ( ( cfl(i,j,k)  &gt;=  (1.0 - <a class="code" href="namespacepc2__constants__mod.xhtml#ae7b0a4ece1bca69bb8e1b8af489cbc3d">cloud_rounding_tol</a>) .AND.     &amp;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                    cfl(i,j,k)  &lt;=  (1.0 + <a class="code" href="namespacepc2__constants__mod.xhtml#ae7b0a4ece1bca69bb8e1b8af489cbc3d">cloud_rounding_tol</a>) ) .OR.    &amp;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="comment">! this if test is wrong, it should be cfl &gt;= 1</span></div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;<span class="comment">! add fix on a switch to preserve bit-comparison</span></div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                  ( cfl(i,j,k)  &gt;=  (1.0 - <a class="code" href="namespacepc2__constants__mod.xhtml#ae7b0a4ece1bca69bb8e1b8af489cbc3d">cloud_rounding_tol</a>) .AND.     &amp;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                  <a class="code" href="namespacecloud__inputs__mod.xhtml#a8d957eb7dd8afa520bd3a74c21609daa">l_fixbug_pc2_mixph</a> ) ) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="comment">! Cloud fraction is 1</span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;          dcfpc2(i,j,k)  = 0.0</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;          dcflpc2(i,j,k) = 0.0</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;          alpha   = repsilon * lc * qsl_t(index_npt(i,j)) /             &amp;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                   (r * t_c(index_npt(i,j))**2)</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;          al      = 1.0 / (1.0 + lcrcp*alpha)</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;          alpha_p = -qsl_t(index_npt(i,j)) / p_c(index_npt(i,j))</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;          deltal  = al * (dqin(i,j,k) - alpha*dtin(i,j,k)               &amp;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                -alpha_p*dpdt(i,j,k)) + dqclin(i,j,k)</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="comment">! Cloud fraction is 0</span></div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;          dcfpc2(i,j,k)  = 0.0</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;          dcflpc2(i,j,k) = 0.0</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;          deltal         = 0.0</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="comment">!===========================================================</span></div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="comment">! Hybrid PC2 erosion</span></div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="comment">!===========================================================</span></div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        <span class="keywordflow">IF</span> (<a class="code" href="namespacecloud__inputs__mod.xhtml#adbc5120f39bf63095329704a1d302e7d">i_pc2_erosion_method</a> == pc2eros_hybrid_allfaces .OR.        &amp;</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;            <a class="code" href="namespacecloud__inputs__mod.xhtml#adbc5120f39bf63095329704a1d302e7d">i_pc2_erosion_method</a> == <a class="code" href="namespacepc2__constants__mod.xhtml#a423668ffaf6ddbef4a38272d2960bb7d">pc2eros_hybrid_sidesonly</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;          <span class="comment">! Although this alternative method of doing erosion</span></div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;          <span class="comment">! is being done in a separate, subsequent bit of code to the</span></div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;          <span class="comment">! homogeneous forcing, it is effectively making its          ! calculations in parallel since it uses the input values of</span></div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;          <span class="comment">! cloud fields and thermodynamics.</span></div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;          <span class="keywordflow">IF</span> (<a class="code" href="namespacecloud__inputs__mod.xhtml#adbc5120f39bf63095329704a1d302e7d">i_pc2_erosion_method</a> == pc2eros_hybrid_allfaces) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;            <span class="comment">! Assuming maximum overlap between layers where cloud is             ! present in both layers</span></div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;            top_face=max(0.0, cf(i,j,k)-cf_above(i,j,k))</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;            bot_face=max(0.0, cf(i,j,k)-cf_below(i,j,k))</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;          <span class="keywordflow">IF</span> (cfl(i,j,k) &gt; <a class="code" href="namespacepc2__constants__mod.xhtml#ae7b0a4ece1bca69bb8e1b8af489cbc3d">cloud_rounding_tol</a> .AND.                     &amp;</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;              cfl(i,j,k) &lt; (1.0-<a class="code" href="namespacepc2__constants__mod.xhtml#ae7b0a4ece1bca69bb8e1b8af489cbc3d">cloud_rounding_tol</a>)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;            <span class="comment">! Erosion of cloud is assumed to only happen from the             ! cloud surface area exposed to clear sky.            ! Calculate the difference from saturation</span></div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;            satdiff = qsl_t(index_npt(i,j)) - q(i,j,k)</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;            <span class="comment">! Calculate exposed lateral surface area. Define a function            ! which is an upside-down U shape, going to zero at CFL=0             ! and CFL=1 and with a peak value of 0.5 at CFL=0.5.            side_face = (2.0*cfl(i,j,k)) - (2.0*cfl(i,j,k)*cfl(i,j,k))</span></div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;            <span class="keywordflow">IF</span> (<a class="code" href="namespacecloud__inputs__mod.xhtml#adbc5120f39bf63095329704a1d302e7d">i_pc2_erosion_method</a> == pc2eros_hybrid_allfaces) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;              <span class="comment">! Exposed surface area is made up of contribution</span></div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;              <span class="comment">! from lateral sides and from top and bottom faces.</span></div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;              exposed_area = side_face + top_face + bot_face</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;            <span class="keywordflow">ELSE</span> <span class="comment">!i_pc2_erosion_method == pc2eros_hybrid_sidesonly</span></div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;              exposed_area = side_face</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="keywordflow">            END IF</span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;            dqcl = - exposed_area * pc2mixingrate * satdiff * timestep</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;            <span class="comment">! Find the value of qcl half way through the erosion             ! process for better numerical behaviour.            midpoint_qcl = qcl(i,j,k) + ( 0.5 * dqcl )</span></div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;            <span class="comment">! Assume that the change in QCL is due to            ! width-narrowing. Use that width-narrowing rate to find            ! the consistent change in cloud fraction.            tmp = (midpoint_qcl - (qc * cfl(i,j,k)) )            dcl = - g_mqc * qc * dqcl / tmp</span></div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;          <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> ( ( cfl(i,j,k)  &gt;=  (1.0 - <a class="code" href="namespacepc2__constants__mod.xhtml#ae7b0a4ece1bca69bb8e1b8af489cbc3d">cloud_rounding_tol</a>) .AND.  &amp;</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                    cfl(i,j,k)  &lt;=  (1.0 + <a class="code" href="namespacepc2__constants__mod.xhtml#ae7b0a4ece1bca69bb8e1b8af489cbc3d">cloud_rounding_tol</a>) ) .OR.   &amp;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;<span class="comment">! this if test is wrong, it should be cfl &gt;= 1</span></div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;<span class="comment">! add fix on a switch to preserve bit-comparison</span></div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                  ( cfl(i,j,k)  &gt;=  (1.0 - <a class="code" href="namespacepc2__constants__mod.xhtml#ae7b0a4ece1bca69bb8e1b8af489cbc3d">cloud_rounding_tol</a>) .AND.    &amp;</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                  <a class="code" href="namespacecloud__inputs__mod.xhtml#a8d957eb7dd8afa520bd3a74c21609daa">l_fixbug_pc2_mixph</a> ) ) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;            <span class="comment">! No contribution from lateral exposed area,            ! just from top and bottom.</span></div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;            <span class="keywordflow">IF</span> (<a class="code" href="namespacecloud__inputs__mod.xhtml#adbc5120f39bf63095329704a1d302e7d">i_pc2_erosion_method</a> == pc2eros_hybrid_allfaces) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;              exposed_area = top_face + bot_face</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                  <span class="comment">! Calculate the difference from saturation</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;              satdiff = qsl_t(index_npt(i,j)) - q(i,j,k)</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;              dqcl = - exposed_area * pc2mixingrate * satdiff * timestep</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;              <span class="comment">! If the sky is overcast, and there is no lateral edges              ! where mixing can occur, then mixing can only happen at</span></div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;              <span class="comment">! top and bottom, this is only likely to reduce the QCL              ! of the cloud and not reduce its lateral extent, so in              ! the case of CFL=1 assume              ! no change in cloud fraction due to erosion.</span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;              dcl = 0.0</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;            <span class="keywordflow">ELSE</span> <span class="comment">!i_pc2_erosion_method == pc2eros_hybrid_sidesonly</span></div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;              <span class="comment">! If we assume mixing is only happening from the sides</span></div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;              <span class="comment">! and not the top and bottom, then when cfl=1 there</span></div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;              <span class="comment">! will be no sides exposed and so no mixing at all.</span></div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;              dqcl = 0.0</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;              dcl  = 0.0</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="keywordflow">            END IF</span></div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;          <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;            <span class="comment">! Cloud fraction = 0, so no cloud there to remove.            ! Set sink terms to zero.            dcl=0.0</span></div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;            dqcl=0.0</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;          <span class="comment">! Add the the erosion increments to the homogeneous forcing ones</span></div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;          dcflpc2(i,j,k) = dcflpc2(i,j,k) + dcl</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;          deltal = deltal + dqcl</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;          <span class="comment">! Test for silly things using original value and total increments</span></div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;          <span class="keywordflow">IF</span> (qcl(i,j,k)+deltal &lt;= 0.0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;            <span class="comment">! If we are about to removed all QCL remove all CFL.</span></div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;            dcflpc2(i,j,k) = -cfl(i,j,k)</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;            deltal = -qcl(i,j,k)</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;          <span class="keywordflow">IF</span> ( cfl(i,j,k)+dcflpc2(i,j,k) &lt;= 0.0 ) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;            <span class="comment">! If we are about to removed all CFL remove all QCL.</span></div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;            dcflpc2(i,j,k) = -cfl(i,j,k)</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;            deltal = -qcl(i,j,k)</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;          <span class="keywordflow">IF</span> ( cfl(i,j,k)+dcflpc2(i,j,k) &gt; 1.0 ) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;            <span class="comment">! If we are about to make CFL&gt;1 then only increase it to 1.</span></div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;            dcflpc2(i,j,k) = 1.0-cfl(i,j,k)</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;          <span class="comment">! Calculate change in total cloud fraction.</span></div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;<span class="comment">! The following only needs to be done if 0&lt;CFL&lt;1, but is it worth enforcing that?</span></div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;<span class="comment">! as dcflpc2 will only be non-zero if thing have been done to it in 0&lt;cfl&lt;1 bits</span></div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;<span class="comment">! ! The following If test is a copy of the PC2_TOTAL_CF subroutine.</span></div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;<span class="comment">!             IF (dcflpc2(i,j,k) &gt; 0.0) THEN</span></div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;<span class="comment">! ...  .AND. CFL(i,j,k)  &lt;   1.0 already assured.</span></div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;               <span class="keywordflow">IF</span> (<a class="code" href="namespacecloud__inputs__mod.xhtml#a8d957eb7dd8afa520bd3a74c21609daa">l_fixbug_pc2_mixph</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;<span class="comment">! minimum overlap, this is consistent with pc2_totalcf</span></div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                  dcfpc2(i,j,k) = min(dcflpc2(i,j,k),(1.0-cf(i,j,k)))</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;               <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;<span class="comment">! random overlap, this is inconsistent with pc2_totalcf</span></div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                  dcfpc2(i,j,k) = dcflpc2(i,j,k) * (1.0 - cf(i,j,k)) /  &amp;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                                                   (1.0 - cfl(i,j,k))</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;<span class="keywordflow">               END IF</span></div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;            <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (dcflpc2(i,j,k) &lt; 0.0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;<span class="comment">! ...  .AND. CFL(i,j,k)  &gt;   0.0 already assured.</span></div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;               <span class="keywordflow">IF</span> (<a class="code" href="namespacecloud__inputs__mod.xhtml#a8d957eb7dd8afa520bd3a74c21609daa">l_fixbug_pc2_mixph</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;<span class="comment">! minimum overlap, this is consistent with pc2_totalcf</span></div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                  dcfpc2(i,j,k) = max(dcflpc2(i,j,k),(cff(i,j,k)-cf(i,j,k)))</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;               <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;<span class="comment">! random overlap, this is inconsistent with pc2_totalcf</span></div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                  dcfpc2(i,j,k) = dcflpc2(i,j,k) *                      &amp;</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                    (cf(i,j,k)- cff(i,j,k)) / cfl(i,j,k)</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;<span class="keywordflow">               END IF</span></div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;            <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;              dcfpc2(i,j,k) = 0.0</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;<span class="keywordflow">            END IF</span></div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;<span class="comment">!        END IF ! (i_pc2_erosion_method == hybrid_method)</span></div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;<span class="comment">!===========================================================</span></div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;<span class="comment">! Increment water contents and temperature due to latent heating.</span></div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;<span class="comment">! This subroutine will output only the condensation increments</span></div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;<span class="comment">! hence we comment out updates to qcl, q and t</span></div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;<span class="comment">!           QCL(i,j,k) = QCL(i,j,k) + DELTAL</span></div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;<span class="comment">! Q = input Q + Forcing - Condensation</span></div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;<span class="comment">!           Q(i,j,k)   = Q(i,j,k) + DQIN(i,j,k) - (DELTAL - DLIN(i,j,k))</span></div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;<span class="comment">!           T(i,j,k)   = T(i,j,k) + DTIN(i,j,k)</span></div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;<span class="comment">!    &amp;                            + LCRCP * (DELTAL - DLIN(i,j,k))</span></div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;<span class="comment">! These are the condensation increments</span></div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;        dqclpc2(i,j,k) = deltal - dqclin(i,j,k)</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;        <span class="keywordflow">IF</span> (l_fixbug_pc2_qcl_incr) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;          <span class="comment">! Ensure QCL increment cannot make QCL go negative.</span></div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;          <span class="keywordflow">IF</span> ( qcl(i,j,k) + dqclpc2(i,j,k) &lt; 0.0) <span class="keywordflow">THEN</span>            dqclpc2(i,j,k) = -qcl(i,j,k)<span class="keywordflow">          ENDIF</span><span class="keywordflow">        ENDIF</span></div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        dqpc2(i,j,k)   = - dqclpc2(i,j,k)</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;        dtpc2(i,j,k)   = lcrcp * dqclpc2(i,j,k)</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;<span class="keywordflow">      END DO</span>  <span class="comment">! i</span></div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;<span class="keywordflow">    END DO</span>  <span class="comment">! j</span></div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;<span class="keywordflow">  END DO</span>  <span class="comment">! k</span></div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;<span class="comment">! End of the subroutine</span></div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;PC2_HOM_CONV&#39;</span>,zhook_out,zhook_handle)</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;  <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;<span class="keyword">END SUBROUTINE </span><a class="code" href="pc2__hom__conv_8f90.xhtml#aa4b21b820c4e2e186cb800d4266a3c7a" title="Cloud Scheme: Homogenous forcing and Turbulence (non-updating) ">pc2_hom_conv</a></div></div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
