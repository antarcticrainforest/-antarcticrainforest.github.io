<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>UM General Atmosphere: /home/wilfred/PhD/UM/src/atmosphere/dynamics/utils_mod.f90 Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="unified_model_logo_2.jpeg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">UM General Atmosphere
   &#160;<span id="projectnumber">8.6</span>
   </div>
   <div id="projectbrief">UK Met Offices Unified Model</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_1df14ea1ac826f73bc3062fa8a76e0c2.xhtml">atmosphere</a></li><li class="navelem"><a class="el" href="dir_3434fbb10f6d8705d2e7ec704c1ef2f1.xhtml">dynamics</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">utils_mod.f90</div>  </div>
</div><!--header-->
<div class="contents">
<a href="utils__mod_8f90.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">! Code description:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno"><a class="line" href="namespaceutils__mod.xhtml">   13</a></span>&#160;<span class="keyword">MODULE</span> <a class="code" href="namespaceutils__mod.xhtml" title="*****************************COPYRIGHT*******************************!&gt; (C) Crown copyright Met Offic...">utils_mod</a></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespaceereport__mod.xhtml" title="This file belongs in section: Misc. ">ereport_mod</a><span class="keywordtype">, ONLY</span> : <a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keywordtype">USE </span>yomhook<span class="keywordtype">,     ONLY</span> : lhook, dr_hook</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keywordtype">USE </span>parkind1<span class="keywordtype">,    ONLY</span> : jprb, jpim</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="namespaceutils__mod.xhtml#a09982a006d4a5d90d9863e21413e692e">   21</a></span>&#160;<span class="keywordtype">CHARACTER(len=256)</span>            :: <a class="code" href="namespaceutils__mod.xhtml#a09982a006d4a5d90d9863e21413e692e">cmessage</a></div><div class="line"><a name="l00022"></a><span class="lineno"><a class="line" href="namespaceutils__mod.xhtml#aac2589e37304a92c198973e22961ea3a">   22</a></span>&#160;<span class="keywordtype">INTEGER</span>                       :: <a class="code" href="namespaceutils__mod.xhtml#aac2589e37304a92c198973e22961ea3a">icode</a></div><div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="namespaceutils__mod.xhtml#a6a102784c6e3b42f4552d47d5b4521b2">   23</a></span>&#160;<span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: <a class="code" href="namespaceutils__mod.xhtml#a6a102784c6e3b42f4552d47d5b4521b2">zhook_in</a>  = 0</div><div class="line"><a name="l00024"></a><span class="lineno"><a class="line" href="namespaceutils__mod.xhtml#a732e92691cab87011dd55399a5f69ae2">   24</a></span>&#160;<span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: <a class="code" href="namespaceutils__mod.xhtml#a732e92691cab87011dd55399a5f69ae2">zhook_out</a> = 1</div><div class="line"><a name="l00025"></a><span class="lineno"><a class="line" href="namespaceutils__mod.xhtml#acfb29c34f7efc0e5828f07c4274879b5">   25</a></span>&#160;<span class="keywordtype">REAL(KIND=jprb)</span>               :: <a class="code" href="namespaceutils__mod.xhtml#acfb29c34f7efc0e5828f07c4274879b5">zhook_handle</a></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keyword">CONTAINS</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">FUNCTION </span><a class="code" href="namespaceutils__mod.xhtml#a4e83e114a8122d91175901fa51c504d5">integrate_halfint</a>(x, height)</div><div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="namespaceutils__mod.xhtml#a4e83e114a8122d91175901fa51c504d5">   30</a></span>&#160;  <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">! Description:</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  <span class="comment">! Parameters</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;  <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span> :: x(:)</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;  <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span> :: height(size(x,1))</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  <span class="comment">! The result of the integration</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  <span class="keywordtype">REAL</span> :: integrate_halfint</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  <span class="comment">! Working variables</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  <span class="keywordtype">INTEGER</span> :: i</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  <span class="keywordtype">REAL</span> :: deriv</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  <span class="keywordtype">CHARACTER(len=25)</span>   :: routinenme = <span class="stringliteral">&#39;INTEGRATE_HALFINT&#39;</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(routinenme,<a class="code" href="namespaceutils__mod.xhtml#a6a102784c6e3b42f4552d47d5b4521b2">zhook_in</a>,<a class="code" href="namespaceutils__mod.xhtml#acfb29c34f7efc0e5828f07c4274879b5">zhook_handle</a>)</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  <span class="comment">! Perform the integration; first the bits between grid points</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  integrate_halfint = 0.0</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  <span class="keywordflow">DO</span> i=1, <span class="keyword">SIZE</span>(x)-1</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    integrate_halfint = integrate_halfint &amp;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                        + (x(i) + x(i+1)) * 0.5 * (height(i+1) - height(i))</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  <span class="comment">! Now account for the bits on the end.  The const. gradient correction is only</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  <span class="comment">! made if we have enough data points:</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  integrate_halfint = integrate_halfint + x(1) * height(1)</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  <span class="keywordflow">IF</span> (<span class="keyword">SIZE</span>(x,1) &gt; 1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    deriv = ( x(2) - x(1) ) / ( height(2) - height(1) )</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    integrate_halfint = integrate_halfint &amp;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                        - 0.5 * (height(1))**2 * deriv</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(routinenme,<a class="code" href="namespaceutils__mod.xhtml#a732e92691cab87011dd55399a5f69ae2">zhook_out</a>,<a class="code" href="namespaceutils__mod.xhtml#acfb29c34f7efc0e5828f07c4274879b5">zhook_handle</a>)</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="keyword">END FUNCTION </span><a class="code" href="namespaceutils__mod.xhtml#a4e83e114a8122d91175901fa51c504d5">integrate_halfint</a></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="keyword">FUNCTION </span><a class="code" href="namespaceutils__mod.xhtml#a634624f9865fd619988c365e4ee38dcf">deriv</a>(x, h0, height)</div><div class="line"><a name="l00090"></a><span class="lineno"><a class="line" href="namespaceutils__mod.xhtml#a634624f9865fd619988c365e4ee38dcf">   90</a></span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespacefrierson__global.xhtml" title="*****************************COPYRIGHT*******************************!&gt; (C) Crown copyright Met Offic...">frierson_global</a><span class="keywordtype">, ONLY</span> : <a class="code" href="namespacefrierson__global.xhtml#a915e25318652df897c8956db633189e0" title="use cubic interplation: ">cubic</a></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">! Description:</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">! Parameters:</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">!   x      : Array specifying the value of the quantity at various heights</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">!   height : Array specifying what heights the quantity is specified at</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">!   h0     : The height at which we want the derivative of x</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  <span class="comment">! Parameters</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span> :: x(:), h0, height(size(x,1))</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  <span class="keywordtype">REAL</span> :: deriv</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  <span class="comment">! The points we are fitting to; x3 and x4 are estimated derivs at h1, h2</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  <span class="keywordtype">REAL</span> :: x1, x2, x3, x4, h1, h2</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  <span class="comment">! The coefficients for the cubic we fit - a*h^3 + b*h^2 + c*h</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;  <span class="comment">! Don&#39;t need a constant because the cubic is differentiated</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  <span class="keywordtype">REAL</span> :: a, b, c, d</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  <span class="comment">! Working variables</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  <span class="keywordtype">INTEGER</span> :: i, n</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;  <span class="keywordtype">CHARACTER(len=25)</span>   :: routinenme = <span class="stringliteral">&#39;DERIV&#39;</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(routinenme,<a class="code" href="namespaceutils__mod.xhtml#a6a102784c6e3b42f4552d47d5b4521b2">zhook_in</a>,<a class="code" href="namespaceutils__mod.xhtml#acfb29c34f7efc0e5828f07c4274879b5">zhook_handle</a>)</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  <span class="comment">! If there is only one point, we can&#39;t estimate the deriv</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  <span class="keywordflow">IF</span> (<span class="keyword">SIZE</span>(x,1) &lt; 2) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceutils__mod.xhtml#a27fd469d1bf78e37eae7902444010be4">error</a>(<span class="stringliteral">&quot;&lt; 2 gridpoints passed to utils_mod.deriv in &quot;</span> //&amp;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                 __file__)</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  <span class="comment">! If there are only two points, return the gradient of the line they make</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;  <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (<span class="keyword">SIZE</span>(x,1) == 2) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    deriv = (x(1) - x(2)) / (height(1) - height(2))</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  <span class="comment">! Find the index of the gridpoint immediately above h0</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  i = <a class="code" href="namespaceutils__mod.xhtml#af7241d3b5409e6269728c37c50812984">search_gridpoint_by_height</a>(h0, height)</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  <span class="comment">! If h0 is below the bottom grid point or above the top one</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  <span class="keywordflow">IF</span> (i == 1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    deriv = (x(1) - x(2)) / (height(1) - height(2))</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;  <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (i == <span class="keyword">SIZE</span>(x,1) + 1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    n = <span class="keyword">SIZE</span>(x,1)</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    deriv = (x(n) - x(n-1)) / (height(n) - height(n-1))</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;  <span class="keywordflow">IF</span> (<a class="code" href="namespacefrierson__global.xhtml#a915e25318652df897c8956db633189e0" title="use cubic interplation: ">cubic</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="comment">! Find the two points on either side of h0</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    x1 = x(i)</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    h1 = height(i)</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    x2 = x(i-1)</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    h2 = height(i-1)</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="comment">! Estimate the derivative on the gridpoints</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    x3 = <a class="code" href="namespaceutils__mod.xhtml#adcb79f21826654c69427237b492c0d1e">deriv_gridpoint</a>(x, i, height)</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    x4 = <a class="code" href="namespaceutils__mod.xhtml#adcb79f21826654c69427237b492c0d1e">deriv_gridpoint</a>(x, i-1, height)</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="comment">! Calculate the coefficients for the cubic</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceutils__mod.xhtml#a68ca86ec0d44e08f2c97becf3a900788">find_cubic_coeffs</a> (x1, x3, h1, x2, x4, h2, a, b, c, d)</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="comment">! Calculate the value of the derivative of the cubic at h0</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    deriv = 3*a*h0**2 + 2*b*h0 + c</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    deriv = (x(i) - x(i-1)) / (height(i) - height(i-1))</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(routinenme,<a class="code" href="namespaceutils__mod.xhtml#a732e92691cab87011dd55399a5f69ae2">zhook_out</a>,<a class="code" href="namespaceutils__mod.xhtml#acfb29c34f7efc0e5828f07c4274879b5">zhook_handle</a>)</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="keyword">END FUNCTION </span><a class="code" href="namespaceutils__mod.xhtml#a634624f9865fd619988c365e4ee38dcf">deriv</a></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="keyword">FUNCTION </span><a class="code" href="namespaceutils__mod.xhtml#adcb79f21826654c69427237b492c0d1e">deriv_gridpoint</a>(x, i, height)</div><div class="line"><a name="l00178"></a><span class="lineno"><a class="line" href="namespaceutils__mod.xhtml#adcb79f21826654c69427237b492c0d1e">  178</a></span>&#160;  <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">! Description:</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">!   Estimates the derivative of a quantity x at the ith gridpoint.</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment">! Method:</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">!   Interpolates a straight line between gridpoints i, i+1 and i-1, i.  This</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">!   results in two derivatives which are assumed to apply midway (in height)</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">!   between gridpoints i-1,i and i,i+1.  Linear interpolation is then used to</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">!   estimate the derivative at the original gridpoint.</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">! Parameters:</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">!   x      : The value of the quantity to be estimated at each gridpoint</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment">!   i      : The gridpoint (i.e. array index) at which the derivative should be</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">!            estimated</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">!   height : An array giving the height (altitude) of each gridpoint</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;  <span class="comment">! Parameters</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;  <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span> :: x(:), height(size(x,1))</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: i</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;  <span class="keywordtype">REAL</span> :: deriv_gridpoint</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;  <span class="comment">! Derivatives midway between gridpoints on either side of gridpoint i, and</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;  <span class="comment">! the points at which they are valid</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  <span class="keywordtype">REAL</span> :: d1, d2, h1, h2</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  <span class="comment">! How far through the interval height(i) is; used for linear interpolation</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;  <span class="keywordtype">REAL</span> :: f</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;  <span class="keywordtype">CHARACTER(len=25)</span>   :: routinenme = <span class="stringliteral">&#39;DERIV_GRIDPOINT&#39;</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(routinenme,<a class="code" href="namespaceutils__mod.xhtml#a6a102784c6e3b42f4552d47d5b4521b2">zhook_in</a>,<a class="code" href="namespaceutils__mod.xhtml#acfb29c34f7efc0e5828f07c4274879b5">zhook_handle</a>)</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;  <span class="comment">! Can&#39;t estimate a deriv with only one gridpoint</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;  <span class="keywordflow">IF</span> (<span class="keyword">SIZE</span>(x,1) &lt; 2) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceutils__mod.xhtml#a27fd469d1bf78e37eae7902444010be4">error</a>(<span class="stringliteral">&quot;&lt; 2 gridpoints passed to utils_mod.deriv_gridpoint in &quot;</span> //&amp;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;               __file__)</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;   <span class="comment">! If there are only two gridpoints, fit a straight line</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;  <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (<span class="keyword">SIZE</span>(x,1) == 2) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    deriv_gridpoint = (x(1) - x(2)) / (height(1) - height(2))</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;  <span class="comment">! If we are on the first or the last gridpoint, do something simple</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;  <span class="keywordflow">IF</span> (i == <span class="keyword">SIZE</span>(x,1)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    deriv_gridpoint = (x(i) - x(i-1)) / (height(i) - height(i-1))</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;  <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (i == 1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    deriv_gridpoint = (x(1) - x(2)) / (height(1) - height(2))</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;  <span class="comment">! The only case left is the usual case.  First find midpoint derivatives</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;  d1 = (x(i-1) - x(i)) / (height(i-1) - height(i))</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;  d2 = (x(i+1) - x(i)) / (height(i+1) - height(i))</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;  <span class="comment">! The heights at which these midpoint derivatives apply</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;  h1 = 0.5 * (height(i-1) + height(i))</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;  h2 = 0.5 * (height(i+1) + height(i))</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;  <span class="comment">! Do linear interpolation between these two midpoints</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;  f = (height(i) - h1) / (h2 - h1)</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;  deriv_gridpoint = (1.0-f)*d1 + f*d2</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(routinenme,<a class="code" href="namespaceutils__mod.xhtml#a732e92691cab87011dd55399a5f69ae2">zhook_out</a>,<a class="code" href="namespaceutils__mod.xhtml#acfb29c34f7efc0e5828f07c4274879b5">zhook_handle</a>)</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="keyword">END FUNCTION </span><a class="code" href="namespaceutils__mod.xhtml#adcb79f21826654c69427237b492c0d1e">deriv_gridpoint</a></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="keyword">SUBROUTINE </span><a class="code" href="namespaceutils__mod.xhtml#a68ca86ec0d44e08f2c97becf3a900788">find_cubic_coeffs</a> (x1, xp1, h1, x2, xp2, h2, a, b, c, d)</div><div class="line"><a name="l00249"></a><span class="lineno"><a class="line" href="namespaceutils__mod.xhtml#a68ca86ec0d44e08f2c97becf3a900788">  249</a></span>&#160;  <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160; <span class="comment">! Description:</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment">!   Fits a cubic to two data points, given the value of the function and its</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment">!   derivative at each of those points.</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment">! Method:</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="comment">!   Formulae derived in Maple.  Uses double precision to help reduce FP errors.</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment">! Parameters:</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment">!   x1 (in)  : Value of the function at h1</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment">!   xp1 (in) : Value of the functions derivative wrt h at h1</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment">!   h1 (in)  : The position where the function is valued as above</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="comment">!   x2 (in)  : Value of the function at h2</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment">!   xp2 (in) : Value of the functions derivative wrt h at h2</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment">!   h2 (in)  : The position where the function is valued as above</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment">!   a  (out) : The coefficient of h^3 in the cubic</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment">!   b  (out) : The coefficient of h^2 in the cubic</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment">!   c  (out) : The coefficient of h in the cubic</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment">!   d  (out) : The constant in the cubic</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span> :: x1, xp1, h1, x2, xp2, h2</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;  <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(OUT)</span> :: a, b, c, d</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;  <span class="comment">! Commonly occuring denominators in the formulae</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  <span class="keywordtype">REAL</span> :: denom1, denom2</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;  <span class="keywordtype">CHARACTER(len=25)</span>   :: routinenme = <span class="stringliteral">&#39;FIND_CUBIC_COEFFS&#39;</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(routinenme,<a class="code" href="namespaceutils__mod.xhtml#a6a102784c6e3b42f4552d47d5b4521b2">zhook_in</a>,<a class="code" href="namespaceutils__mod.xhtml#acfb29c34f7efc0e5828f07c4274879b5">zhook_handle</a>)</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;  <span class="comment">! Calculate the coefficients for the cubic</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;  denom1 = (h1 - h2)**(-3)</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;  denom2 = (h1 - h2)**(-2)</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;   a = 2 * (x2 - x1) * denom1  +  (xp1 + xp2) * denom2</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;  b = 3 * (h1+h2) * (x1-x2) * denom1 &amp;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;      - ( (h1+2*h2) * xp1 + (2*h1+h2) * xp2 ) * denom2</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;  c = 6 * h2 * h1 * (x2-x1) * denom1 &amp;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;      + ( (h1+2*h2)*h1*xp2 + (2*h1+h2)*h2*xp1 ) * denom2</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  d = ( (3*h1-h2) * h2**2 * x1  +  (h1-3*h2) * h1**2 * x2 ) * denom1 &amp;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;      - (h2*xp1 + h1*xp2) * h1 * h2 * denom2</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(routinenme,<a class="code" href="namespaceutils__mod.xhtml#a732e92691cab87011dd55399a5f69ae2">zhook_out</a>,<a class="code" href="namespaceutils__mod.xhtml#acfb29c34f7efc0e5828f07c4274879b5">zhook_handle</a>)</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="keyword">END SUBROUTINE </span><a class="code" href="namespaceutils__mod.xhtml#a68ca86ec0d44e08f2c97becf3a900788">find_cubic_coeffs</a></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="keyword">SUBROUTINE </span><a class="code" href="namespaceutils__mod.xhtml#a44bce2b22f4496cc3e05156e4283b42f">find_linear_coeffs</a> (x1, h1, x2, h2, a, b)</div><div class="line"><a name="l00295"></a><span class="lineno"><a class="line" href="namespaceutils__mod.xhtml#a44bce2b22f4496cc3e05156e4283b42f">  295</a></span>&#160;  <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment">! Description:</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="comment">!   Fits a straight line to two points, and returns the coefficients of the 1st</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="comment">!   order polynomial in a and b, i.e. a*h + b.</span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;  <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span> :: x1, h1, x2, h2</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;  <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(OUT)</span> :: a, b</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;  <span class="keywordtype">CHARACTER(len=25)</span>   :: routinenme = <span class="stringliteral">&#39;FIND_LINEAR_COEFFS&#39;</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(routinenme,<a class="code" href="namespaceutils__mod.xhtml#a6a102784c6e3b42f4552d47d5b4521b2">zhook_in</a>,<a class="code" href="namespaceutils__mod.xhtml#acfb29c34f7efc0e5828f07c4274879b5">zhook_handle</a>)</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;  a = (x1 - x2) / (h1 - h2)</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;  b = x1 - h1*a</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(routinenme,<a class="code" href="namespaceutils__mod.xhtml#a732e92691cab87011dd55399a5f69ae2">zhook_out</a>,<a class="code" href="namespaceutils__mod.xhtml#acfb29c34f7efc0e5828f07c4274879b5">zhook_handle</a>)</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="keyword">END SUBROUTINE </span><a class="code" href="namespaceutils__mod.xhtml#a44bce2b22f4496cc3e05156e4283b42f">find_linear_coeffs</a></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="keyword">FUNCTION </span><a class="code" href="namespaceutils__mod.xhtml#af7241d3b5409e6269728c37c50812984">search_gridpoint_by_height</a>(h0, height)</div><div class="line"><a name="l00316"></a><span class="lineno"><a class="line" href="namespaceutils__mod.xhtml#af7241d3b5409e6269728c37c50812984">  316</a></span>&#160;  <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="comment">! Description:</span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="comment">!   Find the index of the gridpoint which is immediately above the height h0.</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="comment">!   If there is no such gridpoint, return SIZE(height) + 1.</span></div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="comment">! Method:</span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="comment">!   For the moment, simply goes through the array of heights and finds the</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="comment">!   least i such that height(i) &gt; h0.  If efficiency improvements are needed</span></div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="comment">!   and the number of gridpoints is large, this could be better done by binary</span></div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="comment">!   search.</span></div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment">! Parameters:</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment">!   h0     : The height we want to find</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment">!   height : The height of each gridpoint</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;  <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span> :: h0, height(:)</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;  <span class="keywordtype">INTEGER</span> :: search_gridpoint_by_height, i</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;  <span class="keywordtype">CHARACTER(len=25)</span>   :: routinenme = <span class="stringliteral">&#39;SEARCH_GRIDPOINT_BY_HEIGHT&#39;</span></div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(routinenme,<a class="code" href="namespaceutils__mod.xhtml#a6a102784c6e3b42f4552d47d5b4521b2">zhook_in</a>,<a class="code" href="namespaceutils__mod.xhtml#acfb29c34f7efc0e5828f07c4274879b5">zhook_handle</a>)</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;  i = 1</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;  <span class="keywordflow">DO</span> <span class="keywordflow">WHILE</span> (height(i) &lt; h0)</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    i = i + 1</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keywordflow">IF</span> (i &gt; <span class="keyword">SIZE</span>(height,1)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;      <span class="keywordflow">EXIT</span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;  search_gridpoint_by_height = i</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(routinenme,<a class="code" href="namespaceutils__mod.xhtml#a732e92691cab87011dd55399a5f69ae2">zhook_out</a>,<a class="code" href="namespaceutils__mod.xhtml#acfb29c34f7efc0e5828f07c4274879b5">zhook_handle</a>)</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="keyword">END FUNCTION </span><a class="code" href="namespaceutils__mod.xhtml#af7241d3b5409e6269728c37c50812984">search_gridpoint_by_height</a></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="keyword">FUNCTION </span><a class="code" href="namespaceutils__mod.xhtml#a342a50c6f6fc85a69eaa3ec622a2ecba">interp</a>(x, h0, height)</div><div class="line"><a name="l00355"></a><span class="lineno"><a class="line" href="namespaceutils__mod.xhtml#a342a50c6f6fc85a69eaa3ec622a2ecba">  355</a></span>&#160;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespacefrierson__global.xhtml" title="*****************************COPYRIGHT*******************************!&gt; (C) Crown copyright Met Offic...">frierson_global</a><span class="keywordtype">, ONLY</span> : <a class="code" href="namespacefrierson__global.xhtml#a915e25318652df897c8956db633189e0" title="use cubic interplation: ">cubic</a></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;  <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="comment">! Description:</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="comment">!   Interpolates a variable x to an altitude h0.  If h0 is outside the range</span></div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="comment">!   of gridpoints, do simple linear extrapolation from the nearest two</span></div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="comment">!   gridpoints.</span></div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="comment">! Method:</span></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="comment">!   Uses cubic interpolation based on the value of x at the two gridpoints on</span></div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="comment">!   either side of h0, with derivatives at those two gridpoints estimated by</span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="comment">!   deriv_gridpoint.  Note that this may give suboptimal results for the end</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="comment">!   segments, where estimation of the derivative uses a rather naive algorithm.</span></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="comment">! Parameters:</span></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="comment">!   x      : The quantity to interpolate, sampled at various heights</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="comment">!   h0     : The height to estimate it at</span></div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="comment">!   height : An array specifying the heights at which x is sampled</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;  <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span> :: x(:), h0, height(size(x))</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;  <span class="keywordtype">REAL</span> :: interp</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;  <span class="comment">! The index of the gridpoint just above the height we&#39;re interpolating to</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;  <span class="keywordtype">INTEGER</span> :: i</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;  <span class="comment">! The coefficients of terms in the cubic: a*h^3 + b*h^2 + c*h + d</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;  <span class="keywordtype">REAL</span> :: a, b, c, d</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;  <span class="keywordtype">INTEGER</span> :: n</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;  <span class="keywordtype">CHARACTER(len=25)</span>   :: routinenme = <span class="stringliteral">&#39;INTERP&#39;</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(routinenme,<a class="code" href="namespaceutils__mod.xhtml#a6a102784c6e3b42f4552d47d5b4521b2">zhook_in</a>,<a class="code" href="namespaceutils__mod.xhtml#acfb29c34f7efc0e5828f07c4274879b5">zhook_handle</a>)</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;  <span class="comment">! If there is only one gridpoint, we can&#39;t do anything sensible</span></div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;  <span class="keywordflow">IF</span> (<span class="keyword">SIZE</span>(x,1) == 1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceutils__mod.xhtml#a27fd469d1bf78e37eae7902444010be4">error</a> (<span class="stringliteral">&quot;&lt; 2 gridpoints passed to utils_mod.interp in &quot;</span> // __file__)</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;  <span class="comment">! Find the index of the gridpoint immediately above h0</span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;  i = <a class="code" href="namespaceutils__mod.xhtml#af7241d3b5409e6269728c37c50812984">search_gridpoint_by_height</a>(h0, height)</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;  <span class="comment">! If h0 is above the maximum or below the minimum height, do simple constant</span></div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;  <span class="comment">! extrapolation</span></div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;  n = <span class="keyword">SIZE</span>(x)</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;  <span class="keywordflow">IF</span> (i == 1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160; <span class="comment">!   a = 0.0</span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160; <span class="comment">!   b = 0.0</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160; <span class="comment">!   CALL find_linear_coeffs (x(1), height(1), x(2), height(2), c, d)</span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;     interp = x(1)</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;  <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (i == n + 1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;<span class="comment">!    a = 0.0</span></div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;<span class="comment">!    b = 0.0</span></div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="comment">!    CALL find_linear_coeffs (x(n), height(n), x(n-1), height(n-1), c, d)</span></div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;     interp = x(n)</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;  <span class="comment">! Otherwise, we just do cubic interpolation</span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;  <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <span class="keywordflow">IF</span> (<a class="code" href="namespacefrierson__global.xhtml#a915e25318652df897c8956db633189e0" title="use cubic interplation: ">cubic</a>.and.i.gt.2.and.i.lt.n) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;      <span class="keyword">CALL </span><a class="code" href="namespaceutils__mod.xhtml#a68ca86ec0d44e08f2c97becf3a900788">find_cubic_coeffs</a>( &amp;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;           x(i)  , <a class="code" href="namespaceutils__mod.xhtml#adcb79f21826654c69427237b492c0d1e">deriv_gridpoint</a>(x, i  , height), height(i),   &amp;</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;           x(i-1), <a class="code" href="namespaceutils__mod.xhtml#adcb79f21826654c69427237b492c0d1e">deriv_gridpoint</a>(x, i-1, height), height(i-1), &amp;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;           a, b, c, d)</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        <span class="comment">! Evaluate the polynomial at h0</span></div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;      interp = a*h0**3 + b*h0**2 + c*h0 + d</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;      interp = max(interp,min(x(i-1),x(i  )))</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;      interp = min(interp,max(x(i-1),x(i  )))</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;      interp = (x(i-1) *  (height(i)-h0         )  + &amp;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;            x(i  ) *  (h0       -height(i-1)) )/(height(i)-height(i-1))</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(routinenme,<a class="code" href="namespaceutils__mod.xhtml#a732e92691cab87011dd55399a5f69ae2">zhook_out</a>,<a class="code" href="namespaceutils__mod.xhtml#acfb29c34f7efc0e5828f07c4274879b5">zhook_handle</a>)</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="keyword">END FUNCTION </span><a class="code" href="namespaceutils__mod.xhtml#a342a50c6f6fc85a69eaa3ec622a2ecba">interp</a></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;<span class="keyword">SUBROUTINE </span><a class="code" href="namespaceutils__mod.xhtml#a27fd469d1bf78e37eae7902444010be4">error</a>(msg)</div><div class="line"><a name="l00439"></a><span class="lineno"><a class="line" href="namespaceutils__mod.xhtml#a27fd469d1bf78e37eae7902444010be4">  439</a></span>&#160;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="comment">! Description:</span></div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;<span class="comment">!   Called whenever a fatal error occurs.  Prints a message and exits.</span></div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;  <span class="keywordtype">CHARACTER*(*)</span> :: msg</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;  <a class="code" href="namespaceutils__mod.xhtml#aac2589e37304a92c198973e22961ea3a">icode</a> = 1</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;  <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a>(<span class="stringliteral">&quot;error&quot;</span>,<a class="code" href="namespaceutils__mod.xhtml#aac2589e37304a92c198973e22961ea3a">icode</a>, msg)</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="keyword">END SUBROUTINE </span><a class="code" href="namespaceutils__mod.xhtml#a27fd469d1bf78e37eae7902444010be4">error</a></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;<span class="keyword">END MODULE </span><a class="code" href="namespaceutils__mod.xhtml" title="*****************************COPYRIGHT*******************************!&gt; (C) Crown copyright Met Offic...">utils_mod</a></div></div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
