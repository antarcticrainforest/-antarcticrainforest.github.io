<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>UM General Atmosphere: /home/wilfred/PhD/UM/src/atmosphere/convection/det_rate_mod-6a.f90 Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="unified_model_logo_2.jpeg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">UM General Atmosphere
   &#160;<span id="projectnumber">8.6</span>
   </div>
   <div id="projectbrief">UK Met Offices Unified Model</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_1df14ea1ac826f73bc3062fa8a76e0c2.xhtml">atmosphere</a></li><li class="navelem"><a class="el" href="dir_c7cc3e4dc8dce4a958919661145604f9.xhtml">convection</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">det_rate_mod-6a.f90</div>  </div>
</div><!--header-->
<div class="contents">
<a href="det__rate__mod-6a_8f90.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;</div><div class="line"><a name="l00005"></a><span class="lineno"><a class="line" href="namespacedet__rate__6a__mod.xhtml">    5</a></span>&#160;<span class="keyword">MODULE</span> <a class="code" href="namespacedet__rate__6a__mod.xhtml" title="Calculates forced detrainment rate in layer K. ">det_rate_6a_mod</a></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">! Description:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">CONTAINS</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">SUBROUTINE </span><a class="code" href="namespacedet__rate__6a__mod.xhtml#aee37cc7fce5d601c443e2466fc64c6bb" title="Calculates forced detrainment rate in layer K. ">det_rate_6a</a> (npnts, exkp1,                         &amp;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;                        thek, thekp1, thpk, thpkp1, thrk,     &amp;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;                        qek, qekp1, qpk, qpkp1, qrk,          &amp;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;                        Qlkp1, Qfkp1, Frezkp1,                &amp;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;                        ekp14, ekp34,                         &amp;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;                        deltak)</div><div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="namespacedet__rate__6a__mod.xhtml#aee37cc7fce5d601c443e2466fc64c6bb">   30</a></span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keywordtype">USE </span>water_constants_mod<span class="keywordtype">, ONLY</span>: lc, lf</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keywordtype">USE </span>atmos_constants_mod<span class="keywordtype">, ONLY</span>: cp</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespacecv__derived__constants__mod.xhtml" title="!&gt; Module holding commonly derived constants used in convection !&gt; Module holding commonly derived co...">cv_derived_constants_mod</a><span class="keywordtype">, ONLY</span>: <a class="code" href="namespacecv__derived__constants__mod.xhtml#a18bc83d7c223f455921c3af9b8ed67b0" title="This module calculate commonly used constants derived from!&gt; UM constants. ">ls</a></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespacecv__run__mod.xhtml" title="*****************************COPYRIGHT************************************** ************************...">cv_run_mod</a><span class="keywordtype">, ONLY</span>: <a class="code" href="namespacecv__run__mod.xhtml#a74f2d7ae02c5541d92cea45d3a4946db">fdet_opt</a></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keywordtype">USE </span>yomhook<span class="keywordtype">, ONLY</span>: lhook, dr_hook</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keywordtype">USE </span>parkind1<span class="keywordtype">, ONLY</span>: jprb, jpim</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespaceereport__mod.xhtml" title="This file belongs in section: Misc. ">ereport_mod</a><span class="keywordtype">, ONLY</span> : <a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;-<span class="comment">! Variables which are input</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;-</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: npnts     <span class="comment">! Number of points</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keywordtype">REAL</span>,<span class="keywordtype">INTENT(IN)</span> :: exkp1(npnts)  <span class="comment">! Exner ratio at mid-point of layer k+1</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keywordtype">REAL</span>,<span class="keywordtype">INTENT(IN)</span> :: thek(npnts)   <span class="comment">! Env. potential temperature in layer k (K)</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="keywordtype">REAL</span>,<span class="keywordtype">INTENT(IN)</span> :: thekp1(npnts) <span class="comment">! Env. potential temperature in layer k+1</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keywordtype">REAL</span>,<span class="keywordtype">INTENT(IN)</span> :: thpk(npnts)   <span class="comment">! Par. potential temperature in layer k (K)</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keywordtype">REAL</span>,<span class="keywordtype">INTENT(IN)</span> :: thpkp1(npnts) <span class="comment">! Par. potential temperature in layer k+1 (K)</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keywordtype">REAL</span>,<span class="keywordtype">INTENT(IN)</span> :: thrk(npnts)   <span class="comment">! p. temperature of forced detrained</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                                 <span class="comment">! parcel in layer k (K)</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keywordtype">REAL</span>,<span class="keywordtype">INTENT(IN)</span> :: qek(npnts)    <span class="comment">! Env. specific humidity in layer k (kg/kg)</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keywordtype">REAL</span>,<span class="keywordtype">INTENT(IN)</span> :: qekp1(npnts)  <span class="comment">! Env. spec. humidity in layer k+1 (kg/kg)</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keywordtype">REAL</span>,<span class="keywordtype">INTENT(IN)</span> :: qpk(npnts)    <span class="comment">! Par. specific humidity in layer k (kg/kg)</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keywordtype">REAL</span>,<span class="keywordtype">INTENT(IN)</span> :: qpkp1(npnts)  <span class="comment">! Par. specific humidity in layer k+1 (kg/kg)</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="keywordtype">REAL</span>,<span class="keywordtype">INTENT(IN)</span> :: qrk(npnts)    <span class="comment">! Specific humidity of forced detrained</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                                 <span class="comment">! parcel in layer k (kg/kg)</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="keywordtype">REAL</span>,<span class="keywordtype">INTENT(IN)</span> :: Qlkp1(npnts)  <span class="comment">! Amount of condensation to liquid water                                 ! in the parcel (kg/kg)</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="keywordtype">REAL</span>,<span class="keywordtype">INTENT(IN)</span> :: Qfkp1(npnts)  <span class="comment">! Amount of deposition to ice water</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                                 <span class="comment">! in the parcel (kg/kg)</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="keywordtype">REAL</span>,<span class="keywordtype">INTENT(IN)</span> :: Frezkp1(npnts)<span class="comment">! Amount of freezing from liquid                                 ! to ice water in the parcel (kg/kg)</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="keywordtype">REAL</span>,<span class="keywordtype">INTENT(IN)</span> :: ekp14(npnts)  <span class="comment">! Entrainment coefficient at level k+1/4                                 ! multiplied by appropriate layer thickness</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="keywordtype">REAL</span>,<span class="keywordtype">INTENT(IN)</span> :: ekp34(npnts)  <span class="comment">! Entrainment coefficient at level k+3/4                                 ! multiplied by appropriate layer thickness</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                                -<span class="comment">! Variables which are output</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;-</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="keywordtype">REAL</span>,<span class="keywordtype">INTENT(OUT)</span> :: deltak(npnts)<span class="comment">! Parcel forced detrainment rate in                                 ! layer k multiplied by layer thickness</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="keywordtype">REAL</span> :: deltaqk(npnts)           <span class="comment">! Parcel forced detrainment rate based on                                 ! specific humidity eqn in                                 ! layer k multiplied by layer thickness</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="keywordtype">REAL</span> :: deltathk(npnts)          <span class="comment">! Parcel forced detrainment rate based on                                 ! potential temperature eqn in                                 ! layer k multiplied by layer thickness</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="keywordtype">INTEGER</span> :: i                     <span class="comment">! loop counter</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="keywordtype">INTEGER</span> :: errorstatus           <span class="comment">! error status</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="keywordtype">REAL</span> :: Factor      <span class="comment">! factor used to calculate the detrainment rate.</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="keywordtype">REAL</span> :: Denom       <span class="comment">! denominator used to calculate the detrainment rate.</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="keywordtype">REAL</span> :: Numer       <span class="comment">! numerator used to calculate the detrainment rate.</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">PARAMETER</span> :: eps=epsilon(denom) <span class="comment">!Smallest allowable denominator</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="keywordtype">CHARACTER(LEN=80)</span> :: cmessage    <span class="comment">! error message</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="keywordtype">CHARACTER(LEN=11)</span>, <span class="keywordtype">PARAMETER</span> ::  routinename = <span class="stringliteral">&#39;det_rate_6a&#39;</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="keywordtype">REAL(KIND=jprb)</span>               :: zhook_handle</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;DET_RATE_6A&#39;</span>,zhook_in,zhook_handle)</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  <span class="keywordflow">DO</span> i=1,npnts</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    factor = ekp14(i)*qek(i) + (1.0+ekp14(i))*ekp34(i)*qekp1(i)             &amp;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;             - (1.0+ekp14(i))*(1.0+ekp34(i))                                &amp;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;             * (qpkp1(i) + qlkp1(i) + qfkp1(i))  </div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    numer  = qpk(i) + factor</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    denom  = qrk(i) + factor</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">IF</span> (abs(denom) &lt;= eps*abs(numer)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;      <span class="comment">!If the denominator is close to zero then set      !the detrainment rate to one (plus a bit to ensure      !that this is taken account of later).</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;      deltaqk(i) = 1.1</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;      deltaqk(i) = numer/denom</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">! Calculate the forced detrainment rate for theta</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  <span class="keywordflow">DO</span> i=1,npnts</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    factor = ekp14(i)*thek(i) + (1.0+ekp14(i))*ekp34(i)*thekp1(i)           &amp;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;             - (1.0+ekp14(i))*(1.0+ekp34(i))                                &amp;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;             * (thpkp1(i) - (lc*qlkp1(i) + <a class="code" href="namespacecv__derived__constants__mod.xhtml#a18bc83d7c223f455921c3af9b8ed67b0" title="This module calculate commonly used constants derived from!&gt; UM constants. ">ls</a>*qfkp1(i) + lf*frezkp1(i))     &amp;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;             / (cp*exkp1(i)))</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;     numer  = thpk(i) + factor</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    denom  = thrk(i) + factor</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;     <span class="keywordflow">IF</span> (abs(denom) &lt;= eps*abs(numer)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;      <span class="comment">!If the denominator is close to zero then set      !the detrainment rate to one (plus a bit to ensure      !that this is taken account of later).</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;      deltathk(i) = 1.1</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;      deltathk(i) = numer/denom</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">! Copy the either the humidity or theta based detrainment rate to the! output detrainment rate</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  <span class="keywordflow">IF</span> (<a class="code" href="namespacecv__run__mod.xhtml#a74f2d7ae02c5541d92cea45d3a4946db">fdet_opt</a> == 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">DO</span> i=1,npnts</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;      deltak(i) = deltaqk(i)</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (<a class="code" href="namespacecv__run__mod.xhtml#a74f2d7ae02c5541d92cea45d3a4946db">fdet_opt</a> == 1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keywordflow">DO</span> i=1,npnts</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;      deltak(i) = deltathk(i)<span class="keywordflow">         END DO</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    errorstatus = 1   <span class="comment">! will cause model to fail    WRITE (cmessage,&#39;(a44)&#39;) &#39;Invalid value for fdet_opt. Valid values=0,1&#39;</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a>(routinename, errorstatus, cmessage)</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">! But if either deltaqk or deltathk are outside of the acceptable</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">! range then reset to either 0.0 or 1.0 as appropriate.</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  <span class="keywordflow">DO</span> i=1,npnts         <span class="keywordflow">IF</span> (deltaqk(i) &lt;= 0.0 .OR. deltathk(i) &lt;= 0.0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;      deltak(i) = 0.0</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (deltaqk(i) &gt;= 1.0 .OR. deltathk(i) &gt;= 1.0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;      deltak(i) = 1.0</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;DET_RATE_6A&#39;</span>,zhook_out,zhook_handle)</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="keywordflow">RETURN</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="keyword">END SUBROUTINE </span><a class="code" href="namespacedet__rate__6a__mod.xhtml#aee37cc7fce5d601c443e2466fc64c6bb" title="Calculates forced detrainment rate in layer K. ">det_rate_6a</a></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="keyword">END MODULE </span><a class="code" href="namespacedet__rate__6a__mod.xhtml" title="Calculates forced detrainment rate in layer K. ">det_rate_6a_mod</a></div></div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
