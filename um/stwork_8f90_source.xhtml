<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>UM General Atmosphere: /home/wilfred/PhD/UM/src/control/stash/stwork.f90 Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="unified_model_logo_2.jpeg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">UM General Atmosphere
   &#160;<span id="projectnumber">8.6</span>
   </div>
   <div id="projectbrief">UK Met Offices Unified Model</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_b81b067251166617f9d0a8c0cfc3a4a9.xhtml">control</a></li><li class="navelem"><a class="el" href="dir_807f876cb6d36c1a4c0b1b86608d148a.xhtml">stash</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">stwork.f90</div>  </div>
</div><!--header-->
<div class="contents">
<a href="stwork_8f90.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword">SUBROUTINE </span><a class="code" href="stwork_8f90.xhtml#a60176015435dd67d80b42122c78e024e" title="Subroutine STWORK !&gt; ">stwork</a> (                                                  &amp;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;     d1,len_tot,stash_work,stash_work_len,lenout,                    &amp;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;     global_lenout,                                                  &amp;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;     is,im,ilstart,ilend,step,steps_per_period,secs_per_period,      &amp;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;     previous_time,                                                  &amp;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;     stlist,len_stlist,totitems,si,nsects,nitems,                    &amp;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;     stash_levels,num_stash_levels,num_level_lists,                  &amp;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;     stash_pseudo_levels,num_stash_pseudo,num_pseudo_lists,          &amp;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;     max_stash_levs,sttabl,nsttims,                                  &amp;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;     nsttabl,stash_series,stash_series_len,                          &amp;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;     stash_series_rec_len,stash_series_index,stash_ser_index_size,   &amp;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;     pp_pack_code,ft_steps,ft_firststep,                             &amp;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;     fixhd,inthd,realhd,len_fixhd,len_inthd,len_realhd,              &amp;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;     levdepc,len1_levdepc,len2_levdepc,                              &amp;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;     lookup,rlookup,len1_lookup,len2_lookup,                         &amp;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;     pp_len2_lookup,nunits,pp_len2_look,                             &amp;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;     lcyclic,                                                   &amp;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;     t_rows,u_rows,row_length,t_field,u_field,t_levels,              &amp;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;     river_rows, river_row_length,                                   &amp;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;     fcst_prd,run_indic_op,elf,ft_lastfield,                         &amp;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;     sm_ident,im_ident,dump_pack,                                    &amp;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;     stsuparrlen, stsuparr, istsuparr, sa_idx, sa_idxlen,            &amp;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;     icode,cmessage)</div><div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="stwork_8f90.xhtml#a60176015435dd67d80b42122c78e024e">   78</a></span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  <span class="keywordtype">USE </span>yomhook<span class="keywordtype">, ONLY</span>: lhook, dr_hook</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  <span class="keywordtype">USE </span>parkind1<span class="keywordtype">, ONLY</span>: jprb, jpim</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacefilenamelength__mod.xhtml" title="Module for allocation of Filename length. Module for allocation of Filename length. ">filenamelength_mod</a><span class="keywordtype">, ONLY</span>: <a class="code" href="namespacefilenamelength__mod.xhtml#a1f0ba129cfb2cc488313a144ac04a0e8" title="The module sets the max length of a filename in the UM. ">filenamelength</a></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespaceio.xhtml" title="Code Owner: See Unified Model Code owners HTML page. ">io</a><span class="keywordtype">, ONLY</span> : <a class="code" href="namespaceio.xhtml#ac523e2c0480c522622bf5ef27880cc5d">is_unit_open</a>, <a class="code" href="namespaceio.xhtml#a819755aa2d67c4c2448e11828c25c7f5">iofiletypeum</a></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacemodel__file.xhtml" title="A simple data module containing variables related to STASH buffering. ">model_file</a><span class="keywordtype">, ONLY</span> :          &amp;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;     get_file_address,            &amp;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;     <a class="code" href="namespacemodel__file.xhtml#a739b20a20822d3df25e6d5f8e8e53f51">mf_data_address</a>,             &amp;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;     get_mf_information,          &amp;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;     <a class="code" href="namespacemodel__file.xhtml#a40cb275cb568b03f4fb2e06003a725cc" title="Other Data. ">mf_num_preallocated_headers</a>, &amp;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;     attachlookups,               &amp;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;     <a class="code" href="namespacemodel__file.xhtml#a1be124d410691b7f407165dd575888e3" title="This value is part of the file format, and other utilities expect it. ">mf_data_missing</a>,             &amp;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;     <a class="code" href="namespacemodel__file.xhtml#a07b515dfc8147e86355cd71196399c5d">model_file_open</a>,             &amp;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;     model_file_managed</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  <span class="keywordtype">USE </span>ios_stash</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  <span class="keywordtype">USE </span>stwork_aux</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  <span class="keywordtype">USE </span>ios_model_geometry<span class="keywordtype">, ONLY</span> :   &amp;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;     maxfielddomain</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespaceio__configuration__mod.xhtml" title="This file belongs in section: C96. ">io_configuration_mod</a><span class="keywordtype">, ONLY</span> : &amp;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;     <a class="code" href="namespaceio__configuration__mod.xhtml#a47a1a0bfdbd64545a5967659ae7d6435">io_field_padding</a></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacemissing__data__mod.xhtml" title="*****************************COPYRIGHT************************************** ************************...">missing_data_mod</a><span class="keywordtype">, ONLY</span>: <a class="code" href="namespacemissing__data__mod.xhtml#a3f0f5f89671006d2b52aac53d30dc926">rmdi</a>, <a class="code" href="namespacemissing__data__mod.xhtml#aff73e8cc7491c6c6a6b2bcc14c172e20">imdi</a></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespaceereport__mod.xhtml" title="This file belongs in section: Misc. ">ereport_mod</a><span class="keywordtype">, ONLY</span> : <a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  <span class="keywordtype">USE </span>um_parvars</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacedecomp__db.xhtml" title="This file belongs in section: MPP. ">decomp_db</a></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacesterr__mod.xhtml" title="This file belongs in section: MPP This file belongs in section: MPP. ">sterr_mod</a><span class="keywordtype">, ONLY</span>: <a class="code" href="namespacesterr__mod.xhtml#acdb2e6a61588cac36f91d12dec1d66a3" title="LL Comdeck: STERR !&gt;LL LL Purpose: PARAMETER names for STASH processing error codes; LL fatal errors ...">st_upper_less_lower</a>, <a class="code" href="namespacesterr__mod.xhtml#a0a12269de14a27b7369a63fee081458c">st_not_supported</a>,       &amp;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                       <a class="code" href="namespacesterr__mod.xhtml#a6c2139e7752118b04a9d28399cbf7e59">st_no_data</a>,<a class="code" href="namespacesterr__mod.xhtml#a3fef235e146bfdeb9e079b772a20e455">st_nd</a>, <a class="code" href="namespacesterr__mod.xhtml#a7e4e4e3504d9be4056f7df8c93cb0607" title="Error codes. ">st_bad_array_param</a>,        &amp;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                       <a class="code" href="namespacesterr__mod.xhtml#a95f0d7bb5571ad3d70d29e92596c29a2">st_bad_address</a>, <a class="code" href="namespacesterr__mod.xhtml#aed2797a79e113bcd5dfa2c506e8b5d13">st_unknown</a>,                  &amp;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                       <a class="code" href="namespacesterr__mod.xhtml#a90d86755b68518ff4eadca98b5e4829f">st_bad_wraparound</a>, <a class="code" href="namespacesterr__mod.xhtml#acbc99a186bfa22836a15011bbfab322e">st_illegal_weight</a>,        &amp;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                       <a class="code" href="namespacesterr__mod.xhtml#ad4bb0c7f8a56303b621903174e500b0b">unknown_weight</a>, <a class="code" href="namespacesterr__mod.xhtml#a6988b8d77a2c2cfb1efc1369d5cab713">unknown_mask</a>,                &amp;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                       <a class="code" href="namespacesterr__mod.xhtml#a87933374e689177ab096fd22890c18ba">unknown_processing</a>, <a class="code" href="namespacesterr__mod.xhtml#af96e562eddc960843ce1b2559bc51921">nonsense</a></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacelookup__addresses.xhtml" title="Parameters for addressing elements in a UM file lookup table. ">lookup_addresses</a></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacesubmodel__mod.xhtml" title="A module to contain information about submodels A module to contain information about submodels...">submodel_mod</a></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacecppxref__mod.xhtml" title="Code Owner: See Unified Model Code Owners HTML page. ">cppxref_mod</a></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespaceumprintmgr.xhtml" title="This file belongs in section: Misc. ">umprintmgr</a><span class="keywordtype">, ONLY</span> :      &amp;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;      <a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>,                &amp;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;      <a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacefile__units__mod.xhtml">file_units_mod</a><span class="keywordtype">, ONLY</span>: <a class="code" href="namespacefile__units__mod.xhtml#a51d73b0fb88a07e9ed07e4f03d5ab275">get_model_ft_unit_filename</a></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  <span class="keywordtype">INTEGER</span>                            &amp;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;     totitems,                       &amp;<span class="comment">!IN   Max no of items in STASHlist</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;     nsects,                         &amp;<span class="comment">!IN   Max no of sections</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;     nitems,                         &amp;<span class="comment">!IN   Max no of items in a section</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;     len_tot,                        &amp;<span class="comment">!IN   Length of real data array D1</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;     len_fixhd,                      &amp;<span class="comment">!IN   Length of fixed constants</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;     len_inthd,                      &amp;<span class="comment">!IN   Length of integer constants</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;     len_realhd,                     &amp;<span class="comment">!IN   Length of real constants</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;     len1_levdepc,                   &amp;<span class="comment">!IN   First dimension of levdepc</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;     len2_levdepc,                   &amp;<span class="comment">!IN   Second dimension of levdepc</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;     num_stash_levels,               &amp;<span class="comment">!IN   Dimension of stash levels</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;     num_level_lists,                &amp;<span class="comment">!IN   Dimension of stash levels</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;     num_stash_pseudo,               &amp;<span class="comment">!IN   Maximum num pseudo-levels in a list</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;     num_pseudo_lists,               &amp;<span class="comment">!IN   Number of pseudo-level lists</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;     max_stash_levs,                 &amp;<span class="comment">!IN   Max no of output levels for any diag</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;     len1_lookup,                    &amp;<span class="comment">!IN   First dimension of lookup/ipplook</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;     len2_lookup,                    &amp;<span class="comment">!IN   Second dimension of lookup</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;     pp_len2_lookup,                 &amp;<span class="comment">!IN   Largest poss. value in pp_len2_look</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;     nunits,                         &amp;<span class="comment">!IN   Max i/o ft unit no</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;     pp_len2_look(20:nunits),        &amp;<span class="comment">!IN   Individual pp_len2_looks per unit</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;     pp_pack_code(20:nunits),        &amp;<span class="comment">!IN   Packing code per unit</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;     ft_lastfield(20:nunits),        &amp;<span class="comment">!IN   Current write posn in each pp file</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;     ft_steps(20:nunits),            &amp;<span class="comment">!IN   File reinitialisation freq per unit</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;     ft_firststep(20:nunits),        &amp;<span class="comment">!IN   First step file initialised</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;     nsttims,                        &amp;<span class="comment">!IN   Number of times against to test</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;     nsttabl,                        &amp;<span class="comment">!IN   Number of STASH timetables</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;     num_words,                      &amp;<span class="comment">!IN   Number of 64 Bit words to hold DATA</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;     sm_ident,                       &amp;<span class="comment">!IN   Submodel identifier</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;     im_ident,                       &amp;<span class="comment">!IN   Internal model identifier</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;     dump_pack,                      &amp;<span class="comment">!IN   Packing Indicator for Dump</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;     sa_idxlen,                      &amp;<span class="comment">!IN   Superarray index length</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;     sa_idx(sa_idxlen),              &amp;<span class="comment">!IN   Superarray index</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;     stsuparrlen,                    &amp;<span class="comment">!IN   Superarray index length</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;     istsuparr(stsuparrlen)           <span class="comment">!IN   Integer superarray</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> ::             &amp;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;     fixhd(len_fixhd),               &amp;<span class="comment">!IN   Array of fixed constants</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;     inthd(len_inthd),               &amp;<span class="comment">!IN   Array of integer constants</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;     ilstart,                        &amp;<span class="comment">!IN   Start of loop over entries</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;     ilend,                          &amp;<span class="comment">!IN   End of loop over entries</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;     is,                             &amp;<span class="comment">!IN   Section numbers</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;     im,                             &amp;<span class="comment">!IN   Item number</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;     step,                           &amp;<span class="comment">!IN   Model step number</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;     steps_per_period,               &amp;<span class="comment">!IN   No of steps in defining period</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;     secs_per_period,                &amp;<span class="comment">!IN   No of secs in period</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                                      <span class="comment">!     (define timestep)</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;     previous_time(7)                 <span class="comment">!IN   Time at start of current step</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;  <span class="keywordtype">INTEGER</span>                               &amp;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;     lookup(len1_lookup,len2_lookup),   &amp;<span class="comment">! Integer lookup headers</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;     rlookup(len1_lookup,len2_lookup),  &amp;<span class="comment">! Real version of lookup</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;     icode                               <span class="comment">!OUT   Return code from routine</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: &amp;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;     lenout,            &amp;<span class="comment">!IN     Length of largest workfield needed</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;     global_lenout,     &amp;<span class="comment">!IN     Output length of largest field</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;     t_field,           &amp;<span class="comment">!IN     No of temp/press points</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;     u_field,           &amp;<span class="comment">!IN     No of u,v points</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;     row_length,        &amp;<span class="comment">!IN     No of points per row</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;     u_rows,            &amp;<span class="comment">!IN     No of u,v rows</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;     t_rows,            &amp;<span class="comment">!IN     No of press/temp rows</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;     t_levels,          &amp;<span class="comment">!IN     No of model press/temp levels</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;     stash_work_len,    &amp;<span class="comment">!IN     Length of stash_work</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;     len_stlist,        &amp;<span class="comment">!IN     No of entries in stashlist</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;     stlist(len_stlist,totitems),                        &amp;<span class="comment">!IN stashlist</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;     si(nitems,0:nsects,<a class="code" href="namespacesubmodel__mod.xhtml#a632aec067eb5d42141b256110bc535e6">n_internal_model</a>),               &amp;<span class="comment">!IN STASH in address</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;     sttabl(nsttims,nsttabl),                            &amp;<span class="comment">!IN  STASH time tables</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;     stash_levels(num_stash_levels+1,num_level_lists),   &amp;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;     stash_pseudo_levels(num_stash_pseudo+1,num_pseudo_lists), &amp;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;     run_indic_op,           &amp;<span class="comment">! IN     Operational Run indicator (ITAB)</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment">! STASH timeseries information</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;     stash_series_len,       &amp;<span class="comment">! IN no of STASH series records</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;     stash_series_rec_len,   &amp;<span class="comment">! IN length of each record</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;     stash_series(stash_series_rec_len,stash_series_len), &amp;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment">! IN individual sample records</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;     stash_ser_index_size,   &amp;<span class="comment">! IN no. of index blocks</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;     stash_series_index(2,stash_ser_index_size)</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment">! IN index block (1=start, 2=no of records)</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;  <span class="keywordtype">INTEGER</span>                    &amp;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;     exppxi,                 &amp;<span class="comment">! Function to extract ppxref info</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;     im_index,               &amp;<span class="comment">! Internal model index number</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;     n1                       <span class="comment">! Packing Indicator for Lookup(21)</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  <span class="keywordtype">REAL</span> fcst_prd  <span class="comment">!IN     Forecast period</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span>  :: river_rows         <span class="comment">! River routeing</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span>  :: river_row_length   <span class="comment">! dimensions</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;  <span class="keywordtype">CHARACTER(LEN=80)</span> cmessage <span class="comment">! OUT MESSAGE FROM ROUTINE</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;  <span class="keywordtype">CHARACTER(LEN=filenamelength)</span> :: ppname</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;  <span class="keywordtype">LOGICAL</span>              &amp;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;     lcyclic,         &amp;<span class="comment">!IN TRUE if cyclic EW BCs</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;     elf,             &amp;<span class="comment">!IN TRUE if the input grid is rotated Equatorial</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;     packing_hold</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;  <span class="keywordtype">REAL</span>                                     &amp;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;     d1(len_tot),                          &amp;<span class="comment">!IN  Real data array</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;     realhd(len_realhd),                   &amp;<span class="comment">!IN  Array of real constants</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;     levdepc(len1_levdepc*len2_levdepc+1), &amp;<span class="comment">!IN  Level dep constants</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;     stash_work(stash_work_len),           &amp;<span class="comment">!IN  Input work array to STASH</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;     stsuparr(stsuparrlen)                  <span class="comment">!IN  Real superarray</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment">! Common blocks and PARAMETERs</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="preprocessor">#include &quot;stparam.h&quot;</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;i_stgfld.h&quot;</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;comvgrid.h&quot;</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="preprocessor"></span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;  <span class="keywordtype">INTEGER</span> extra_var_data <span class="comment">! Size of extra grid data</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment">! External function:</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;  <span class="keywordtype">INTEGER</span> get_fld_type</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160; <span class="comment">! Local variables</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;  <span class="keywordtype">REAL</span>                      &amp;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;     ppfield(lenout),       &amp;<span class="comment">! Main internal work array</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;     level(max_stash_levs), &amp;<span class="comment">! The levels of the data as real nos</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;     sample_prd,            &amp;<span class="comment">! Sampling period in hours for means, etc</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;     a_io                    <span class="comment">! The output code from the unit command.</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment">! I/O buffer workspace arrays - used for holding the data to be</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment">! written to disk.</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;  <span class="keywordtype">REAL</span> :: buf(global_lenout)</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">POINTER</span> :: ipplook(:,:)=&gt;null()</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;  <span class="keywordtype">INTEGER</span>                        &amp;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;     n_rows_out,                 &amp;<span class="comment">! No of rows used for a diagnostic</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;     n_cols_out,                 &amp;<span class="comment">! No of cols used pphoriz=n_rows*n_cols</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;     srow_in,srow_out,           &amp;<span class="comment">! North, South, East and West</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;     nrow_in,nrow_out,           &amp;<span class="comment">! subdomain limits in the horizontal sense</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;     wcol_in,wcol_out,           &amp;<span class="comment">! corresponding to the subarea before being</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;     ecol_in,ecol_out,           &amp;<span class="comment">! processed (IN) and after processing (OUT)</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;     lev_in_addr,                &amp;<span class="comment">! The num of pts skipped in the Input</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;     gr,                         &amp;<span class="comment">! Grid point code</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;     lbproc_comp(14),            &amp;<span class="comment">! Array of 1/0 denoting lbproc components</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;     ppunit,                     &amp;<span class="comment">! PPinit number (also used in pp_file)</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;     lenbuf,                     &amp;<span class="comment">! PPhoriz_out rnd to 512 words (used PP)</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;     comp_accrcy,                &amp;<span class="comment">! Packing accuracy in power of 2</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;     pphoriz_out,                &amp;<span class="comment">! No of points in the output field</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;     pphoriz_in,                 &amp;<span class="comment">! No of points in the input field</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;     iwa,                        &amp;<span class="comment">! Record location</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;     len_buf_words,              &amp;<span class="comment">! Number of 64 Bit words (rounded to 512)</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;     num_levs_out,               &amp;<span class="comment">! Number of output levels</span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;     num_levs_in,                &amp;<span class="comment">! Number of input levels</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;     this_index_lev,             &amp;<span class="comment">! index of level in output array for multi                                  ! level processing in SPATIAL. Note:</span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                                  <span class="comment">! loop over output levels:                                  ! this_index_level=1,num_levs_out</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                                  <span class="comment">! level_list(this_ ) is model level or</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                                  <span class="comment">! pressure level</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                                  <span class="comment">! index_lev(this_ ) is index to level in</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                                  <span class="comment">! input array</span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;     index_lev(max_stash_levs),  &amp;<span class="comment">! Index used to relate input and</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                                  <span class="comment">! output levels</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;     level_list(max_stash_levs), &amp;<span class="comment">! model level for each output level</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;     pseudo_level(max_stash_levs),&amp;<span class="comment">! pseudo-level at each output level</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;     lv,                         &amp;<span class="comment">! LV code for field from STASHmaster</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;     samples,                    &amp;<span class="comment">! no of samples (timeseries/trajec)</span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;     icurrll_dump_ptr,           &amp;<span class="comment">! pointer to mother record lookup</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;     start_time(7),              &amp;<span class="comment">! start time for PPheader in</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                                  <span class="comment">! timeseries/time mean/accumulation</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;     no_records,                 &amp;<span class="comment">! no of records processed by multi_spatial</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;     record_start,               &amp;<span class="comment">! the start record for multi_spatial</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;     jp_1,                       &amp;<span class="comment">! Jpointer to first level of p in D1</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;     jpstar,                     &amp;<span class="comment">! Jpointer to pstar in D1</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;     len_field,                  &amp;<span class="comment">! Holds the amount of data available</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                                  <span class="comment">! to pp_file</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;     packing_type_hold,          &amp;<span class="comment">! Holds the packing type aftr packing by</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                                  <span class="comment">! (STASH_)gather_field</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;     num_out                      <span class="comment">! Number of 32-bit words from coex</span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;  <span class="keywordtype">REAL</span>                    &amp;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;     dummy3d(1,1,1), dummy2d(1,1)</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;  <span class="keywordtype">INTEGER</span> :: end_time(7)</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;  <span class="keywordtype">INTEGER</span>             &amp;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;     jl,ii,il,jj,it,  &amp;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;     ntab,            &amp;<span class="comment">! Number of the STASH times table</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;     ikount,          &amp;<span class="comment">! Local  counter</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;     points,          &amp;<span class="comment">! No of points in a field</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;     kl,              &amp;<span class="comment">! Local  counter</span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;     ml,              &amp;<span class="comment">! Local  counter</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;     len_io,          &amp;<span class="comment">! The length of data transferred.</span></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;     ilprev,          &amp;<span class="comment">! The counter of the first of a pair of stlist</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;     ilcurr,          &amp;<span class="comment">! The current value of il</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;     lbvcl,           &amp;<span class="comment">! Vertical coordinate code in lookup table</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;     icurrll,         &amp;<span class="comment">! Current position in the PP Lookup table</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;     i,               &amp;<span class="comment">! loop variable</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;     j,               &amp;<span class="comment">! Level indicator used in call to grib_file</span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;     packing_type,    &amp;<span class="comment">! 0 No packing, 1 for wgdos, 3 for grib</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;     grib_packing      <span class="comment">! ppxref profile number used to determine</span></div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                       <span class="comment">! grib packing method</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;  <span class="keywordtype">INTEGER</span> vx,vy,vz,   &amp;<span class="comment">! Sizes of arrays.</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;     st_grid,         &amp;<span class="comment">! Horizontal grid type, (eg. T-p or u-v)</span></div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;     len_ppname</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;  <span class="keywordtype">INTEGER</span> input_code   <span class="comment">! Value of input code in stashlist</span></div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;  <span class="keywordtype">INTEGER</span> addr         <span class="comment">! Address of STASH variable in either dump or</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;  <span class="keywordtype">INTEGER</span> addr_out     <span class="comment">! Address of spatially processed field</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;  <span class="keywordtype">INTEGER</span> elap_time    <span class="comment">! No of timesteps elapsed in period.</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;  <span class="keywordtype">INTEGER</span> series_ptr   <span class="comment">! The address in stash_series where domin inf</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;  <span class="keywordtype">INTEGER</span> index_size   <span class="comment">! The number of levels in the index</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;  <span class="keywordtype">INTEGER</span> base_level   <span class="comment">! Base model level needed for mass weighting</span></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;  <span class="keywordtype">INTEGER</span> base_level0  <span class="comment">! Ref base levels in levs loop</span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;  <span class="keywordtype">INTEGER</span> what_proc    <span class="comment">! What kind of processing will be done</span></div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;  <span class="keywordtype">INTEGER</span> what_mean    <span class="comment">! What kind of meaning will be done</span></div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;  <span class="keywordtype">INTEGER</span> output_code  <span class="comment">! Output destination code from stlist</span></div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;  <span class="keywordtype">INTEGER</span> expected_len <span class="comment">! expected length of output field</span></div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;  <span class="keywordtype">LOGICAL</span>             &amp;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;     s_f,             &amp;<span class="comment">! TRUE for items requiring processing</span></div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;     llproc,          &amp;<span class="comment">! TRUE if spatial processing required</span></div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;     lnullproc,       &amp;<span class="comment">! TRUE if null processing indicated</span></div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;     lfullfield,      &amp;<span class="comment">! TRUE if output field on full horiz domain</span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;     lmasswt,         &amp;<span class="comment">! TRUE if level-by-level mass-weights exist</span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;     start_step,      &amp;<span class="comment">! TRUE at start of time period (temporal)</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;     packing,         &amp;<span class="comment">! TRUE if packing required</span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;     grib_out,        &amp;<span class="comment">! TRUE if output to be in grib code.</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;     rotate            <span class="comment">! TRUE if input data to be rotated</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;  <span class="keywordtype">LOGICAL</span> :: found_end</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;  <span class="keywordtype">INTEGER</span> expected_extra <span class="comment">! expected length of extra data</span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;  <span class="keywordtype">INTEGER</span> extraw         <span class="comment">! number of extra words this timestep</span></div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;  <span class="keywordtype">INTEGER</span> extraw_hdr     <span class="comment">! number of extra words for the header</span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;  <span class="keywordtype">INTEGER</span> data_type_code <span class="comment">! ppx_data_type code copied from PPX file</span></div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;  <span class="keywordtype">INTEGER</span> rotatecode     <span class="comment">! code for rotated grid</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;  <span class="keywordtype">INTEGER</span> nt_dim         <span class="comment">! Number of tracers</span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;  <span class="keywordtype">INTEGER</span>              &amp; <span class="comment">! local versions of the subdomain limits</span></div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;     local_nrow_out,local_srow_out,local_ecol_out,local_wcol_out,&amp;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;     local_nrow_in,local_srow_in,local_ecol_in,local_wcol_in,    &amp;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="comment">! global versions of the total size of output</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;     global_n_rows_out,global_n_cols_out, global_pphoriz_out,    &amp;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;     info                <span class="comment">! return variable from gcom</span></div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">PARAMETER</span>  :: pe_zero = 0</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;  <span class="keywordtype">INTEGER</span>                  &amp;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;     grid_type_code,       &amp;<span class="comment">! grid type of field being processed</span></div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;     fld_type,             &amp;<span class="comment">! field type: u-,v- or p- location on C grid</span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;     no_of_levels_masswt,  &amp;<span class="comment">! no. levels for mass weights array</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;     halo_type              <span class="comment">! halo type of the field being processed</span></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;  <span class="keywordtype">INTEGER</span> :: ios_q_slot <span class="comment">! Opaque handle for referencing async operations</span></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;  <span class="keywordtype">INTEGER</span> :: ios_packing_flag</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;  <span class="keywordtype">INTEGER</span> :: ios_fullfield_flag</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;  <span class="keywordtype">INTEGER</span>             ::  istat  <span class="comment">! gcom return flag</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;  <span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;  <span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;  <span class="keywordtype">REAL(KIND=jprb)</span>               :: zhook_handle</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;STWORK&#39;</span>,zhook_in,zhook_handle)</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="comment">! !  0. Initialise: set constants relating to input grid type and size</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="comment">!  0.1  Set up internal grid type st_grid and input field size</span></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="comment">!       according to the master GR code for the diagnostic</span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;  icurrll_dump_ptr=-1</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="comment">! Get internal model index</span></div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;  im_index = <a class="code" href="namespacesubmodel__mod.xhtml#a5a10dac97f579ecbf0c1c1879901e2e0" title="Sequence number of internal model indexed by internal model identifier required to map from id to STA...">internal_model_index</a>(im_ident)</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;  nt_dim = (sa_idx(2) - sa_idx(1))/2</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;<span class="comment">! [care needed! stsuparr passed as real but integer value here.]</span></div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;  jp_1   = stsuparr(sa_idx(7))</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;  jpstar = stsuparr(sa_idx(8))</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="comment">! Get STASHmaster gridtype code</span></div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="comment">! DEPENDS ON: exppxi</span></div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;  gr = exppxi( im_ident, is, im, <a class="code" href="namespacecppxref__mod.xhtml#a92932120a5316135ed39321fd93d34eb">ppx_grid_type</a>,                     &amp;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;  icode, cmessage)</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;  grid_type_code=gr</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="comment">! Get field type, ie u or v or p location in Arakawa C grid staggering</span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="comment">! DEPENDS ON: get_fld_type</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;  fld_type=get_fld_type(grid_type_code) <span class="comment">! Function</span></div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;<span class="comment">! Find out what halo_type (and hence halo width) this field has</span></div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;<span class="comment">! DEPENDS ON: exppxi</span></div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;  halo_type=exppxi( im_ident, is, im, <a class="code" href="namespacecppxref__mod.xhtml#a87f5601b500940f0dac2b738bc36a718">ppx_halo_type</a>,                &amp;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;  icode, cmessage)</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;<span class="comment">! Determine the input length pphoriz_in and stash grid staggering for</span></div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="comment">! this field.</span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;  <span class="keywordflow">IF</span> (gr == <a class="code" href="namespacecppxref__mod.xhtml#af57185f8bd6471c59e021839b65568ee">ppx_atm_tall</a>.OR.gr == <a class="code" href="namespacecppxref__mod.xhtml#a550907169830a5a923b006a0510287b5">ppx_atm_tland</a>.OR.                 &amp;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;     gr == <a class="code" href="namespacecppxref__mod.xhtml#a682cd2e597647eb2e12d4680e0c4b0bc">ppx_atm_tsea</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="comment">! Atmosphere data on T-grid</span></div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    st_grid=st_tp_grid</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    pphoriz_in=t_field</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;  <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (gr == <a class="code" href="namespacecppxref__mod.xhtml#a7d84f0b6530fdd94bf563203ffff3dac">ppx_atm_uall</a>.OR.gr == <a class="code" href="namespacecppxref__mod.xhtml#abcb587a45490a7e57ccd70b5216ff351">ppx_atm_uland</a>.OR.            &amp;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;     gr == <a class="code" href="namespacecppxref__mod.xhtml#a882e20e98c243542c32f02deeb2ae467">ppx_atm_usea</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="comment">! Atmosphere data on U-grid</span></div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    st_grid=st_uv_grid</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    pphoriz_in=u_field</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;  <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (gr == <a class="code" href="namespacecppxref__mod.xhtml#ac9d6e3c5870b390dc64ded5f768c3295">ppx_atm_compressed</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<span class="comment">! Atmosphere data on T-grid (compressed)</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    st_grid=st_tp_grid</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    pphoriz_in=t_field</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;  <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (gr == <a class="code" href="namespacecppxref__mod.xhtml#ac431b87d080e44fd0bffdd4a9119d921">ppx_atm_cuall</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="comment">! Atmosphere data on C-grid (u-points)</span></div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    st_grid=st_cu_grid</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    pphoriz_in=t_field</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;  <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (gr == <a class="code" href="namespacecppxref__mod.xhtml#a6fc3b22758e9414eceae30e1acc84e3d">ppx_atm_cvall</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="comment">! Atmosphere data on C-grid (v-points)</span></div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    st_grid=st_cv_grid</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    pphoriz_in=u_field</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;  <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (gr == <a class="code" href="namespacecppxref__mod.xhtml#ac755995feaadbb456e2ed909dfe0ff9e">ppx_atm_tzonal</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="comment">! Atmosphere zonal data on T-grid</span></div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    st_grid=st_zt_grid</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    pphoriz_in=t_rows</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;  <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (gr == <a class="code" href="namespacecppxref__mod.xhtml#a97e592b25617f2000f3fac992f514319">ppx_atm_uzonal</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="comment">! Atmosphere zonal data on u-grid</span></div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    st_grid=st_zu_grid</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    pphoriz_in=u_rows</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;  <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (gr == <a class="code" href="namespacecppxref__mod.xhtml#a8a3bf5d9fd9cf4dee9f2a7ad25737d20">ppx_atm_tmerid</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="comment">! Atmosphere meridional data on T-grid</span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    st_grid=st_mt_grid</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    pphoriz_in=row_length</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;  <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (gr == <a class="code" href="namespacecppxref__mod.xhtml#a3f6e16582e4238e3288ab8d0eac34d71">ppx_atm_umerid</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;<span class="comment">! Atmosphere meridional data on u-grid</span></div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    st_grid=st_mu_grid</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    pphoriz_in=row_length</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;  <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (gr == <a class="code" href="namespacecppxref__mod.xhtml#aea0ae44d451092c2d8eea6e5fef3b216">ppx_atm_scalar</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;<span class="comment">! Atmosphere scalar</span></div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    st_grid=st_scalar</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    pphoriz_in=1</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;  <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (gr == <a class="code" href="namespacecppxref__mod.xhtml#a653b5f6fba6d6f979a01c842d105dc5f">ppx_atm_river</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="comment">! Atmosphere river routing</span></div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    st_grid=st_riv_grid</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    pphoriz_in=river_rows * river_row_length</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;  <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="comment">! Unknown grid type</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    icode=1</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    cmessage=<span class="stringliteral">&#39;STWORK   : Unknown grid type found in STASHmaster&#39;</span></div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="comment">! The input length pphoriz_in has been calculated explicitly depending</span></div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;<span class="comment">! on grid_type where there is an implicit assumption that diagnostic</span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;<span class="comment">! fields have no halos.</span></div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;<span class="comment">! For input fields in section 0, ie primary fields held in D1, this is</span></div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;<span class="comment">! not necessarily the case and input lengths are extracted using an</span></div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;<span class="comment">! addressing service routine dependent on grid and halo codes:</span></div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;  <span class="keywordflow">IF</span>(is == 0 .OR. is == 33 .OR. is == 34) <span class="keywordflow">THEN</span> <span class="comment">! section 0,33 or 34</span></div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;<span class="comment">! DEPENDS ON: addrln</span></div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    <span class="keyword">CALL </span><a class="code" href="addrln_8f90.xhtml#a832ec1bd65e640388bbdf570c060d7cc" title="Determine STASH input length per vertical level for prog var. ">addrln</a>(grid_type_code,halo_type,pphoriz_in,local_data)</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="comment">!  0.2 Set up ROTATE to flag fields which are rotated (eg. ELF winds)</span></div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;<span class="comment">!      (this is used to set alternative fieldcodes in pphead)</span></div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;<span class="comment">! DEPENDS ON: exppxi</span></div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;  rotatecode = exppxi( im_ident, is, im, <a class="code" href="namespacecppxref__mod.xhtml#a949be6eca8a0e83a78c10cc78d1ed4ec">ppx_rotate_code</a>,           &amp;</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;  icode, cmessage)</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;  <span class="keywordflow">IF</span> (rotatecode  ==  <a class="code" href="namespacecppxref__mod.xhtml#a3c682bc3c342c1c2c30e91ad3c63008f">ppx_elf_rotated</a> .AND. elf)                    &amp;</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;     <span class="keywordflow">THEN</span></div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    rotate=.true.</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;  <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    rotate=.false.</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;<span class="comment">!  1. Loop over entries with this section/item number</span></div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;  <span class="keywordflow">DO</span> il=ilstart,ilend  <span class="comment">!loop over num entries for each item/sec</span></div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    extraw=0 <span class="comment">! no extra data by default</span></div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;<span class="comment">!  1.1 Set up S_F which has to be set for each stashlist entry. The</span></div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;<span class="comment">!      stashflag is be set for a particular item/section the s_f for</span></div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="comment">!      the stashlist entry.</span></div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    s_f=.false.</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    <span class="keywordflow">IF</span> (stlist(st_freq_code,il) == 1.AND.                            &amp;</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;       step &gt;= stlist(st_start_time_code,il).AND.                    &amp;</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;       (step &lt;= stlist(st_end_time_code,il).OR.                      &amp;</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;       stlist(st_end_time_code,il) == st_infinite_time)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;<span class="comment">!     ... if required every step between start and end</span></div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;      s_f=.true.</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (stlist(st_freq_code,il) &lt;  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;<span class="comment">!     ... if required at specified times and this is one of them</span></div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;      ntab=-stlist(st_freq_code,il)</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;      found_end=.false.</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;      it=1</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;      <span class="keywordflow">DO</span> <span class="keywordflow">WHILE</span> (it &lt;= nsttims .AND. .NOT. found_end)</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;        <span class="keywordflow">IF</span> (sttabl(it,ntab) == st_end_of_list) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;          found_end=.true.</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;        <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (step == sttabl(it,ntab)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;          s_f=.true.</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;        it=it+1</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (stlist(st_freq_code,il) &gt;  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;      <span class="keywordflow">IF</span>   (mod((step-stlist(st_start_time_code,il)),                &amp;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;         stlist(st_freq_code,il)) == 0.AND.                          &amp;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;         step &gt;= stlist(st_start_time_code,il).AND.                  &amp;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;         (step &lt;= stlist(st_end_time_code,il).OR.                    &amp;</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;         stlist(st_end_time_code,il) == st_infinite_time))           &amp;</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;<span class="comment">!        ... if required every N timesteps and this is one of them</span></div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;         s_f=.true.</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;<span class="comment">!  S_F now set - Start of IF (s_f) block .......</span></div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    <span class="keywordflow">IF</span> (s_f) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;<span class="comment">!  1.2 Find number of input and output levels and relative positions</span></div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;<span class="comment">!      and set up levels and pseudo-levels arrays for PPheaders.</span></div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;<span class="comment">!      Set indicator lmasswt if level-by-level mass weighting possible</span></div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;<span class="comment">!      - only currently available with atmosphere model full levels.</span></div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;<span class="comment">! Special case of mean timeseries leave ilcurr pointing to il</span></div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;      ilcurr=il   <span class="comment">! The current stashlist entry il</span></div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;      <span class="keywordflow">IF</span> (stlist(st_input_code,il) &lt;  0.AND.                          &amp;</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;         stlist(st_proc_no_code,il) /= st_time_series_mean) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;        ilcurr=-stlist(st_input_code,il) <span class="comment">! points to prev entry</span></div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;<span class="comment">! Get STASHmaster lbvc code</span></div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;<span class="comment">! DEPENDS ON: exppxi</span></div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;      lbvcl = exppxi( im_ident, is, im, <a class="code" href="namespacecppxref__mod.xhtml#ab11aab20628b2944d07229f5023bc0bf">ppx_lbvc_code</a>,                &amp;</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;      icode, cmessage)</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;<span class="comment">! Get STASHmaster lv code</span></div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;<span class="comment">! DEPENDS ON: exppxi</span></div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;      lv = exppxi( im_ident, is, im, <a class="code" href="namespacecppxref__mod.xhtml#a8f63763b7b4e35c5123912c8593305c1">ppx_lv_code</a>,                     &amp;</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;      icode, cmessage)</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;<span class="comment">! DEPENDS ON: stlevels</span></div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;      <span class="keyword">CALL </span><a class="code" href="stlevels_8f90.xhtml#af4a68c50c08f9f8fbae7f4da6cf6663c" title="Subroutine STLEVELS -!&gt; ">stlevels</a>(stlist(1,ilcurr),len_stlist,                     &amp;</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;         stash_levels,num_stash_levels,num_level_lists,              &amp;</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;         stash_pseudo_levels,num_stash_pseudo,num_pseudo_lists,      &amp;</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;         max_stash_levs,num_levs_in,num_levs_out,index_size,         &amp;</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;         index_lev,level_list,lbvcl,level,pseudo_level,              &amp;</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;         icode,cmessage)</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;      <span class="keywordflow">IF</span> (icode &gt;  0) <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;      vz=num_levs_in</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;<span class="comment">! Set switch to indicate whether level by level mass weights are</span></div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;<span class="comment">! available ( whether or not mass weighting requested)</span></div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;      no_of_levels_masswt=1 <span class="comment">! default no. of levels for pre! calculating mass weights array</span></div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;      <span class="keywordflow">IF</span> (lv == ppx_full_level) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;        lmasswt=.true.</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;<span class="comment">! Level by level mass weights available and mass weighting required:</span></div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;<span class="comment">! Extra space only needed if mass weighting requested.</span></div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;        <span class="keywordflow">IF</span>(stlist(st_weight_code,il) == stash_weight_mass_code) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;          no_of_levels_masswt = index_size  <span class="comment">! req. no. model levels</span></div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;      <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;        lmasswt=.false.</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;<span class="comment">!  1.3 Find the horizontal dimensions for the output grid</span></div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;<span class="comment">!      and the input field subdomain limits in which processing happens.</span></div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;      wcol_in= stlist(st_west_code,ilcurr)    <span class="comment">! Input subdomain limits</span></div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;      ecol_in= stlist(st_east_code,ilcurr)</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;      nrow_in= stlist(st_north_code,ilcurr)</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;      srow_in= stlist(st_south_code,ilcurr)</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;<span class="comment">!  1.3.2 Other output types need to calculate lengths in detail</span></div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;<span class="comment">!        (ie. number of rows, columns, and horizontal field size)</span></div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;<span class="comment">!        according to processing options</span></div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;<span class="comment">! Calculate local versions of the subdomain limits and area</span></div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;<span class="comment">! DEPENDS ON: global_to_local_subdomain</span></div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;      <span class="keyword">CALL </span><a class="code" href="global__to__local__subdomain_8f90.xhtml#a33af13299bbbaf8b6b1a522619bed1ee" title="Parallel UM : Transform from global to local co-ordinates: Parallel UM : Transform from global to loc...">global_to_local_subdomain</a>(                                &amp;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;         .true.,.true.,                                              &amp;</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;         grid_type_code,halo_type,<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>,                              &amp;</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;         srow_in,ecol_in,nrow_in,wcol_in,                            &amp;</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;         local_srow_in,local_ecol_in,                                &amp;</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;         local_nrow_in,local_wcol_in)</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;      what_proc=stlist(st_proc_no_code,ilcurr)</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;      what_mean=(stlist(st_gridpoint_code,ilcurr)/block_size)*       &amp;</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;         block_size</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;      samples=0         <span class="comment">! Initialise value for non-timeseries</span></div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;<span class="comment">!  1.3.2.1 Time series or trajectory processing</span></div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;      <span class="keywordflow">IF</span> (what_proc == st_time_series_code.OR.                       &amp;</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;         what_proc == st_append_traj_code.OR.                        &amp;</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;         what_proc == st_time_series_mean) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;<span class="comment">!  1.3.2.2 Compute number of samples in period for timeseries for</span></div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;<span class="comment">!          input to PP_HEAD.</span></div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;<span class="comment">!          No of output rows and cols are set to the no of points</span></div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;<span class="comment">!          in each time sample and number of time samples in the</span></div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;<span class="comment">!          period spanned by the output field, respectively.</span></div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;        samples=stlist(st_period_code,ilcurr)/                       &amp;</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;           stlist(st_freq_code,ilcurr)</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;        wcol_out=1</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;        ecol_out=samples</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;        nrow_out=stlist(st_output_length,ilcurr)/samples</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;        srow_out=1</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;        local_wcol_out=1</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;        local_ecol_out=samples</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;        local_nrow_out=stlist(st_output_length,ilcurr)/samples</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;        local_srow_out=1</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;<span class="comment">!  1.3.2.3 Multi spatial processing of some other type (not supported)</span></div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;      <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (stlist(st_series_ptr,ilcurr) /= 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;        icode=1323</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;        cmessage=<span class="stringliteral">&#39;STWORK   : Illegal timeseries processing selected&#39;</span></div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;        <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;<span class="comment">!  1.3.2.4 Primary record requesting an extract</span></div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;      <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (what_mean == extract_base) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;        wcol_out= wcol_in</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;        ecol_out= ecol_in</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;        nrow_out= nrow_in</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;        srow_out= srow_in</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;        local_wcol_out= local_wcol_in</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;        local_ecol_out= local_ecol_in</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;        local_nrow_out= local_nrow_in</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;        local_srow_out= local_srow_in</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;<span class="comment">!  1.3.2.5 Primary record requesting a vertical mean</span></div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;      <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (what_mean == vert_mean_base) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;        wcol_out= wcol_in</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;        ecol_out= ecol_in</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;        nrow_out= nrow_in</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;        srow_out= srow_in</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;        local_wcol_out= local_wcol_in</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;        local_ecol_out= local_ecol_in</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;        local_nrow_out= local_nrow_in</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;        local_srow_out= local_srow_in</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;<span class="comment">!  1.3.2.6 Primary record requesting a zonal mean</span></div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;      <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (what_mean == zonal_mean_base) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;        wcol_out= 1</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;        ecol_out= 1</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;        nrow_out= nrow_in</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;        srow_out= srow_in</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;        local_wcol_out= 1</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;        local_ecol_out= 1</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;        local_nrow_out= local_nrow_in</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;        local_srow_out= local_srow_in</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;<span class="comment">!  1.3.2.7 Primary record requesting a meridional mean</span></div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;      <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (what_mean == merid_mean_base) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;        wcol_out= wcol_in</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;        ecol_out= ecol_in</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;        nrow_out= 1</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;        srow_out= 1</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;        local_wcol_out= local_wcol_in</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;        local_ecol_out= local_ecol_in</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;        local_nrow_out= 1</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;        local_srow_out= 1</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;<span class="comment">!  1.3.2.8 Primary record requesting a global mean</span></div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;      <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (what_mean == global_mean_base) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;        wcol_out= 1</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;        ecol_out= 1</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;        nrow_out= 1</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;        srow_out= 1</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;        local_wcol_out= 1</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;        local_ecol_out= 1</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;        local_nrow_out= 1</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;        local_srow_out= 1</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;<span class="comment">!  1.3.2.9 Primary record requesting a field mean</span></div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;      <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (what_mean == field_mean_base) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;        wcol_out= 1</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;        ecol_out= 1</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;        nrow_out= 1</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;        srow_out= 1</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;        local_wcol_out= 1</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;        local_ecol_out= 1</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;        local_nrow_out= 1</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;        local_srow_out= 1</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;<span class="comment">!  1.3.2.10 Error trap for unknown request</span></div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;      <span class="keywordflow">ELSE</span>         <span class="comment">! Invalid option</span></div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;        icode=<a class="code" href="namespacesterr__mod.xhtml#aed2797a79e113bcd5dfa2c506e8b5d13">st_unknown</a></div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;        <span class="keyword">WRITE</span>(cmessage,<span class="stringliteral">&#39;(A,A,1x,i5)&#39;</span>)            &amp;</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;           <span class="stringliteral">&#39;STWORK: FATAL ERROR: &#39;</span>,             &amp;</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;           <span class="stringliteral">&#39;unknown option in setup&#39;</span>,what_mean</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;        <span class="keywordflow">GO TO</span> 9999 <span class="comment">! jump to error return</span></div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;<span class="comment">!  1.3.3 Compute expected length. This differs from total output length</span></div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;<span class="comment">!        when data is appended from multiple timesteps into the same</span></div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;<span class="comment">!        field, being output_length/number_of_appends in this case.</span></div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;      <span class="keywordflow">IF</span> (stlist(st_output_code,il) &gt;= 0.AND.                         &amp;</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;         (what_proc == st_time_series_code.OR.                        &amp;</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;         what_proc == st_append_traj_code.OR.                         &amp;</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;         what_proc == st_time_series_mean)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;        series_ptr=stlist(st_series_ptr,il) <span class="comment">!set up ptr to stashseries</span></div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;        expected_extra=(stash_series_index(2,series_ptr)+1)*6</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;        extraw_hdr=expected_extra</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;        expected_len=((stlist(st_output_length,ilcurr)                &amp;</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;           -expected_extra)*                                          &amp;</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;           stlist(st_freq_code,ilcurr))/stlist(st_period_code,ilcurr)</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;      <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;        expected_len=stlist(st_output_length,ilcurr)</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;        expected_extra=0 <span class="comment">! no extra data for non timeseries stuff</span></div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;        extraw_hdr=0</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;<span class="comment">!  1.3.6 Compute number of rows and columns and field size for output</span></div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;<span class="comment">!        - first adjust easternmost column if field wraps EW</span></div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;      <span class="keywordflow">IF</span> (wcol_in  &gt;  ecol_in .AND.lcyclic)                           &amp;</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;         ecol_in =ecol_in + glsize(1,fld_type)</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;      <span class="keywordflow">IF</span> (wcol_out &gt;  ecol_out.AND.lcyclic)                           &amp;</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;         ecol_out=ecol_out + glsize(1,fld_type)</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;      <span class="keywordflow">IF</span> (local_wcol_out  &gt;   local_ecol_out)                         &amp;</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;         local_ecol_out=local_ecol_out+blsize(1,fld_type)</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;      n_rows_out = local_nrow_out - local_srow_out + 1</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;      n_cols_out = local_ecol_out - local_wcol_out + 1</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;      global_n_rows_out =  nrow_out - srow_out + 1</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;      global_n_cols_out = ecol_out - wcol_out + 1</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;      pphoriz_out= n_rows_out*n_cols_out</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;      global_pphoriz_out=global_n_rows_out*global_n_cols_out</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;<span class="comment">!  1.4 Check to see if any processing is required.</span></div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;<span class="comment">!      Set flag LLPROC if some spatial processing indicated.</span></div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;<span class="comment">!      NB: If input and output bottom levels differ (or the input and</span></div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;<span class="comment">!          output pseudo-levels lists differ), level-by-level</span></div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;<span class="comment">!          processing in the spatial loop IS required.</span></div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;<span class="comment">!          Multi-spatial processing is always required for timeseries.</span></div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;      lfullfield=((st_grid == st_tp_grid .OR. st_grid == st_cu_grid  &amp;</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;         .OR. st_grid == st_riv_grid)                                &amp;</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;         .AND.  stlist(st_west_code,il) == 1.AND.                    &amp;</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;         stlist(st_east_code,il) == glsize(1,fld_type).AND.          &amp;</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;         stlist(st_south_code,il) == 1.AND.                          &amp;</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;         stlist(st_north_code,il) == glsize(2,fld_type)).OR.         &amp;</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;         ((st_grid == st_uv_grid .OR. st_grid == st_cv_grid)         &amp;</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;         .AND.  stlist(st_west_code,il) == 1.AND.                    &amp;</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;         stlist(st_east_code,il) == glsize(1,fld_type).AND.          &amp;</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;         stlist(st_north_code,il) == glsize(2,fld_type).AND.         &amp;</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;         stlist(st_south_code,il) == 1) .OR.                         &amp;</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;         ((st_grid == st_zt_grid)                                    &amp;</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;         .AND.  stlist(st_north_code,il) == glsize(2,fld_type).AND.  &amp;</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;         stlist(st_south_code,il) == 1) .OR.                         &amp;</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;         ((st_grid == st_zu_grid)                                    &amp;</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;         .AND.  stlist(st_north_code,il) == glsize(2,fld_type).AND.  &amp;</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;         stlist(st_south_code,il) == 1) .OR.                         &amp;</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;         ((st_grid == st_mt_grid .OR. st_grid == st_mu_grid)         &amp;</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;         .AND.  stlist(st_west_code,il) == 1.AND.                    &amp;</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;         stlist(st_east_code,il) == glsize(1,fld_type)) .OR.         &amp;</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;         (st_grid == st_scalar)</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;      lnullproc= lfullfield .AND.                                    &amp;</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;         (stlist(st_input_bottom,il) ==                              &amp;</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;         stlist(st_output_bottom,il)) .AND.                          &amp;</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;         (stlist(st_pseudo_in,il) ==                                 &amp;</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;         stlist(st_pseudo_out,il)) .AND.                             &amp;</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;         (stlist(st_gridpoint_code,il) ==                            &amp;</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;         (extract_base+stash_null_mask_code) .AND.                   &amp;</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;         stlist(st_weight_code,il) ==                                &amp;</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;         stash_weight_null_code )</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;      <span class="keywordflow">IF</span> (stlist(st_series_ptr,il) &gt;  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;        lnullproc=.false.     <span class="comment">! Timeseries always requires processing</span></div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;<span class="comment">!  LLPROC must be false for output from a prev stlist</span></div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;<span class="comment">!  or simple extraction of full field with no weighting</span></div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;      <span class="keywordflow">IF</span> ((stlist(st_input_code,il) &lt; 0 .AND.                        &amp;</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;         stlist(st_proc_no_code,il) /= st_time_series_mean) .OR.     &amp;</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;         lnullproc) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;        llproc=.false.</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;      <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;        llproc=.true.</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;    <span class="comment">!  1.5 Check that no spatial processing is requested if the input field</span></div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;<span class="comment">!      is of integer or logical type -- these types of fields can be</span></div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;<span class="comment">!      passed directly through STASH, for example for coupling purposes,</span></div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;<span class="comment">!      but no arithmetic is allowed at present.</span></div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;<span class="comment">! DEPENDS ON: exppxi</span></div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;      data_type_code=exppxi(im_ident,is,im,<a class="code" href="namespacecppxref__mod.xhtml#a9da073735e019b687e4281b14e171199">ppx_data_type</a>,            &amp;</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;      icode,cmessage)</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;      <span class="keywordflow">IF</span> ((       data_type_code  == <a class="code" href="namespacecppxref__mod.xhtml#ac7a51e48487fc3f069d300616a516903">ppx_type_int</a>    .OR.            &amp;</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;         data_type_code  == <a class="code" href="namespacecppxref__mod.xhtml#a38e46a579ddd1f4c199d507e0ca92476">ppx_type_log</a>)   .AND.                    &amp;</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;         .NOT. lnullproc)  <span class="keywordflow">THEN</span></div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;        icode=<a class="code" href="namespacesterr__mod.xhtml#a0a12269de14a27b7369a63fee081458c">st_not_supported</a></div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;        cmessage=<span class="stringliteral">&#39;STWORK  : Spatial processing of INT/LOGICAL illegal&#39;</span></div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;        <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160; <span class="comment">!  2. Perform spatial processing (loop over output levels)</span></div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;<span class="comment">! If this is a variable horizontal grid set flags</span></div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;<span class="comment">! to ensure that bdx and bdy are set properly</span></div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;<span class="comment">! in the pp header. Also work out the size of</span></div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;<span class="comment">! extra data which will be generated. This must be done</span></div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;<span class="comment">! here because the size is needed for the lookup headers</span></div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;<span class="comment">! which are created long before the actual ouput data</span></div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;<span class="comment">! is set up.</span></div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;      var_grid_type = 0</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;      extra_var_data = 0</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;      <span class="keywordflow">IF</span> (x_var_grid .OR. y_var_grid) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;<span class="comment">! Each dimesion has 3 lots of extra grid data ! grid coordinates, lower and upper box boundaries.</span></div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;<span class="comment">! May need to incorporate test to exclude certain</span></div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;<span class="comment">! grid types (eg LBCs) if they&#39;re not appropriate.</span></div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;        <span class="keywordflow">IF</span> (fld_type == fld_type_p) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;          var_grid_type = 1 <span class="comment">! It&#39;s a T field</span></div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;          <span class="keywordflow">IF</span> (x_var_grid) extra_var_data =                            &amp;</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;             extra_var_data + (3*(global_n_cols_out+1))</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;          <span class="keywordflow">IF</span> (y_var_grid) extra_var_data =                            &amp;</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;             extra_var_data + (3*(global_n_rows_out+1))</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;        <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (fld_type == fld_type_u.OR.                           &amp;</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;           fld_type == fld_type_v) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;          var_grid_type = 2 <span class="comment">! It&#39;s a U,V field</span></div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;          <span class="keywordflow">IF</span> (x_var_grid) extra_var_data =                            &amp;</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;             extra_var_data + (3*(global_n_cols_out+1))</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;          <span class="keywordflow">IF</span> (y_var_grid) extra_var_data =                            &amp;</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;             extra_var_data + (3*(global_n_rows_out+1))</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;        extraw_hdr = extraw_hdr + extra_var_data</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;      <span class="keywordflow">IF</span> (llproc) <span class="keywordflow">THEN</span>   <span class="comment">! Processing is required</span></div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;        input_code=stlist(st_input_code,il)</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;<span class="comment">!  Make sure no volume processing asked for as not supported</span></div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;<span class="comment">!  this will need adding at some point</span></div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;        <span class="keywordflow">IF</span> (stlist(st_weight_code,il) == stash_weight_volume_code)    &amp;</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;           <span class="keywordflow">THEN</span></div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;          icode=<a class="code" href="namespacesterr__mod.xhtml#a0a12269de14a27b7369a63fee081458c">st_not_supported</a></div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;          cmessage=<span class="stringliteral">&#39;STWORK  : volume processing not supported&#39;</span></div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;          <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;<span class="comment">!  Work out vx,vy (depends on kind of grid)</span></div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;        vx=lasize(1,fld_type,halo_type)</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;        vy=lasize(2,fld_type,halo_type)</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;        <span class="keywordflow">IF</span> ((st_grid == st_zt_grid) .OR.                              &amp;</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;           (st_grid == st_zu_grid)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;          vx=1</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;        <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> ((st_grid == st_mt_grid) .OR.                         &amp;</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;           (st_grid == st_mu_grid)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;          vy=1</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;        <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (st_grid == st_scalar) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;          vx=1</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;          vy=1</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;<span class="comment">!  Work out if this is the first timestep in a timeseries.</span></div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;<span class="comment">!  This is required so that the extra data can be generated</span></div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;        series_ptr=stlist(st_series_ptr,il)</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;        <span class="keywordflow">IF</span> (series_ptr &gt;  0) <span class="keywordflow">THEN</span> <span class="comment">! multi spatial processing reqd.</span></div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;<span class="comment">!  Recompute expected sizes</span></div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;          elap_time=step-stlist(st_start_time_code,il)</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;          elap_time=mod(elap_time,stlist(st_period_code,il))</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;          start_step=(elap_time == 0)</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;          <span class="keywordflow">IF</span> (start_step) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;            expected_len=stlist(st_output_length,ilcurr)</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;          <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;            expected_extra=0  <span class="comment">! reset to zero as no extra data</span></div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;            expected_len=((stlist(st_output_length,ilcurr)           &amp;</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;               -((stash_series_index(2,series_ptr)+1)*6))*           &amp;</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;               stlist(st_freq_code,ilcurr))/stlist(st_period_code,   &amp;</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;               ilcurr)</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;         <span class="comment">!  2.1 Timeseries extraction section follows</span></div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;          no_records=stash_series_index(2,series_ptr)</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;          record_start=stash_series_index(1,series_ptr)</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;         <span class="comment">!  2.1.1 Process a primary field from D1 (timeseries)</span></div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;          <span class="keywordflow">IF</span> (input_code == 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;            addr=si(im,is,im_index)</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;<span class="comment">! DEPENDS ON: multi_spatial</span></div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;            <span class="keyword">CALL </span><a class="code" href="multi__spatial_8f90.xhtml#ade4d2e0edcbb3c9113bf99c7f1f8341d" title="Routine: MULTI_SPATIAL -!&gt; ">multi_spatial</a>(d1(addr),                             &amp;</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;               vx,vy,vz,grid_type_code,st_grid,fld_type,halo_type,   &amp;</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;               halosize(1,halo_type),halosize(2,halo_type),          &amp;</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;               lcyclic,lmasswt,                                      &amp;</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;               pphoriz_out,num_levs_out,                             &amp;</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;               no_of_levels_masswt,                                  &amp;</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;<span class="comment">! Extra arguments for atmos sub-model</span></div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;               d1(jp_1),d1(jpstar),                                  &amp;</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;<span class="comment">! pressure,pstar</span></div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;               stsuparr(sa_idx(9)),                                  &amp;</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;<span class="comment">! cos_v_latitude</span></div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;               stsuparr(sa_idx(10)),                                 &amp;</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;<span class="comment">! cos_theta_latitude</span></div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;               stsuparr(sa_idx(11)),                                 &amp;</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;<span class="comment">! land mask</span></div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;               stsuparr(sa_idx(12)),                                 &amp;</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;<span class="comment">! sea mask</span></div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;               row_length,t_rows,u_rows,t_levels,                    &amp;</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;               ppfield,lenout,                                       &amp;</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;               <a class="code" href="namespacemissing__data__mod.xhtml#a3f0f5f89671006d2b52aac53d30dc926">rmdi</a>,stlist(1,il),len_stlist,                         &amp;</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;               stash_series(1,record_start),                         &amp;</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;               stash_series_rec_len,no_records,                      &amp;</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;               index_size,index_lev,level_list,                      &amp;</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;               start_step,extraw,n_rows_out,n_cols_out,              &amp;</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;               realhd,len_realhd,inthd,len_inthd,                    &amp;</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;               icode,cmessage)</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;              <span class="comment">!  2.1.2 Process a field from STASHwork (timeseries)</span></div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;                    <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (input_code == 1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;            addr=si(im,is,im_index)</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;<span class="comment">! DEPENDS ON: multi_spatial</span></div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;            <span class="keyword">CALL </span><a class="code" href="multi__spatial_8f90.xhtml#ade4d2e0edcbb3c9113bf99c7f1f8341d" title="Routine: MULTI_SPATIAL -!&gt; ">multi_spatial</a>(stash_work(addr),                     &amp;</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;               vx,vy,vz,grid_type_code,st_grid,fld_type,halo_type,   &amp;</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;               halosize(1,halo_type),halosize(2,halo_type),          &amp;</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;               lcyclic,lmasswt,                                      &amp;</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;               pphoriz_out,num_levs_out,                             &amp;</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;               no_of_levels_masswt,                                  &amp;</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;<span class="comment">!     Extra arguments for atmos sub-model</span></div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;               d1(jp_1),d1(jpstar),                                  &amp;</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;<span class="comment">! pressure,pstar</span></div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;               stsuparr(sa_idx(9)),                                  &amp;</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;<span class="comment">! cos_v_latitude</span></div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;               stsuparr(sa_idx(10)),                                 &amp;</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;<span class="comment">! cos_theta_latitude</span></div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;               stsuparr(sa_idx(11)),                                 &amp;</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;<span class="comment">! land mask</span></div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;               stsuparr(sa_idx(12)),                                 &amp;</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;<span class="comment">! sea mask</span></div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;               row_length,t_rows,u_rows,t_levels,                    &amp;</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;               ppfield,lenout,                                       &amp;</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;               <a class="code" href="namespacemissing__data__mod.xhtml#a3f0f5f89671006d2b52aac53d30dc926">rmdi</a>,stlist(1,il),len_stlist,                         &amp;</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;               stash_series(1,record_start),                         &amp;</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;               stash_series_rec_len,no_records,                      &amp;</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;               index_size,index_lev,level_list,                      &amp;</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;               start_step,extraw,n_rows_out,n_cols_out,              &amp;</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;               realhd,len_realhd,inthd,len_inthd,                    &amp;</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;               icode,cmessage)</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;          <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (input_code &lt;  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;           <span class="comment">!  2.1.3 Process a field from previously STASHed position in D1</span></div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;<span class="comment">!      (currently unsupported since diagnostic-of-diagnostic)</span></div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;                    <span class="keywordflow">IF</span> (what_proc == st_time_series_mean) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;<span class="comment">! special case of mean timeseries</span></div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;<span class="comment">!   Mother record</span></div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;              ilprev=-stlist(st_input_code,il)</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;<span class="comment">! address of mother record in D1</span></div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;              addr=stlist(20,ilprev)</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;<span class="comment">! DEPENDS ON: multi_spatial</span></div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;              <span class="keyword">CALL </span><a class="code" href="multi__spatial_8f90.xhtml#ade4d2e0edcbb3c9113bf99c7f1f8341d" title="Routine: MULTI_SPATIAL -!&gt; ">multi_spatial</a>(d1(addr),                             &amp;</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;                 vx,vy,vz,grid_type_code,st_grid,fld_type,halo_type,   &amp;</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;                 halosize(1,halo_type),halosize(2,halo_type),          &amp;</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;                 lcyclic,lmasswt,                                      &amp;</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;                 pphoriz_out,num_levs_out,                             &amp;</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;                 no_of_levels_masswt,                                  &amp;</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;<span class="comment">!     Extra arguments for atmos sub-model</span></div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;                 d1(jp_1),d1(jpstar),                                  &amp;</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;<span class="comment">! pressure,pstar</span></div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;                 stsuparr(sa_idx(9)),                                  &amp;</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;<span class="comment">! cos_v_latitude</span></div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;                 stsuparr(sa_idx(10)),                                 &amp;</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;<span class="comment">! cos_theta_latitude</span></div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;                 stsuparr(sa_idx(11)),                                 &amp;</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;<span class="comment">! land mask</span></div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;                 stsuparr(sa_idx(12)),                                 &amp;</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;<span class="comment">! sea mask                                row_length,t_rows,u_rows,t_levels,                    &amp;</span></div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;                 ppfield,lenout,                                       &amp;</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;                 <a class="code" href="namespacemissing__data__mod.xhtml#a3f0f5f89671006d2b52aac53d30dc926">rmdi</a>,stlist(1,il),len_stlist,                         &amp;</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;                 stash_series(1,record_start),                         &amp;</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;                 stash_series_rec_len,no_records,                      &amp;</div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;                 index_size,index_lev,level_list,                      &amp;</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;                 start_step,extraw,n_rows_out,n_cols_out,              &amp;</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;                 realhd,len_realhd,inthd,len_inthd,                    &amp;</div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;                 icode,cmessage)</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;            <span class="keywordflow">ELSE</span></div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;              icode=<a class="code" href="namespacesterr__mod.xhtml#a0a12269de14a27b7369a63fee081458c">st_not_supported</a></div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;              cmessage=<span class="stringliteral">&#39;STWORK1  : diag-of-diagnostic unsupported&#39;</span></div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;              <span class="keywordflow">GO TO</span> 9999 <span class="comment">! jump to error return</span></div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;<span class="keywordflow">            END IF</span></div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;          <span class="keywordflow">ELSE</span></div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;            icode=<a class="code" href="namespacesterr__mod.xhtml#aed2797a79e113bcd5dfa2c506e8b5d13">st_unknown</a></div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;            <span class="keyword">WRITE</span>(cmessage,<span class="stringliteral">&#39;(A,A,1x,i5)&#39;</span>)                              &amp;</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;               <span class="stringliteral">&#39;STWORK: FATAL ERROR: &#39;</span>,                                &amp;</div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;               <span class="stringliteral">&#39;unknown input option&#39;</span>,input_code</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;            <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;          <span class="keywordflow">IF</span> (icode /= 0) <span class="keywordflow">GO TO</span> 9999 <span class="comment">! error exit</span></div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;          <span class="keywordflow">IF</span> (start_step.AND.(extraw /= expected_extra)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;            icode=<a class="code" href="namespacesterr__mod.xhtml#a7e4e4e3504d9be4056f7df8c93cb0607" title="Error codes. ">st_bad_array_param</a></div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;            <span class="keyword">WRITE</span>(cmessage,<span class="stringliteral">&#39;(A,i8,1x,i8)&#39;</span>)                             &amp;</div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;               <span class="stringliteral">&#39;STWORK : Inconsistent length for extra data &#39;</span>,         &amp;</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;               extraw,expected_extra</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;            <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;</div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;<span class="comment">!          pphoriz_out has been computed by multi_spatial</span></div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;<span class="comment">!          it is the size of the output field</span></div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;        <span class="keywordflow">ELSE</span>  <span class="comment">! do &quot;normal&quot; spatial processing</span></div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;<span class="comment">!  2.2 Standard spatial processing section follows</span></div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;<span class="comment">!  If multi-level processing (ie. vertical, global mean) is performed</span></div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;<span class="comment">!  by spatial, the input field is passed in with the original start</span></div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;<span class="comment">!  address but if single-level processing is done by spatial, the</span></div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;<span class="comment">!  field is passed in with an address pointing to the single</span></div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;<span class="comment">!  level required.</span></div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;          base_level0=stlist(st_input_bottom,il)</div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;          what_proc=stlist(st_gridpoint_code,il)</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;                   addr_out=1                   <span class="comment">! Initialise output address</span></div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;                   <span class="keywordflow">DO</span> kl=1,num_levs_out         <span class="comment">!  Start of levels loop! Work out model level if model level range, otherwise set to 1</span></div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;            <span class="keywordflow">IF</span> (base_level0 &lt;  0.OR.base_level0 == st_special_code)     &amp;</div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;               <span class="keywordflow">THEN</span></div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;              base_level=1</div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;            <span class="keywordflow">ELSE</span></div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;              base_level=base_level0+index_lev(kl)-1</div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;<span class="keywordflow">            END IF</span></div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;<span class="comment">! Pass level index into spatial (instead of base_level)</span></div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;            this_index_lev = kl</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;           <span class="comment">!  2.2.1 Process a primary field from D1</span></div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;                     <span class="keywordflow">IF</span> (input_code == 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;              <span class="keywordflow">IF</span> ((what_proc &lt;  vert_mean_top .AND.                     &amp;</div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;                 what_proc &gt;  vert_mean_base) .OR.                      &amp;</div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;                 (what_proc &lt;  global_mean_top .AND.                    &amp;</div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;                 what_proc &gt;  global_mean_base)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;                addr=si(im,is,im_index)</div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;              <span class="keywordflow">ELSE</span></div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;                addr=si(im,is,im_index)+                                &amp;</div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;                   (index_lev(kl)-1)*pphoriz_in</div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;<span class="keywordflow">              END IF</span></div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;              <span class="keywordflow">IF</span> (addr &lt;  1.OR.addr &gt;  len_tot) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;                icode=<a class="code" href="namespacesterr__mod.xhtml#a95f0d7bb5571ad3d70d29e92596c29a2">st_bad_address</a></div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;                cmessage=<span class="stringliteral">&#39;STWORK  : D1 address out of bounds&#39;</span></div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;                <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;<span class="keywordflow">              END IF</span></div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;<span class="comment">! DEPENDS ON: spatial</span></div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;              <span class="keyword">CALL </span><a class="code" href="spatial_8f90.xhtml#a1a8ed3040f333fb8eaffb10ae7545f55" title="LL Routine: SPATIAL -!&gt;LL. ">spatial</a>(d1(addr),vx,vy,vz,                           &amp;</div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;                 grid_type_code,st_grid,                                &amp;</div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;                 fld_type,halo_type,                                    &amp;</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;                 halosize(1,halo_type),halosize(2,halo_type),           &amp;</div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;                 lcyclic,lmasswt,                                       &amp;</div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;                 n_cols_out,n_rows_out,this_index_lev,                  &amp;</div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;                 level_list,index_lev,index_size,                       &amp;</div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;                 no_of_levels_masswt,                                   &amp;</div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;<span class="comment">!     Extra arguments for atmos sub-model</span></div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;                 d1(jp_1),d1(jpstar),                                   &amp;</div><div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;<span class="comment">! pressure,pstar</span></div><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;                 stsuparr(sa_idx(9)),                              &amp;</div><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;<span class="comment">! cos_v_latitude</span></div><div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;                 stsuparr(sa_idx(10)),                             &amp;</div><div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;<span class="comment">! cos_theta_latitude</span></div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;                 stsuparr(sa_idx(11)),                             &amp;</div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;<span class="comment">! land mask</span></div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;                 stsuparr(sa_idx(12)),                             &amp;</div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;<span class="comment">! sea mask</span></div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;                 row_length,t_rows,u_rows,                         &amp;</div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;                 blsize(2,fld_type),t_levels,                      &amp;</div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;                 ppfield(addr_out),pphoriz_out,                    &amp;</div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;                 stlist(1,il),len_stlist,<a class="code" href="namespacemissing__data__mod.xhtml#a3f0f5f89671006d2b52aac53d30dc926">rmdi</a>,                     &amp;</div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;                 icode,cmessage)</div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;            <span class="comment">!  2.2.2 Process a field from STASHwork</span></div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;                  <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (input_code == 1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;              <span class="keywordflow">IF</span> ((what_proc &lt;  vert_mean_top .AND.                &amp;</div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;                 what_proc &gt;  vert_mean_base) .OR.                 &amp;</div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;                 (what_proc &lt;  global_mean_top .AND.               &amp;</div><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;                 what_proc &gt;  global_mean_base)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;                addr=si(im,is,im_index)</div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;              <span class="keywordflow">ELSE</span></div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;                addr=si(im,is,im_index)+                           &amp;</div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;                   (index_lev(kl)-1)*pphoriz_in</div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;<span class="keywordflow">              END IF</span></div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;              <span class="keywordflow">IF</span> (addr &lt;  1.OR.addr &gt;  stash_work_len) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;                icode=<a class="code" href="namespacesterr__mod.xhtml#a95f0d7bb5571ad3d70d29e92596c29a2">st_bad_address</a></div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;                cmessage=<span class="stringliteral">&#39;STWORK  : STASHWORK addr out of bounds&#39;</span></div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;                <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;<span class="keywordflow">              END IF</span></div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;<span class="comment">! DEPENDS ON: spatial</span></div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;              <span class="keyword">CALL </span><a class="code" href="spatial_8f90.xhtml#a1a8ed3040f333fb8eaffb10ae7545f55" title="LL Routine: SPATIAL -!&gt;LL. ">spatial</a>(stash_work(addr),vx,vy,vz,              &amp;</div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;                 grid_type_code,st_grid,                           &amp;</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;                 fld_type,halo_type,                               &amp;</div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;                 halosize(1,halo_type),halosize(2,halo_type),      &amp;</div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;                 lcyclic,lmasswt,                                  &amp;</div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;                 n_cols_out,n_rows_out,this_index_lev,             &amp;</div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;                 level_list,index_lev,index_size,                  &amp;</div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;                 no_of_levels_masswt,                              &amp;</div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;<span class="comment">!     Extra arguments for atmos sub-model</span></div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;                 d1(jp_1),d1(jpstar),                              &amp;</div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;<span class="comment">! pressure,pstar</span></div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;                 stsuparr(sa_idx(9)),                              &amp;</div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;<span class="comment">! cos_v_latitude</span></div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;                 stsuparr(sa_idx(10)),                             &amp;</div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;<span class="comment">! cos_theta_latitude</span></div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;                 stsuparr(sa_idx(11)),                             &amp;</div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;<span class="comment">! land mask</span></div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;                 stsuparr(sa_idx(12)),                             &amp;</div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;<span class="comment">! sea mask</span></div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;                 row_length,t_rows,u_rows,                         &amp;</div><div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;                 blsize(2,fld_type),t_levels,                      &amp;</div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;                 ppfield(addr_out),pphoriz_out,                    &amp;</div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;                 stlist(1,il),len_stlist,<a class="code" href="namespacemissing__data__mod.xhtml#a3f0f5f89671006d2b52aac53d30dc926">rmdi</a>,                     &amp;</div><div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;                 icode,cmessage)</div><div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;            <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (input_code &lt;  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;             <span class="comment">!  2.2.3 Process a field from previously STASHed position in D1</span></div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;<span class="comment">!        (currently unsupported since diagnostic-of-diagnostic)</span></div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;                         icode=<a class="code" href="namespacesterr__mod.xhtml#a0a12269de14a27b7369a63fee081458c">st_not_supported</a></div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;              cmessage=<span class="stringliteral">&#39;STWORK1  : diag-of-diagnostic unsupported&#39;</span></div><div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;              <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;            <span class="keywordflow">ELSE</span></div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;              icode=<a class="code" href="namespacesterr__mod.xhtml#aed2797a79e113bcd5dfa2c506e8b5d13">st_unknown</a></div><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;              <span class="keyword">WRITE</span>(cmessage,<span class="stringliteral">&#39;(A,A,1x,i5)&#39;</span>)     &amp;</div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;                 <span class="stringliteral">&#39;STWORK1 : &gt;&gt;FATAL ERROR &lt;&lt;&#39;</span>, &amp;</div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;                 <span class="stringliteral">&#39;unknown input option&#39;</span>,input_code</div><div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;              <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;<span class="keywordflow">            END IF</span></div><div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;            <span class="comment">!</span></div><div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;            <span class="keywordflow">IF</span> (icode &gt;  0) <span class="keywordflow">GO TO</span> 9999 <span class="comment">! Trap error</span></div><div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;</div><div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;<span class="comment">!  Compute pphoriz_out</span></div><div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;<span class="comment">!  pphoriz_out is the size of the output vector</span></div><div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;<span class="comment">!  we should not be doing timeseries processing here.</span></div><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;</div><div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;<span class="comment">!  NOTE: n_cols_out and n_rows_out should agree with values</span></div><div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;<span class="comment">!        calculated before, but are not checked for consistency.</span></div><div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;</div><div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;            pphoriz_out=n_cols_out*n_rows_out</div><div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;            addr_out=addr_out+pphoriz_out <span class="comment">! increment output address</span></div><div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;<span class="keywordflow">          END DO</span>                          <span class="comment">!  End of levels loop             END IF         ! End of multi-spatial/spatial IF block</span></div><div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;              <span class="keywordflow">IF</span> (icode &gt;  0) <span class="keywordflow">GO TO</span> 9999     <span class="comment">! Trap processing error</span></div><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;</div><div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;<span class="comment">!  2.3 Set length of output field and check against expected length</span></div><div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;</div><div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;<span class="comment">!  Calculate size of global pphoriz_out - the size on disk</span></div><div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;</div><div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;        <span class="keywordflow">IF</span> (what_proc  ==  st_time_series_code .OR.                   &amp;</div><div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;           what_proc  ==  st_time_series_mean) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;          global_pphoriz_out=pphoriz_out</div><div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;          global_n_rows_out=n_rows_out</div><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;          global_n_cols_out=n_cols_out</div><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;        <span class="keywordflow">ELSE</span></div><div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;<span class="comment">! DEPENDS ON: stash_get_global_size</span></div><div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;          <span class="keyword">CALL </span><a class="code" href="stash__get__global__size_8f90.xhtml#ae637a2a1b87fe4adc837dd0de2aa92fd" title="Calculates the &quot;global&quot; size of STASHed data. ">stash_get_global_size</a>(                                   &amp;</div><div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;             stlist(st_north_code,il) , stlist(st_east_code,il),        &amp;</div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;             stlist(st_south_code,il) , stlist(st_west_code,il),        &amp;</div><div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;             1,                                                         &amp;</div><div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;             stlist(st_gridpoint_code,il) , stlist(st_proc_no_code,il), &amp;</div><div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;             global_pphoriz_out,                                        &amp;</div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;             icode, cmessage)</div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;</div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;          <span class="keywordflow">IF</span> (icode  /=  0) <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;</div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;</div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;</div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;        <span class="keywordflow">IF</span> (pphoriz_out*num_levs_out /= expected_len) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;          icode=<a class="code" href="namespacesterr__mod.xhtml#a7e4e4e3504d9be4056f7df8c93cb0607" title="Error codes. ">st_bad_array_param</a></div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;          <span class="keyword">WRITE</span>(cmessage,<span class="stringliteral">&#39;(A,i8,1x,i8)&#39;</span>)                         &amp;</div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;             <span class="stringliteral">&#39;STWORK   : Inconsistent length for output field &#39;</span>, &amp;</div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;             pphoriz_out*num_levs_out,expected_len</div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;          <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;      <span class="keywordflow">ELSE</span></div><div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;</div><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;<span class="comment">!  3. No SPATIAL processing - extract output field by direct copy</span></div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;</div><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;<span class="comment">!  Determine input source</span></div><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;</div><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;        input_code=stlist(st_input_code,il)</div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;       <span class="comment">!  Other fields are simply copied</span></div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;               <span class="keywordflow">IF</span> (input_code == 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;<span class="comment">! Simple extraction with no weighting from primary field in D1</span></div><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;<span class="comment">! except for those needing special extraction on funny grids</span></div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;          addr=si(im,is,im_index)</div><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;          <span class="keywordflow">DO</span> jl=1,stlist(st_output_length,il)</div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;            ppfield(jl)=d1(addr+jl-1)</div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;<span class="keywordflow">          END DO</span></div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;        <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (input_code == 1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;<span class="comment">! Simple extraction with no weighting from STASH_WORK</span></div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;<span class="comment">! except for those needing special extraction on funny grids</span></div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;          addr=si(im,is,im_index)</div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;          <span class="keywordflow">DO</span> jl=1,stlist(st_output_length,il)</div><div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;            ppfield(jl)=stash_work(addr+jl-1)</div><div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;<span class="keywordflow">          END DO</span></div><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;        <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (input_code &lt;  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;<span class="comment">! Previously STASHed entry in D1</span></div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;<span class="comment">! for all sub-models as diagnostic D1 is always on a proper grid.</span></div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;</div><div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;          addr=stlist(st_output_addr,-input_code)</div><div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;          <span class="keywordflow">DO</span> jl=1,stlist(st_output_length,il)</div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;            ppfield(jl)=d1(addr+jl-1)</div><div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;<span class="keywordflow">          END DO</span></div><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;        <span class="keywordflow">ELSE</span></div><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;<span class="comment">! Illegal input code</span></div><div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;          icode=<a class="code" href="namespacesterr__mod.xhtml#aed2797a79e113bcd5dfa2c506e8b5d13">st_unknown</a></div><div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;          cmessage=<span class="stringliteral">&#39;STWORK   : Unknown input code encountered&#39;</span></div><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;          <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;<span class="keywordflow">      END IF</span>      <span class="comment">! End of LLPROC IF block    ************************</span></div><div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;</div><div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;<span class="comment">!  4. Output section.</span></div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;</div><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;<span class="comment">!     The data is in ppfield with a length lenout.</span></div><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;<span class="comment">!     The horizontal field size pphoriz_out and number of output levels</span></div><div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;<span class="comment">!     num_levs_out were calculated in section 1.</span></div><div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;<span class="comment">!     Output option depends on the stlist code.</span></div><div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;</div><div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;<span class="comment">!  4.0 Find mother STASHlist record if necessary.</span></div><div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;</div><div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;<span class="comment">!   Packing_type not set from PP_FILE in the ELSE IF part of block.</span></div><div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;      packing_type = 0  <span class="comment">! Default is unpacked.</span></div><div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;      <span class="keywordflow">IF</span>(stlist(st_input_code,il) &lt;  0) <span class="keywordflow">THEN</span> <span class="comment">! Second of two stlist</span></div><div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;        ilprev=-stlist(st_input_code,il)</div><div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;      <span class="keywordflow">ELSE</span></div><div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;        ilprev=il <span class="comment">! no daughter record</span></div><div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;</div><div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;<span class="comment">!  4.0.1 Set up lbproc sub-components based on STASH processing info.</span></div><div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;</div><div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;      <span class="keywordflow">DO</span> jj=1,14</div><div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;        lbproc_comp(jj)=0</div><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;         <span class="keywordflow">IF</span>(stlist(st_gridpoint_code,ilprev) &gt;= zonal_mean_base)         &amp;</div><div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;         lbproc_comp(7)=1</div><div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;        <span class="keywordflow">IF</span>((stlist(st_gridpoint_code,ilprev) &gt;= vert_mean_base .AND.    &amp;</div><div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;         stlist(st_gridpoint_code,ilprev) &lt;  vert_mean_top) .OR.     &amp;</div><div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;         (stlist(st_gridpoint_code,ilprev) &gt;= global_mean_base .AND. &amp;</div><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;         stlist(st_gridpoint_code,ilprev) &lt;  global_mean_top))       &amp;</div><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;         lbproc_comp(12)=1</div><div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;           <span class="keywordflow">IF</span>((stlist(st_proc_no_code,ilprev) == st_accum_code) .OR.       &amp;</div><div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;         (stlist(st_proc_no_code,ilprev) == st_time_mean_code).OR.   &amp;</div><div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;         (stlist(st_proc_no_code,ilprev) == st_time_series_mean))    &amp;</div><div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;         lbproc_comp(8)=1</div><div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;           <span class="keywordflow">IF</span>(stlist(st_proc_no_code,ilprev) == st_min_code)               &amp;</div><div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;         lbproc_comp(13)=1</div><div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;           <span class="keywordflow">IF</span>(stlist(st_proc_no_code,ilprev) == st_max_code)               &amp;</div><div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;         lbproc_comp(14)=1</div><div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;           output_code=stlist(st_output_code,il)</div><div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;     <span class="comment">!  4.1 Output to ppfile</span></div><div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;           <span class="keywordflow">IF</span> (output_code &lt;  0) <span class="keywordflow">THEN</span>                  <span class="comment">! PP Output</span></div><div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;<span class="comment">!  Find appropriate dump header if a daughter record</span></div><div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;        <span class="keywordflow">IF</span> (il /= ilcurr) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;          icurrll_dump_ptr=stlist(st_lookup_ptr,ilcurr)</div><div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;</div><div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;<span class="comment">!  4.1.0 Determine output PP unit and associated filename; OPEN file</span></div><div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;</div><div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;<span class="comment">!  If preattached files are used the file is left OPEN by ppctl following</span></div><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;<span class="comment">!  the initial OPEN; if reinitialised files are used the unit must be</span></div><div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;<span class="comment">!  OPENed and CLOSEd explicitly every time it is used.</span></div><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;</div><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;        ppunit=-output_code</div><div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;</div><div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;        <span class="keywordflow">IF</span> (ft_steps(ppunit) /= 0) <span class="keywordflow">THEN</span> <span class="comment">! Filename generated by model</span></div><div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;<span class="comment">! Check if re-initialised file stream has been opened yet</span></div><div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;          <span class="keywordflow">IF</span> (step &lt;  ft_firststep(ppunit)) <span class="keywordflow">THEN</span> <span class="comment">! File stream opened?</span></div><div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;            icode=1</div><div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;            cmessage=<span class="stringliteral">&#39;STWORK  : Re-initialised file not yet created&#39;</span></div><div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;            <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*)                                                  &amp;</div><div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;               <span class="stringliteral">&#39;STWORK  : FATAL ERROR. Attempt to WRITE to &#39;</span>,           &amp;</div><div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;               <span class="stringliteral">&#39;re-initialised file stream before file first opened:&#39;</span></div><div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;            <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;stwork&#39;</span>)</div><div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;            <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*)                                                  &amp;</div><div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;               <span class="stringliteral">&#39;        : check that output on UNIT &#39;</span>,ppunit,<span class="stringliteral">&#39; is not&#39;</span>, &amp;</div><div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;               <span class="stringliteral">&#39; requested before first initialisation of output file:&#39;</span></div><div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;            <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;stwork&#39;</span>)</div><div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;            <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*)                                                  &amp;</div><div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;               <span class="stringliteral">&#39;        :  See UMUI window (Initialisation of PP file&#39;</span>, &amp;</div><div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;               <span class="stringliteral">&#39;s) accessed from (Post Processing) from (Submodel &#39;</span>,    &amp;</div><div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;               <span class="stringliteral">&#39;independent).&#39;</span></div><div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;            <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;stwork&#39;</span>)</div><div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;            <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;<span class="keywordflow">          END IF</span>                                <span class="comment">! File stream opened ?</span></div><div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;</div><div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;          ppname     = <a class="code" href="namespacefile__units__mod.xhtml#a51d73b0fb88a07e9ed07e4f03d5ab275">get_model_ft_unit_filename</a>(ppunit)</div><div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;          len_ppname = len_trim(ppname)</div><div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;<span class="comment">! To avoid unnecessary open/close/read/write&#39;s, only</span></div><div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;<span class="comment">! open this file once more, after the initialisation.</span></div><div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;          <span class="keywordflow">IF</span>(.NOT.model_file_managed(ppunit)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;            <span class="keyword">CALL </span><a class="code" href="namespacemodel__file.xhtml#a07b515dfc8147e86355cd71196399c5d">model_file_open</a> &amp;</div><div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;                (ppunit,ppname,len_ppname,1,1,icode,      &amp;</div><div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;                filetype=<a class="code" href="namespaceio.xhtml#a819755aa2d67c4c2448e11828c25c7f5">iofiletypeum</a>)</div><div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;</div><div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;<span class="comment">!  4.1.2 Find the first available pp lookup record.</span></div><div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;</div><div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;        icurrll=ft_lastfield(ppunit) <span class="comment">! Position of the last field</span></div><div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;        icurrll=icurrll+1            <span class="comment">! Position of the next field</span></div><div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;</div><div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;<span class="comment">! Attach the lookup table</span></div><div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;</div><div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;        iwa = <a class="code" href="namespacemissing__data__mod.xhtml#aff73e8cc7491c6c6a6b2bcc14c172e20">imdi</a></div><div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;        ipplook=&gt;attachlookups(ppunit)</div><div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;</div><div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;<span class="comment">!  4.1.3 Find the first available position for the next data record(s)</span></div><div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;<span class="comment">!        by reading last pp lookup record.</span></div><div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;</div><div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;        <span class="keywordflow">IF</span> (icurrll == 1) <span class="keywordflow">THEN</span>      <span class="comment">! First record</span></div><div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;          iwa=get_file_address(ppunit,<a class="code" href="namespacemodel__file.xhtml#a739b20a20822d3df25e6d5f8e8e53f51">mf_data_address</a>)<span class="comment">!Loc of start of data</span></div><div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;        <span class="keywordflow">ELSE</span></div><div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;<span class="comment">! Pointer to next available data location in output file</span></div><div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;          <span class="keywordflow">IF</span> (<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a> == pe_zero) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;            iwa = ipplook(<a class="code" href="namespacelookup__addresses.xhtml#afbf7195b85d47a8f92d0769c84f846a4">lbegin</a>, icurrll-1)+                         &amp;</div><div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;               ipplook(<a class="code" href="namespacelookup__addresses.xhtml#a7fbd5df41f854a6fd5c4d35c0942742e">lbnrec</a>, icurrll-1)</div><div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;<span class="keywordflow">        END IF</span>                     <span class="comment">! Test on first record</span></div><div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;</div><div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;<span class="comment">!  4.1.4 If a daughter record is being processed then recover</span></div><div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;<span class="comment">!          size information from dump LOOKUP header referenced by</span></div><div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;<span class="comment">!          mother record.</span></div><div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;</div><div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;        <span class="keywordflow">IF</span> (il /= ilcurr) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;          extraw_hdr=lookup(<a class="code" href="namespacelookup__addresses.xhtml#a36fe53c5769dee10ac1c6609f9fa6c2d">lbext</a>,icurrll_dump_ptr)</div><div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;</div><div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;          global_pphoriz_out=lookup(<a class="code" href="namespacelookup__addresses.xhtml#ab82991ff70c45e8f733b4446f83e0556">lblrec</a>,icurrll_dump_ptr)</div><div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;          global_n_rows_out=lookup(<a class="code" href="namespacelookup__addresses.xhtml#a54e6ad5def513311547cbefc60aee032">lbrow</a>,icurrll_dump_ptr)</div><div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;          global_n_cols_out=lookup(<a class="code" href="namespacelookup__addresses.xhtml#a9ae4b281a4481f6737cda3288e5d7971">lbnpt</a>,icurrll_dump_ptr)</div><div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;          <span class="keywordflow">IF</span> (what_proc == st_time_series_mean) <span class="keywordflow">THEN</span>            pphoriz_out=global_pphoriz_out</div><div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;            n_rows_out=global_n_rows_out</div><div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;            n_cols_out=global_n_cols_out</div><div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;          <span class="keywordflow">IF</span> (what_proc  ==  st_time_series_code) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;            pphoriz_out=global_pphoriz_out</div><div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;            n_rows_out=global_n_rows_out</div><div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;            n_cols_out=global_n_cols_out</div><div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;</div><div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;</div><div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;<span class="comment">!  4.1.5 Check pp_pack_code for grib output. Set grib flag and reset</span></div><div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;<span class="comment">!        pp_pack_code to give packing profile.</span></div><div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;        <span class="keywordflow">IF</span> (pp_pack_code(ppunit) &gt;= 100) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;          grib_out=.true.</div><div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;          pp_pack_code(ppunit)=pp_pack_code(ppunit)-100</div><div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;          grib_packing=pp_pack_code(ppunit)</div><div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;        <span class="keywordflow">ELSE</span></div><div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;          grib_out=.false.</div><div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;</div><div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;<span class="comment">!  4.1.6 Set packing accuracy for output data field and buffer length</span></div><div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;<span class="comment">!        Multiple packing profiles are held in STASHmaster and chosen o</span></div><div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;<span class="comment">!        a per-unit basis through PP_PACK_CODE.  Profile 0 means</span></div><div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;<span class="comment">!        unpacked. If the field has any extra data switch off packing.</span></div><div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;</div><div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;        <span class="keywordflow">IF</span> (pp_pack_code(ppunit) == 0.OR.extraw_hdr /= 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;          packing=.false.</div><div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;          comp_accrcy=-99</div><div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;        <span class="keywordflow">ELSE</span></div><div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;          packing=.true.</div><div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;<span class="comment">! DEPENDS ON: exppxi</span></div><div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;          comp_accrcy= exppxi( im_ident, is, im,           &amp;</div><div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;             <a class="code" href="namespacecppxref__mod.xhtml#a1e1bb8d235072b8e488c5f81a2686607">ppx_packing_acc</a>+pp_pack_code(ppunit)-1,       &amp;</div><div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;          icode, cmessage)</div><div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;        <span class="keywordflow">IF</span> (grib_out) <span class="keywordflow">THEN</span>  <span class="comment">! reset packing code</span></div><div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;          pp_pack_code(ppunit)=pp_pack_code(ppunit)+100</div><div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;</div><div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;        lenbuf=((global_pphoriz_out+<a class="code" href="namespaceio__configuration__mod.xhtml#a47a1a0bfdbd64545a5967659ae7d6435">io_field_padding</a>-1)/<a class="code" href="namespaceio__configuration__mod.xhtml#a47a1a0bfdbd64545a5967659ae7d6435">io_field_padding</a>)*&amp;</div><div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;           <a class="code" href="namespaceio__configuration__mod.xhtml#a47a1a0bfdbd64545a5967659ae7d6435">io_field_padding</a></div><div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;<span class="comment">! Output length before pack</span></div><div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;</div><div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;<span class="comment">!  4.2 Select routine to output data using logical grib.</span></div><div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;<span class="comment">!      If data to be output in grib code then call grib_file</span></div><div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;<span class="comment">!      If data to be output in pp   code then call pp_file</span></div><div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;</div><div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;<span class="comment">! If we are using the async stash approach then we prepare a new</span></div><div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;<span class="comment">! dispatch buffer. We will fill this with all output arising from</span></div><div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;<span class="comment">! the subsequent levels loop.</span></div><div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;</div><div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;        <span class="keywordflow">IF</span> (isusingasyncstash())<span class="keywordflow">THEN</span></div><div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;          iwa=<a class="code" href="namespacemodel__file.xhtml#a1be124d410691b7f407165dd575888e3" title="This value is part of the file format, and other utilities expect it. ">mf_data_missing</a></div><div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;          num_words=<a class="code" href="namespacemodel__file.xhtml#a1be124d410691b7f407165dd575888e3" title="This value is part of the file format, and other utilities expect it. ">mf_data_missing</a></div><div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;</div><div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;        <span class="keywordflow">DO</span>  ii=1,num_levs_out           <span class="comment">!  Start of levels loop! Gather together distributed field to pe 0</span></div><div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;<span class="comment">! Distributed data is in pp_field, gathered data will be</span></div><div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;<span class="comment">! in the buf array</span></div><div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;</div><div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;          <span class="keywordflow">IF</span> ( (what_proc == st_time_series_code) .OR.                  &amp;</div><div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;             (what_proc == st_time_series_mean)  ) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;<span class="comment">! If it&#39;s timeseries output - just copy on pe_zero</span></div><div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;<span class="comment">! (usually PE 0)</span></div><div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;</div><div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;            <span class="keywordflow">IF</span> (<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>  ==  pe_zero) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;              <span class="keywordflow">DO</span> i=1,pphoriz_out</div><div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;                buf(i)=ppfield(i+(ii-1)*pphoriz_out)</div><div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;<span class="keywordflow">              END DO</span></div><div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;<span class="keywordflow">            END IF</span></div><div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;</div><div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;          <span class="keywordflow">ELSE</span> <span class="comment">! not timeseries output</span></div><div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;</div><div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;            <span class="keywordflow">IF</span> (isusingasyncstash())<span class="keywordflow">THEN</span></div><div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;              ios_q_slot=getslotfornextlevel(ppunit)</div><div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;</div><div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;<span class="comment">! Prepare the arguments that are understood by the IO stash-server</span></div><div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;              ios_packing_flag=ios_no_packing</div><div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;              <span class="keywordflow">IF</span> (packing)ios_packing_flag=ios_packing</div><div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;</div><div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;<span class="comment">! Do we have a full field?</span></div><div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;              ios_fullfield_flag=ios_partial_field</div><div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;              <span class="keywordflow">IF</span> ( global_n_rows_out ==                  &amp;</div><div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;                 glsize(2,get_fld_type(grid_type_code)) &amp;</div><div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;                 .AND.                                  &amp;</div><div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;                 global_n_cols_out ==                   &amp;</div><div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;                 glsize(1,get_fld_type(grid_type_code)))&amp;</div><div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;                 ios_fullfield_flag=ios_full_field</div><div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;</div><div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;<span class="comment">! Add our local component of the output field to the ios_stash</span></div><div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;<span class="comment">! buffer we requested before the levels loop</span></div><div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;<span class="comment">! No communications happen yet we are simply acrueing things</span></div><div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;<span class="comment">! to send, and a metadata description of what to do with them</span></div><div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;</div><div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;              <span class="keyword">CALL </span>ios_stash_pack_pp_data ( &amp;</div><div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;                  ios_q_slot,                   &amp;<span class="comment">! communications handle</span></div><div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;                  ppfield(1+(ii-1)*pphoriz_out:1+ii*pphoriz_out-1) , &amp;                                                  <span class="comment">! data in</span></div><div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;                  pphoriz_out,                  &amp;<span class="comment">! len data in</span></div><div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;                  get_fld_type(grid_type_code), &amp;<span class="comment">! field type</span></div><div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;                  halo_type,                    &amp;<span class="comment">! halo type                  ios_stash_preprocess,         &amp;! preprocess active</span></div><div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;                  ios_packing_flag,             &amp;<span class="comment">! packing control</span></div><div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;                  ios_fullfield_flag,           &amp;<span class="comment">! subdomain control</span></div><div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;                  -1,                           &amp;<span class="comment">! pack type (not used)</span></div><div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;                  comp_accrcy,                  &amp;<span class="comment">! coex accuracy</span></div><div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;                  <a class="code" href="namespacemissing__data__mod.xhtml#a3f0f5f89671006d2b52aac53d30dc926">rmdi</a>,                         &amp;<span class="comment">! &#39;data missing&#39; value</span></div><div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;                                                 <span class="comment">! for reals</span></div><div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;                  <a class="code" href="namespaceio__configuration__mod.xhtml#a47a1a0bfdbd64545a5967659ae7d6435">io_field_padding</a>,             &amp;<span class="comment">! field padding                  icurrll,                      &amp;! the record number                  stlist(st_south_code,il),     &amp;! subdomain boundaries</span></div><div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;                  stlist(st_south_code,il)+global_n_rows_out-1, &amp;</div><div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;                  stlist(st_west_code,il),                      &amp;</div><div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;                  stlist(st_west_code,il)+global_n_cols_out-1,  &amp;</div><div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;                  is,                                           &amp;</div><div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;                  im,                                           &amp;</div><div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;                  ii                                            &amp;</div><div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;                  )</div><div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;            <span class="keywordflow">ELSE</span> <span class="comment">! We are not async stash so we do the conventional gather_field              packing_type=0</span></div><div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;              num_words=0</div><div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;              num_out=0</div><div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;<span class="comment">! DEPENDS ON: stash_gather_field</span></div><div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;              <span class="keyword">CALL </span><a class="code" href="stash__gather__field_8f90.xhtml#aa7b6e8bafec3cfabe0253d90dbe5db32" title="Gathers STASHed data from many processors to one processor. ">stash_gather_field</a> (                                    &amp;</div><div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;                 ppfield(1+(ii-1)*pphoriz_out) , buf,                      &amp;</div><div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;                 pphoriz_out , global_pphoriz_out , 1,                     &amp;</div><div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;                 stlist(st_south_code,il)+global_n_rows_out-1 ,            &amp;</div><div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;                 stlist(st_west_code,il)+global_n_cols_out-1,              &amp;</div><div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;                 stlist(st_south_code,il),                                 &amp;</div><div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;                 stlist(st_west_code,il),                                  &amp;</div><div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;                 grid_type_code,halo_type,pe_zero,.true.,            &amp;</div><div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;                 packing, im_ident, packing_type,                    &amp;</div><div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;                 num_out,                                                  &amp;</div><div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;                 comp_accrcy, <a class="code" href="namespacemissing__data__mod.xhtml#a3f0f5f89671006d2b52aac53d30dc926">rmdi</a>,                                        &amp;</div><div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;                 icode=icode, cmessage=cmessage)</div><div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;</div><div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;              <span class="keywordflow">IF</span> (icode  &gt;   0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;                <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&#39;Error occured in STASH while gathering &#39;</span>,       &amp;</div><div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;                   <span class="stringliteral">&#39;data for output.&#39;</span></div><div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;                <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;stwork&#39;</span>)</div><div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;                <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;<span class="keywordflow">              END IF</span></div><div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;<span class="keywordflow">            END IF</span> <span class="comment">! isUsingAsyncStash()</span></div><div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;</div><div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;<span class="keywordflow">          END IF</span> <span class="comment">! is a time series output</span></div><div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;</div><div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;<span class="comment">!  Reset index for pp_head if there is a levels list of hybrid levels</span></div><div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;          <span class="keywordflow">IF</span> (stlist(st_output_bottom,il) &lt;  0.AND.                         &amp;</div><div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;             lbvcl  ==  <a class="code" href="namespacecppxref__mod.xhtml#a25971a5c3569cf1dc039354b87e8dcea">ppx_lbvc_hybrid</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;            jj = level_list(ii)</div><div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;<span class="comment">!  or a range of model levels, as they may not be consecutive,</span></div><div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;          <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (stlist(st_output_bottom,il) &gt;= 1.AND.                    &amp;</div><div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;             stlist(st_output_top,il) &lt;= t_levels) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;            jj = level_list(ii)</div><div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;<span class="comment">!  otherwise use of level index is alright</span></div><div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;          <span class="keywordflow">ELSE</span></div><div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;            jj = ii</div><div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;     <span class="comment">!  Check that pp output file has sufficient headers pre-allocated</span></div><div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;          <span class="keywordflow">IF</span> (icurrll &gt; &amp;</div><div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;             get_mf_information(ppunit,<a class="code" href="namespacemodel__file.xhtml#a40cb275cb568b03f4fb2e06003a725cc" title="Other Data. ">mf_num_preallocated_headers</a>)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;            icode=4</div><div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;            <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<span class="stringliteral">&#39;ERROR detected in routine STWORK&#39;</span>, &amp;</div><div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;                src=<span class="stringliteral">&#39;atmos_physics2&#39;</span>)</div><div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;            <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(A,I5,A,I3)&#39;</span>) &amp;</div><div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;                <span class="stringliteral">&#39;: no. of output fields (=&#39;</span>,icurrll,<span class="stringliteral">&#39;)&#39;</span>//  &amp;</div><div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;               <span class="stringliteral">&#39; exceeds no. of reserved PP headers for unit &#39;</span>,ppunit</div><div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;            <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;atmos_physics2&#39;</span>)</div><div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;            <span class="keyword">WRITE</span>(cmessage,<span class="stringliteral">&#39;(A,I3)&#39;</span>)                                         &amp;</div><div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;               <span class="stringliteral">&#39;STWORK: Number of fields exceeds reserved headers for unit &#39;</span> &amp;</div><div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;               ,ppunit</div><div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;            <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;<span class="keywordflow">          END IF</span>     <span class="comment">! end  no. of pp fields check</span></div><div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;                  <span class="keywordflow">IF</span> (grib_out) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;            <span class="keywordflow">IF</span> (isusingasyncstash())                                        &amp;</div><div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;               <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a>(<span class="stringliteral">&#39;stwork&#39;</span>,99,                                   &amp;</div><div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;               <span class="stringliteral">&#39;grib data not supported for asyncStash&#39;</span>)</div><div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;</div><div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;<span class="comment">! NOTE cannot pack data into grib before pphead correctly setup</span></div><div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;              num_words = -99   <span class="comment">! ie unset before call to pp_head</span></div><div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;            packing_type=3</div><div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;          <span class="keywordflow">ELSE</span></div><div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;<span class="comment">!  Pack data into PP code.</span></div><div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;</div><div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;<span class="comment">! Set the normal default lengths for no packing</span></div><div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;                      packing_hold=packing</div><div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;            packing_type_hold=packing_type</div><div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;            len_buf_words=lenbuf</div><div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;            len_field=global_pphoriz_out</div><div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;</div><div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;<span class="comment">! Check if we have already packed this data, and if so</span></div><div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;<span class="comment">! record the packing flag, and turn off packing</span></div><div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;</div><div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;            <span class="keywordflow">IF</span> (packing.AND.packing_type == 1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;</div><div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;              packing=.false.</div><div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;              packing_type=0</div><div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;</div><div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;              num_words=(num_out+1)/2 <span class="comment">! Round up to the nearest 64 Bit words.</span></div><div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;              len_buf_words=((num_words+<a class="code" href="namespaceio__configuration__mod.xhtml#a47a1a0bfdbd64545a5967659ae7d6435">io_field_padding</a>-1)/<a class="code" href="namespaceio__configuration__mod.xhtml#a47a1a0bfdbd64545a5967659ae7d6435">io_field_padding</a>)*&amp;</div><div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;                 <a class="code" href="namespaceio__configuration__mod.xhtml#a47a1a0bfdbd64545a5967659ae7d6435">io_field_padding</a></div><div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;              len_field=num_words</div><div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;</div><div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;<span class="keywordflow">            END IF</span> <span class="comment">! packing.AND.packing_type == 1</span></div><div class="line"><a name="l01550"></a><span class="lineno"> 1550</span>&#160;</div><div class="line"><a name="l01551"></a><span class="lineno"> 1551</span>&#160;            <span class="keywordflow">IF</span> ( isusingasyncstash()) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01552"></a><span class="lineno"> 1552</span>&#160;              iwa=<a class="code" href="namespacemodel__file.xhtml#a1be124d410691b7f407165dd575888e3" title="This value is part of the file format, and other utilities expect it. ">mf_data_missing</a></div><div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;              num_words=<a class="code" href="namespacemodel__file.xhtml#a1be124d410691b7f407165dd575888e3" title="This value is part of the file format, and other utilities expect it. ">mf_data_missing</a></div><div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;            <span class="keywordflow">ELSE</span> <span class="comment">! Output the gathered field via pp_file</span></div><div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;</div><div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;<span class="comment">! Restrict the call to output pe only</span></div><div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;              <span class="keywordflow">IF</span> (<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a> == pe_zero) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;<span class="comment">! DEPENDS ON: pp_file</span></div><div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160;                <span class="keyword">CALL </span><a class="code" href="pp__file_8f90.xhtml#a16dcddb977828f88bb3f21e8bc1b8c30" title="SUBROUTINE PP_FILE -!&gt; ">pp_file</a>(buf,icurrll,                                    &amp;</div><div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;                   len_buf_words, num_words, <a class="code" href="namespacemissing__data__mod.xhtml#a3f0f5f89671006d2b52aac53d30dc926">rmdi</a>, comp_accrcy,              &amp;</div><div class="line"><a name="l01561"></a><span class="lineno"> 1561</span>&#160;                   len_field, ppunit, iwa,                                   &amp;</div><div class="line"><a name="l01562"></a><span class="lineno"> 1562</span>&#160;                   global_n_cols_out,global_n_rows_out,                      &amp;</div><div class="line"><a name="l01563"></a><span class="lineno"> 1563</span>&#160;                   packing,im_ident,                                         &amp;</div><div class="line"><a name="l01564"></a><span class="lineno"> 1564</span>&#160;                   packing_type,pe_zero,extra_var_data,                &amp;</div><div class="line"><a name="l01565"></a><span class="lineno"> 1565</span>&#160;                   srow_out,wcol_out,icode,cmessage)</div><div class="line"><a name="l01566"></a><span class="lineno"> 1566</span>&#160;<span class="keywordflow">              END IF</span> <span class="comment">! mype == pe_zero</span></div><div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;             <span class="comment">! Restore the packing flags</span></div><div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;              <span class="keywordflow">IF</span> (packing_type == 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;                packing=packing_hold</div><div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;                packing_type=packing_type_hold</div><div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;<span class="keywordflow">              END IF</span></div><div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;<span class="comment">! Make sure all processors get the return code</span></div><div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;</div><div class="line"><a name="l01574"></a><span class="lineno"> 1574</span>&#160;              <span class="keyword">CALL </span>gc_ibcast(101,1,0,nproc,info,icode)</div><div class="line"><a name="l01575"></a><span class="lineno"> 1575</span>&#160;</div><div class="line"><a name="l01576"></a><span class="lineno"> 1576</span>&#160;<span class="comment">! Num_words is the no of 64 bit words required</span></div><div class="line"><a name="l01577"></a><span class="lineno"> 1577</span>&#160;              <span class="keywordflow">IF</span> (icode &gt;  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;                <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;<span class="keywordflow">              END IF</span></div><div class="line"><a name="l01580"></a><span class="lineno"> 1580</span>&#160;<span class="keywordflow">            END IF</span> <span class="comment">! isUsingAsyncStash()</span></div><div class="line"><a name="l01581"></a><span class="lineno"> 1581</span>&#160;<span class="keywordflow">          END IF</span> <span class="comment">! grib out</span></div><div class="line"><a name="l01582"></a><span class="lineno"> 1582</span>&#160;<span class="comment">! Add any extra data concerning variable grids to the extra data</span></div><div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160;<span class="comment">! for lookup header</span></div><div class="line"><a name="l01584"></a><span class="lineno"> 1584</span>&#160;</div><div class="line"><a name="l01585"></a><span class="lineno"> 1585</span>&#160;          <span class="keywordflow">IF</span> (isusingasyncstash()) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01586"></a><span class="lineno"> 1586</span>&#160;            len_buf_words=<a class="code" href="namespacemodel__file.xhtml#a1be124d410691b7f407165dd575888e3" title="This value is part of the file format, and other utilities expect it. ">mf_data_missing</a></div><div class="line"><a name="l01587"></a><span class="lineno"> 1587</span>&#160;          <span class="keywordflow">ELSE</span></div><div class="line"><a name="l01588"></a><span class="lineno"> 1588</span>&#160;            len_buf_words=((num_words+<a class="code" href="namespaceio__configuration__mod.xhtml#a47a1a0bfdbd64545a5967659ae7d6435">io_field_padding</a>-1)/<a class="code" href="namespaceio__configuration__mod.xhtml#a47a1a0bfdbd64545a5967659ae7d6435">io_field_padding</a>)*  &amp;</div><div class="line"><a name="l01589"></a><span class="lineno"> 1589</span>&#160;               <a class="code" href="namespaceio__configuration__mod.xhtml#a47a1a0bfdbd64545a5967659ae7d6435">io_field_padding</a> <span class="comment">! No of words output</span></div><div class="line"><a name="l01590"></a><span class="lineno"> 1590</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;</div><div class="line"><a name="l01592"></a><span class="lineno"> 1592</span>&#160;<span class="comment">!  4.2.1 Set STASH processing codes and sampling period for ppheader</span></div><div class="line"><a name="l01593"></a><span class="lineno"> 1593</span>&#160;</div><div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;          gr=stlist(st_gridpoint_code,ilprev)<span class="comment">! Grid point code</span></div><div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;<span class="comment">! Any time-processed field has a (non-zero) sample_prd set ! this will be translated by pp_head into an lbtim subcode ib of 2</span></div><div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;          sample_prd=0.0</div><div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;          <span class="keywordflow">IF</span> (stlist(st_proc_no_code,ilprev) &gt;  st_replace_code) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01598"></a><span class="lineno"> 1598</span>&#160;            sample_prd=<span class="keywordtype">REAL(stlist(st_freq_code,ilprev)*secs_per_period)</span> &amp;</div><div class="line"><a name="l01599"></a><span class="lineno"> 1599</span>&#160;               /<span class="keywordtype">REAL</span>(steps_per_period*3600)</div><div class="line"><a name="l01600"></a><span class="lineno"> 1600</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160;</div><div class="line"><a name="l01602"></a><span class="lineno"> 1602</span>&#160;<span class="comment">!  4.2.2 Verification time comes from fixhd(28), current time fixhd(21)</span></div><div class="line"><a name="l01603"></a><span class="lineno"> 1603</span>&#160;<span class="comment">!        2 cases that require consideration here:</span></div><div class="line"><a name="l01604"></a><span class="lineno"> 1604</span>&#160;</div><div class="line"><a name="l01605"></a><span class="lineno"> 1605</span>&#160;<span class="comment">!       (1) this record is not a daughter record.</span></div><div class="line"><a name="l01606"></a><span class="lineno"> 1606</span>&#160;<span class="comment">!           in which case, set start_step=.TRUE., verif time from fixhd</span></div><div class="line"><a name="l01607"></a><span class="lineno"> 1607</span>&#160;<span class="comment">!           present time also from fixhd</span></div><div class="line"><a name="l01608"></a><span class="lineno"> 1608</span>&#160;</div><div class="line"><a name="l01609"></a><span class="lineno"> 1609</span>&#160;<span class="comment">!       (2) this record IS a daughter record.</span></div><div class="line"><a name="l01610"></a><span class="lineno"> 1610</span>&#160;<span class="comment">!           in which case, will need to retreive info on start_time</span></div><div class="line"><a name="l01611"></a><span class="lineno"> 1611</span>&#160;<span class="comment">!           from dump</span></div><div class="line"><a name="l01612"></a><span class="lineno"> 1612</span>&#160;</div><div class="line"><a name="l01613"></a><span class="lineno"> 1613</span>&#160;          start_step=.true.</div><div class="line"><a name="l01614"></a><span class="lineno"> 1614</span>&#160;<span class="comment">! We need to protect the call</span></div><div class="line"><a name="l01615"></a><span class="lineno"> 1615</span>&#160;          <span class="keywordflow">IF</span> (<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a> == pe_zero) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01616"></a><span class="lineno"> 1616</span>&#160;            <span class="keywordflow">IF</span> (il == ilcurr) <span class="keywordflow">THEN</span> <span class="comment">! not daughter record</span></div><div class="line"><a name="l01617"></a><span class="lineno"> 1617</span>&#160;              start_time(1:7)=fixhd(28:34)</div><div class="line"><a name="l01618"></a><span class="lineno"> 1618</span>&#160;<span class="keyword">              end</span>_time(1:7)=fixhd(21:27)</div><div class="line"><a name="l01619"></a><span class="lineno"> 1619</span>&#160;            <span class="keywordflow">ELSE</span></div><div class="line"><a name="l01620"></a><span class="lineno"> 1620</span>&#160;<span class="comment">! Set up start_time from data in LOOKUP(lbyr,icurrll_dump_ptr)</span></div><div class="line"><a name="l01621"></a><span class="lineno"> 1621</span>&#160;              start_time(1)=lookup(lbyr,icurrll_dump_ptr)</div><div class="line"><a name="l01622"></a><span class="lineno"> 1622</span>&#160;              start_time(2)=lookup(lbmon,icurrll_dump_ptr)</div><div class="line"><a name="l01623"></a><span class="lineno"> 1623</span>&#160;              start_time(3)=lookup(lbdat,icurrll_dump_ptr)</div><div class="line"><a name="l01624"></a><span class="lineno"> 1624</span>&#160;              start_time(4)=lookup(lbhr,icurrll_dump_ptr)</div><div class="line"><a name="l01625"></a><span class="lineno"> 1625</span>&#160;              start_time(5)=lookup(lbmin,icurrll_dump_ptr)</div><div class="line"><a name="l01626"></a><span class="lineno"> 1626</span>&#160;              start_time(6)=lookup(lbsec,icurrll_dump_ptr)</div><div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;<span class="keyword">              end</span>_time(1:7)=fixhd(28:34)</div><div class="line"><a name="l01628"></a><span class="lineno"> 1628</span>&#160;<span class="keywordflow">            END IF</span>  <span class="comment">! end if block over daughter/mother record</span></div><div class="line"><a name="l01629"></a><span class="lineno"> 1629</span>&#160;<span class="comment">! DEPENDS ON: pp_head</span></div><div class="line"><a name="l01630"></a><span class="lineno"> 1630</span>&#160;            <span class="keyword">CALL </span><a class="code" href="pp__head_8f90.xhtml#af375be95fa8e37afc539c88bfc02a057" title="LL SUBROUTINE PPHEAD. ">pp_head</a>(                                                &amp;</div><div class="line"><a name="l01631"></a><span class="lineno"> 1631</span>&#160;               im_ident,fixhd,inthd,realhd,                              &amp;</div><div class="line"><a name="l01632"></a><span class="lineno"> 1632</span>&#160;               len_inthd,len_realhd,                                     &amp;</div><div class="line"><a name="l01633"></a><span class="lineno"> 1633</span>&#160;               im,<a class="code" href="stparam_8h.xhtml#aaa70885fffc800e7e244e43cb6660283">is</a>,gr,lfullfield,                                      &amp;</div><div class="line"><a name="l01634"></a><span class="lineno"> 1634</span>&#160;               level(ii),pseudo_level(ii),                               &amp;</div><div class="line"><a name="l01635"></a><span class="lineno"> 1635</span>&#160;               samples,start_step,start_time,end_time,len1_lookup,       &amp;</div><div class="line"><a name="l01636"></a><span class="lineno"> 1636</span>&#160;               extraw_hdr,ipplook(1,icurrll),ipplook(1,icurrll),         &amp;</div><div class="line"><a name="l01637"></a><span class="lineno"> 1637</span>&#160;               global_n_cols_out,num_words,len_buf_words,                &amp;</div><div class="line"><a name="l01638"></a><span class="lineno"> 1638</span>&#160;               global_n_rows_out,nrow_in,srow_in,wcol_in,ecol_in,        &amp;</div><div class="line"><a name="l01639"></a><span class="lineno"> 1639</span>&#160;               lbproc_comp,sample_prd,                                   &amp;</div><div class="line"><a name="l01640"></a><span class="lineno"> 1640</span>&#160;               fcst_prd,comp_accrcy,packing_type,                        &amp;</div><div class="line"><a name="l01641"></a><span class="lineno"> 1641</span>&#160;               st_grid,iwa,                                              &amp;</div><div class="line"><a name="l01642"></a><span class="lineno"> 1642</span>&#160;<span class="comment">! superarray 1-4: zseak_rho,Ck_rho,zseak_theta,Ck_theta</span></div><div class="line"><a name="l01643"></a><span class="lineno"> 1643</span>&#160;               stsuparr(sa_idx(1)),stsuparr(sa_idx(2)),                  &amp;</div><div class="line"><a name="l01644"></a><span class="lineno"> 1644</span>&#160;               stsuparr(sa_idx(3)),stsuparr(sa_idx(4)),                  &amp;</div><div class="line"><a name="l01645"></a><span class="lineno"> 1645</span>&#160;               t_levels,jj,                                              &amp;</div><div class="line"><a name="l01646"></a><span class="lineno"> 1646</span>&#160;               rotate,elf,                                               &amp;</div><div class="line"><a name="l01647"></a><span class="lineno"> 1647</span>&#160;               icode,cmessage)</div><div class="line"><a name="l01648"></a><span class="lineno"> 1648</span>&#160;</div><div class="line"><a name="l01649"></a><span class="lineno"> 1649</span>&#160;            <span class="keywordflow">IF</span> (icode &gt;  0) <span class="keywordflow">GO TO</span> 9999 <span class="comment">! An error has occured</span></div><div class="line"><a name="l01650"></a><span class="lineno"> 1650</span>&#160;<span class="keywordflow">          END IF</span> <span class="comment">! mype == pe_zero</span></div><div class="line"><a name="l01651"></a><span class="lineno"> 1651</span>&#160;</div><div class="line"><a name="l01652"></a><span class="lineno"> 1652</span>&#160;          <span class="keywordflow">IF</span> (grib_out) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01653"></a><span class="lineno"> 1653</span>&#160;<span class="comment">!  Now safe to call grib coder as pphead correctly set apart from</span></div><div class="line"><a name="l01654"></a><span class="lineno"> 1654</span>&#160;<span class="comment">!  length of data</span></div><div class="line"><a name="l01655"></a><span class="lineno"> 1655</span>&#160;<span class="comment">!  Pack data into grib code</span></div><div class="line"><a name="l01656"></a><span class="lineno"> 1656</span>&#160;</div><div class="line"><a name="l01657"></a><span class="lineno"> 1657</span>&#160;            <span class="keywordflow">IF</span> (<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>  ==  pe_zero) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01658"></a><span class="lineno"> 1658</span>&#160;<span class="comment">! DEPENDS ON: grib_file</span></div><div class="line"><a name="l01659"></a><span class="lineno"> 1659</span>&#160;              <span class="keyword">CALL </span><a class="code" href="grib__file_8f90.xhtml#ae9ef8da0f47b5d06ed87aaedd376de69" title="Purpose: This routine acts as an interface between the model and. ">grib_file</a>(len1_lookup,pp_len2_lookup,         &amp;</div><div class="line"><a name="l01660"></a><span class="lineno"> 1660</span>&#160;                 ipplook,ipplook,icurrll,                        &amp;</div><div class="line"><a name="l01661"></a><span class="lineno"> 1661</span>&#160;                 buf,global_pphoriz_out,                         &amp;</div><div class="line"><a name="l01662"></a><span class="lineno"> 1662</span>&#160;                 lenbuf,num_words,ppunit,iwa,grib_packing,       &amp;</div><div class="line"><a name="l01663"></a><span class="lineno"> 1663</span>&#160;                 icode,cmessage)</div><div class="line"><a name="l01664"></a><span class="lineno"> 1664</span>&#160;<span class="keywordflow">            END IF</span>  <span class="comment">! (IF mype == pe_zero)</span></div><div class="line"><a name="l01665"></a><span class="lineno"> 1665</span>&#160;</div><div class="line"><a name="l01666"></a><span class="lineno"> 1666</span>&#160;<span class="comment">! Make sure all processors get the return code</span></div><div class="line"><a name="l01667"></a><span class="lineno"> 1667</span>&#160;</div><div class="line"><a name="l01668"></a><span class="lineno"> 1668</span>&#160;            <span class="keyword">CALL </span>gc_ibcast(101,1,0,nproc,info,icode)</div><div class="line"><a name="l01669"></a><span class="lineno"> 1669</span>&#160;</div><div class="line"><a name="l01670"></a><span class="lineno"> 1670</span>&#160;            <span class="keywordflow">IF</span> (icode &gt;  0)<span class="keywordflow">THEN</span></div><div class="line"><a name="l01671"></a><span class="lineno"> 1671</span>&#160;              cmessage=<span class="stringliteral">&#39;STWORK  : Error in GRIB_FILE&#39;</span></div><div class="line"><a name="l01672"></a><span class="lineno"> 1672</span>&#160;              <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l01673"></a><span class="lineno"> 1673</span>&#160;<span class="keywordflow">            END IF</span></div><div class="line"><a name="l01674"></a><span class="lineno"> 1674</span>&#160;</div><div class="line"><a name="l01675"></a><span class="lineno"> 1675</span>&#160;<span class="keywordflow">          END IF</span>       <span class="comment">! end of grib_out</span></div><div class="line"><a name="l01676"></a><span class="lineno"> 1676</span>&#160;</div><div class="line"><a name="l01677"></a><span class="lineno"> 1677</span>&#160;          iwa = mf_data_missing</div><div class="line"><a name="l01678"></a><span class="lineno"> 1678</span>&#160;          <span class="keywordflow">IF</span> (<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a> == pe_zero) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01679"></a><span class="lineno"> 1679</span>&#160;            iwa = ipplook(lbegin,icurrll) + ipplook(lbnrec,icurrll)</div><div class="line"><a name="l01680"></a><span class="lineno"> 1680</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l01681"></a><span class="lineno"> 1681</span>&#160;</div><div class="line"><a name="l01682"></a><span class="lineno"> 1682</span>&#160;          icurrll=icurrll+1  <span class="comment">! Update the counter</span></div><div class="line"><a name="l01683"></a><span class="lineno"> 1683</span>&#160;          icurrll_dump_ptr=icurrll_dump_ptr+1</div><div class="line"><a name="l01684"></a><span class="lineno"> 1684</span>&#160;<span class="comment">! strictly only needs doing if a daughter record</span></div><div class="line"><a name="l01685"></a><span class="lineno"> 1685</span>&#160;<span class="keywordflow">                 END DO</span>                           <span class="comment">!  End of levels loop -</span></div><div class="line"><a name="l01686"></a><span class="lineno"> 1686</span>&#160;        ft_lastfield(ppunit)=icurrll-1  <span class="comment">! Position of the last field</span></div><div class="line"><a name="l01687"></a><span class="lineno"> 1687</span>&#160;</div><div class="line"><a name="l01688"></a><span class="lineno"> 1688</span>&#160;      <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (output_code == st_dump.OR.output_code == st_secondary)  &amp;</div><div class="line"><a name="l01689"></a><span class="lineno"> 1689</span>&#160;         <span class="keywordflow">THEN</span> <span class="comment">! if(output_code...</span></div><div class="line"><a name="l01690"></a><span class="lineno"> 1690</span>&#160;</div><div class="line"><a name="l01691"></a><span class="lineno"> 1691</span>&#160;<span class="comment">!  4.4 Output to dump or secondary D1 space - this implies some</span></div><div class="line"><a name="l01692"></a><span class="lineno"> 1692</span>&#160;<span class="comment">!      temporal processing possibly.  If destination is secondary D1</span></div><div class="line"><a name="l01693"></a><span class="lineno"> 1693</span>&#160;<span class="comment">!      space, there will be no associated lookup header to update.</span></div><div class="line"><a name="l01694"></a><span class="lineno"> 1694</span>&#160;</div><div class="line"><a name="l01695"></a><span class="lineno"> 1695</span>&#160;<span class="comment">!      Length is calculated from STASHlist</span></div><div class="line"><a name="l01696"></a><span class="lineno"> 1696</span>&#160;<span class="comment">!      NB: Full field length must be coded here, even for partial timeseries</span></div><div class="line"><a name="l01697"></a><span class="lineno"> 1697</span>&#160;</div><div class="line"><a name="l01698"></a><span class="lineno"> 1698</span>&#160;        num_words=stlist(st_dump_output_length,il)/num_levs_out</div><div class="line"><a name="l01699"></a><span class="lineno"> 1699</span>&#160;        icurrll=stlist(st_lookup_ptr,il) <span class="comment">! Location of dump header</span></div><div class="line"><a name="l01700"></a><span class="lineno"> 1700</span>&#160;</div><div class="line"><a name="l01701"></a><span class="lineno"> 1701</span>&#160;        <span class="keywordflow">DO</span>  ii=1,num_levs_out          <span class="comment">!  Start of levels loop!  Reset index for PP_HEAD if there is a levels list of hybrid levels</span></div><div class="line"><a name="l01702"></a><span class="lineno"> 1702</span>&#160;          <span class="keywordflow">IF</span> (stlist(st_output_bottom,il)  &lt;   0 .AND.                &amp;</div><div class="line"><a name="l01703"></a><span class="lineno"> 1703</span>&#160;             lbvcl == ppx_lbvc_hybrid) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01704"></a><span class="lineno"> 1704</span>&#160;            jj = level_list(ii)</div><div class="line"><a name="l01705"></a><span class="lineno"> 1705</span>&#160;<span class="comment">!  or a range of model levels, as they may not be consecutive,</span></div><div class="line"><a name="l01706"></a><span class="lineno"> 1706</span>&#160;          <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (stlist(st_output_bottom,il) &gt;= 1.AND.              &amp;</div><div class="line"><a name="l01707"></a><span class="lineno"> 1707</span>&#160;             stlist(st_output_top,il) &lt;= t_levels) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01708"></a><span class="lineno"> 1708</span>&#160;            jj = level_list(ii)</div><div class="line"><a name="l01709"></a><span class="lineno"> 1709</span>&#160;<span class="comment">!  otherwise use of level index is alright</span></div><div class="line"><a name="l01710"></a><span class="lineno"> 1710</span>&#160;          <span class="keywordflow">ELSE</span></div><div class="line"><a name="l01711"></a><span class="lineno"> 1711</span>&#160;            jj = ii</div><div class="line"><a name="l01712"></a><span class="lineno"> 1712</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l01713"></a><span class="lineno"> 1713</span>&#160;          addr=stlist(st_output_addr,il) <span class="comment">! start address</span></div><div class="line"><a name="l01714"></a><span class="lineno"> 1714</span>&#160;          <span class="keywordflow">IF</span> (what_proc == st_time_series_code.OR.                    &amp;</div><div class="line"><a name="l01715"></a><span class="lineno"> 1715</span>&#160;             what_proc == st_time_series_mean) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01716"></a><span class="lineno"> 1716</span>&#160;</div><div class="line"><a name="l01717"></a><span class="lineno"> 1717</span>&#160;</div><div class="line"><a name="l01718"></a><span class="lineno"> 1718</span>&#160;<span class="comment">!  4.4.1 Timeseries addresses are incremented according to timestep</span></div><div class="line"><a name="l01719"></a><span class="lineno"> 1719</span>&#160;            <span class="keywordflow">IF</span> (stlist(st_freq_code,il) &lt;  1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01720"></a><span class="lineno"> 1720</span>&#160;              icode=st_not_supported</div><div class="line"><a name="l01721"></a><span class="lineno"> 1721</span>&#160;              cmessage=                                               &amp;</div><div class="line"><a name="l01722"></a><span class="lineno"> 1722</span>&#160;                 <span class="stringliteral">&#39;STWORK  : STASHtime for timeseries not supported&#39;</span></div><div class="line"><a name="l01723"></a><span class="lineno"> 1723</span>&#160;              <span class="keywordflow">GO TO</span> 9999 <span class="comment">! got an error so jump to return</span></div><div class="line"><a name="l01724"></a><span class="lineno"> 1724</span>&#160;<span class="keywordflow">            END IF</span></div><div class="line"><a name="l01725"></a><span class="lineno"> 1725</span>&#160;            elap_time=step-stlist(st_start_time_code,il)</div><div class="line"><a name="l01726"></a><span class="lineno"> 1726</span>&#160;            elap_time=(mod(elap_time,stlist(st_period_code,il)))/     &amp;</div><div class="line"><a name="l01727"></a><span class="lineno"> 1727</span>&#160;               stlist(st_freq_code,il)</div><div class="line"><a name="l01728"></a><span class="lineno"> 1728</span>&#160;            addr=addr+(elap_time*pphoriz_out)</div><div class="line"><a name="l01729"></a><span class="lineno"> 1729</span>&#160;<span class="comment">!  On the first time step of a timeseries processing</span></div><div class="line"><a name="l01730"></a><span class="lineno"> 1730</span>&#160;<span class="comment">!  pphoriz_out is the length of the entire output vector</span></div><div class="line"><a name="l01731"></a><span class="lineno"> 1731</span>&#160;<span class="comment">!  including extra data -- on other timesteps it is</span></div><div class="line"><a name="l01732"></a><span class="lineno"> 1732</span>&#160;<span class="comment">!  the length of a single record (data for just one timestep)</span></div><div class="line"><a name="l01733"></a><span class="lineno"> 1733</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l01734"></a><span class="lineno"> 1734</span>&#160;</div><div class="line"><a name="l01735"></a><span class="lineno"> 1735</span>&#160;<span class="comment">!  4.4.2 Temporal processing from ppfield array to D1</span></div><div class="line"><a name="l01736"></a><span class="lineno"> 1736</span>&#160;</div><div class="line"><a name="l01737"></a><span class="lineno"> 1737</span>&#160;<span class="comment">! DEPENDS ON: temporal</span></div><div class="line"><a name="l01738"></a><span class="lineno"> 1738</span>&#160;          <span class="keyword">CALL </span><a class="code" href="temporal_8f90.xhtml#aeea88babfa16863428692dd838de0d23" title="LL Routine: TEMPORAL !&gt;LL. ">temporal</a>(ppfield(1+(ii-1)*pphoriz_out),                  &amp;</div><div class="line"><a name="l01739"></a><span class="lineno"> 1739</span>&#160;             d1(addr+(ii-1)*pphoriz_out),pphoriz_out,extraw,           &amp;</div><div class="line"><a name="l01740"></a><span class="lineno"> 1740</span>&#160;             stlist(1,il),len_stlist,.false.,step,                     &amp;</div><div class="line"><a name="l01741"></a><span class="lineno"> 1741</span>&#160;             icode,cmessage,start_step,rmdi)</div><div class="line"><a name="l01742"></a><span class="lineno"> 1742</span>&#160;</div><div class="line"><a name="l01743"></a><span class="lineno"> 1743</span>&#160;          <span class="keywordflow">IF</span> (icode &gt;  0) <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l01744"></a><span class="lineno"> 1744</span>&#160;         <span class="comment">!  4.4.3 Set up lookup header if destination is main part of D1</span></div><div class="line"><a name="l01745"></a><span class="lineno"> 1745</span>&#160;               <span class="keywordflow">IF</span> (output_code == st_dump) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01746"></a><span class="lineno"> 1746</span>&#160;</div><div class="line"><a name="l01747"></a><span class="lineno"> 1747</span>&#160;<span class="comment">!  4.4.3 Set other information for input to pphead</span></div><div class="line"><a name="l01748"></a><span class="lineno"> 1748</span>&#160;</div><div class="line"><a name="l01749"></a><span class="lineno"> 1749</span>&#160;            gr=stlist(st_gridpoint_code,ilprev)<span class="comment">! Grid point code</span></div><div class="line"><a name="l01750"></a><span class="lineno"> 1750</span>&#160;<span class="comment">! Any time-processed field has a (non-zero) sample_prd set ! this will be translated by pp_head into an lbtim subcode ib of 2</span></div><div class="line"><a name="l01751"></a><span class="lineno"> 1751</span>&#160;            sample_prd=0.0</div><div class="line"><a name="l01752"></a><span class="lineno"> 1752</span>&#160;            <span class="keywordflow">IF</span> (stlist(st_proc_no_code,ilprev) &gt;  st_replace_code)    &amp;</div><div class="line"><a name="l01753"></a><span class="lineno"> 1753</span>&#160;               <span class="keywordflow">THEN</span></div><div class="line"><a name="l01754"></a><span class="lineno"> 1754</span>&#160;              sample_prd=<span class="keywordtype">REAL</span>(stlist(st_freq_code,ilprev)*            &amp;</div><div class="line"><a name="l01755"></a><span class="lineno"> 1755</span>&#160;                 secs_per_period)/<span class="keywordtype">REAL</span>(steps_per_period*3600)</div><div class="line"><a name="l01756"></a><span class="lineno"> 1756</span>&#160;<span class="keywordflow">            END IF</span></div><div class="line"><a name="l01757"></a><span class="lineno"> 1757</span>&#160;</div><div class="line"><a name="l01758"></a><span class="lineno"> 1758</span>&#160;<span class="comment">! Address of whole field is calculated from STASHlist</span></div><div class="line"><a name="l01759"></a><span class="lineno"> 1759</span>&#160;            iwa=stlist(st_dump_output_addr,il)+(ii-1)*num_words</div><div class="line"><a name="l01760"></a><span class="lineno"> 1760</span>&#160;</div><div class="line"><a name="l01761"></a><span class="lineno"> 1761</span>&#160;</div><div class="line"><a name="l01762"></a><span class="lineno"> 1762</span>&#160;<span class="comment">!  4.4.4 Call pphead to set lookup header for field STASHed to D1.</span></div><div class="line"><a name="l01763"></a><span class="lineno"> 1763</span>&#160;<span class="comment">!        Here pass previous_time as well as start_step from temporal</span></div><div class="line"><a name="l01764"></a><span class="lineno"> 1764</span>&#160;<span class="comment">!        if start_step is TRUE then start time will be updated.</span></div><div class="line"><a name="l01765"></a><span class="lineno"> 1765</span>&#160;<span class="comment">!        Value of end time is unimportant as that is handled properly</span></div><div class="line"><a name="l01766"></a><span class="lineno"> 1766</span>&#160;<span class="comment">!        when data is written out to pp file.</span></div><div class="line"><a name="l01767"></a><span class="lineno"> 1767</span>&#160;<span class="comment">!        Note that lbnrec is hardwired to 0 and so too is bacc.</span></div><div class="line"><a name="l01768"></a><span class="lineno"> 1768</span>&#160;</div><div class="line"><a name="l01769"></a><span class="lineno"> 1769</span>&#160;<span class="comment">! DEPENDS ON: pp_head</span></div><div class="line"><a name="l01770"></a><span class="lineno"> 1770</span>&#160;            <span class="keyword">CALL </span><a class="code" href="pp__head_8f90.xhtml#af375be95fa8e37afc539c88bfc02a057" title="LL SUBROUTINE PPHEAD. ">pp_head</a>(                                            &amp;</div><div class="line"><a name="l01771"></a><span class="lineno"> 1771</span>&#160;               im_ident,fixhd,inthd,realhd,                          &amp;</div><div class="line"><a name="l01772"></a><span class="lineno"> 1772</span>&#160;               len_inthd,len_realhd,                                 &amp;</div><div class="line"><a name="l01773"></a><span class="lineno"> 1773</span>&#160;               im,<a class="code" href="stparam_8h.xhtml#aaa70885fffc800e7e244e43cb6660283">is</a>,gr,lfullfield,                                  &amp;</div><div class="line"><a name="l01774"></a><span class="lineno"> 1774</span>&#160;               level(ii),pseudo_level(ii),                           &amp;</div><div class="line"><a name="l01775"></a><span class="lineno"> 1775</span>&#160;               samples,start_step,previous_time,fixhd(28),           &amp;</div><div class="line"><a name="l01776"></a><span class="lineno"> 1776</span>&#160;               len1_lookup,                                          &amp;</div><div class="line"><a name="l01777"></a><span class="lineno"> 1777</span>&#160;               extraw_hdr,lookup(1,icurrll),rlookup(1,icurrll),      &amp;</div><div class="line"><a name="l01778"></a><span class="lineno"> 1778</span>&#160;               global_n_cols_out,num_words,0,                        &amp;</div><div class="line"><a name="l01779"></a><span class="lineno"> 1779</span>&#160;               global_n_rows_out,nrow_in,srow_in,wcol_in,ecol_in,    &amp;</div><div class="line"><a name="l01780"></a><span class="lineno"> 1780</span>&#160;               lbproc_comp,sample_prd,                               &amp;</div><div class="line"><a name="l01781"></a><span class="lineno"> 1781</span>&#160;               fcst_prd,0,packing_type,                              &amp;</div><div class="line"><a name="l01782"></a><span class="lineno"> 1782</span>&#160;               st_grid,iwa,                                          &amp;</div><div class="line"><a name="l01783"></a><span class="lineno"> 1783</span>&#160;<span class="comment">! superarray 1-4: zseak_rho,ck_rho,zseak_theta,ck_theta</span></div><div class="line"><a name="l01784"></a><span class="lineno"> 1784</span>&#160;               stsuparr(sa_idx(1)),stsuparr(sa_idx(2)),              &amp;</div><div class="line"><a name="l01785"></a><span class="lineno"> 1785</span>&#160;               stsuparr(sa_idx(3)),stsuparr(sa_idx(4)),              &amp;</div><div class="line"><a name="l01786"></a><span class="lineno"> 1786</span>&#160;               t_levels,jj,                                          &amp;</div><div class="line"><a name="l01787"></a><span class="lineno"> 1787</span>&#160;               rotate,elf,                                           &amp;</div><div class="line"><a name="l01788"></a><span class="lineno"> 1788</span>&#160;               icode,cmessage)</div><div class="line"><a name="l01789"></a><span class="lineno"> 1789</span>&#160;</div><div class="line"><a name="l01790"></a><span class="lineno"> 1790</span>&#160;            <span class="keywordflow">IF</span> (icode &gt;  0) <span class="keywordflow">GO TO</span> 9999 <span class="comment">! An error has occured</span></div><div class="line"><a name="l01791"></a><span class="lineno"> 1791</span>&#160;</div><div class="line"><a name="l01792"></a><span class="lineno"> 1792</span>&#160;<span class="comment">! Only (optionally) pack fields if no extra words of data</span></div><div class="line"><a name="l01793"></a><span class="lineno"> 1793</span>&#160;            <span class="keywordflow">IF</span> (extraw_hdr  ==  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01794"></a><span class="lineno"> 1794</span>&#160;<span class="comment">! DEPENDS ON: exppxi</span></div><div class="line"><a name="l01795"></a><span class="lineno"> 1795</span>&#160;              lookup(lbpack,icurrll) =                               &amp;</div><div class="line"><a name="l01796"></a><span class="lineno"> 1796</span>&#160;                 <a class="code" href="exppxi_8f90.xhtml#aea84e8b413583d158ed785dc4996ef1f" title="Integer Function to extract data from lookup array PPXI Integer Function to extract data from lookup ...">exppxi</a>( im_ident, <a class="code" href="stparam_8h.xhtml#aaa70885fffc800e7e244e43cb6660283">is</a>, im, ppx_dump_packing,         &amp;</div><div class="line"><a name="l01797"></a><span class="lineno"> 1797</span>&#160;              icode, cmessage)</div><div class="line"><a name="l01798"></a><span class="lineno"> 1798</span>&#160;              <span class="keywordflow">IF</span> (dump_pack == 3 ) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01799"></a><span class="lineno"> 1799</span>&#160;<span class="comment">! Override packing indicator from PPXREF</span></div><div class="line"><a name="l01800"></a><span class="lineno"> 1800</span>&#160;                <a class="code" href="namespacemcica__mod.xhtml#a9511c93167acd262beab1dae312b6264">n1</a> = 0   <span class="comment">!   No packing</span></div><div class="line"><a name="l01801"></a><span class="lineno"> 1801</span>&#160;                lookup(lbpack,icurrll) =                             &amp;</div><div class="line"><a name="l01802"></a><span class="lineno"> 1802</span>&#160;                   (lookup(lbpack,icurrll)/10)*10 + <a class="code" href="namespacemcica__mod.xhtml#a9511c93167acd262beab1dae312b6264">n1</a></div><div class="line"><a name="l01803"></a><span class="lineno"> 1803</span>&#160;<span class="keywordflow">              END IF</span></div><div class="line"><a name="l01804"></a><span class="lineno"> 1804</span>&#160;            <span class="keywordflow">ELSE</span></div><div class="line"><a name="l01805"></a><span class="lineno"> 1805</span>&#160;              lookup(lbpack,icurrll)=0</div><div class="line"><a name="l01806"></a><span class="lineno"> 1806</span>&#160;<span class="keywordflow">            END IF</span></div><div class="line"><a name="l01807"></a><span class="lineno"> 1807</span>&#160;<span class="comment">! Set data type (real/integer) from STASHmaster (-ve for timeseries)</span></div><div class="line"><a name="l01808"></a><span class="lineno"> 1808</span>&#160;            <span class="keywordflow">IF</span> (stlist(st_series_ptr,ilprev) &gt;  0 .OR.                &amp;</div><div class="line"><a name="l01809"></a><span class="lineno"> 1809</span>&#160;               stlist(st_proc_no_code,ilprev) == st_time_series_mean) &amp;</div><div class="line"><a name="l01810"></a><span class="lineno"> 1810</span>&#160;               <span class="keywordflow">THEN</span></div><div class="line"><a name="l01811"></a><span class="lineno"> 1811</span>&#160;<span class="comment">! DEPENDS ON: exppxi</span></div><div class="line"><a name="l01812"></a><span class="lineno"> 1812</span>&#160;              lookup(data_type,icurrll) =                             &amp;</div><div class="line"><a name="l01813"></a><span class="lineno"> 1813</span>&#160;                 -<a class="code" href="exppxi_8f90.xhtml#aea84e8b413583d158ed785dc4996ef1f" title="Integer Function to extract data from lookup array PPXI Integer Function to extract data from lookup ...">exppxi</a>( im_ident, <a class="code" href="stparam_8h.xhtml#aaa70885fffc800e7e244e43cb6660283">is</a>, im, ppx_data_type,            &amp;</div><div class="line"><a name="l01814"></a><span class="lineno"> 1814</span>&#160;              icode, cmessage)</div><div class="line"><a name="l01815"></a><span class="lineno"> 1815</span>&#160;            <span class="keywordflow">ELSE</span></div><div class="line"><a name="l01816"></a><span class="lineno"> 1816</span>&#160;<span class="comment">! DEPENDS ON: exppxi</span></div><div class="line"><a name="l01817"></a><span class="lineno"> 1817</span>&#160;              lookup(data_type,icurrll) =                             &amp;</div><div class="line"><a name="l01818"></a><span class="lineno"> 1818</span>&#160;                 <a class="code" href="exppxi_8f90.xhtml#aea84e8b413583d158ed785dc4996ef1f" title="Integer Function to extract data from lookup array PPXI Integer Function to extract data from lookup ...">exppxi</a>( im_ident, <a class="code" href="stparam_8h.xhtml#aaa70885fffc800e7e244e43cb6660283">is</a>, im, ppx_data_type,             &amp;</div><div class="line"><a name="l01819"></a><span class="lineno"> 1819</span>&#160;              icode, cmessage)</div><div class="line"><a name="l01820"></a><span class="lineno"> 1820</span>&#160;<span class="keywordflow">            END IF</span></div><div class="line"><a name="l01821"></a><span class="lineno"> 1821</span>&#160;            icurrll=icurrll+1 <span class="comment">! Update the counter for the next field</span></div><div class="line"><a name="l01822"></a><span class="lineno"> 1822</span>&#160;</div><div class="line"><a name="l01823"></a><span class="lineno"> 1823</span>&#160;<span class="keywordflow">          END IF</span> <span class="comment">! End of IF output_code=dump</span></div><div class="line"><a name="l01824"></a><span class="lineno"> 1824</span>&#160;</div><div class="line"><a name="l01825"></a><span class="lineno"> 1825</span>&#160;<span class="keywordflow">        END DO</span> <span class="comment">!  End of levels loop</span></div><div class="line"><a name="l01826"></a><span class="lineno"> 1826</span>&#160;      <span class="keywordflow">ELSE</span></div><div class="line"><a name="l01827"></a><span class="lineno"> 1827</span>&#160;        icode=9</div><div class="line"><a name="l01828"></a><span class="lineno"> 1828</span>&#160;        cmessage=<span class="stringliteral">&#39;STWORK  : Illegal output destination in STLIST&#39;</span></div><div class="line"><a name="l01829"></a><span class="lineno"> 1829</span>&#160;        <span class="keywordflow">GO TO</span> 9999</div><div class="line"><a name="l01830"></a><span class="lineno"> 1830</span>&#160;<span class="keywordflow">      END IF</span>      <span class="comment">! End of STLIST output destination IF block</span></div><div class="line"><a name="l01831"></a><span class="lineno"> 1831</span>&#160;</div><div class="line"><a name="l01832"></a><span class="lineno"> 1832</span>&#160;<span class="keywordflow">    END IF</span>      <span class="comment">! END OF S_F IF Block   !  5. End of loop over STASHlist entries - Return to calling routine</span></div><div class="line"><a name="l01833"></a><span class="lineno"> 1833</span>&#160;<span class="keywordflow">     END DO</span></div><div class="line"><a name="l01834"></a><span class="lineno"> 1834</span>&#160;</div><div class="line"><a name="l01835"></a><span class="lineno"> 1835</span>&#160;9999 <span class="keywordflow">CONTINUE</span></div><div class="line"><a name="l01836"></a><span class="lineno"> 1836</span>&#160;  <span class="keywordflow">IF</span> (icode &gt;  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l01837"></a><span class="lineno"> 1837</span>&#160;    <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,<span class="stringliteral">&#39;(A,I5,A,I4,A,I3)&#39;</span>)                      &amp;</div><div class="line"><a name="l01838"></a><span class="lineno"> 1838</span>&#160;       <span class="stringliteral">&#39;STWORK: Error when processing diagnostic section &#39;</span>,  &amp;</div><div class="line"><a name="l01839"></a><span class="lineno"> 1839</span>&#160;       <a class="code" href="stparam_8h.xhtml#aaa70885fffc800e7e244e43cb6660283">is</a>,<span class="stringliteral">&#39;, item &#39;</span>,im,<span class="stringliteral">&#39;, code &#39;</span>,icode</div><div class="line"><a name="l01840"></a><span class="lineno"> 1840</span>&#160;    <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;atmos_physics2&#39;</span>)</div><div class="line"><a name="l01841"></a><span class="lineno"> 1841</span>&#160;    <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a>(<span class="stringliteral">&#39;STWORK&#39;</span>,icode,cmessage)</div><div class="line"><a name="l01842"></a><span class="lineno"> 1842</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l01843"></a><span class="lineno"> 1843</span>&#160;</div><div class="line"><a name="l01844"></a><span class="lineno"> 1844</span>&#160;  <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;STWORK&#39;</span>,zhook_out,zhook_handle)</div><div class="line"><a name="l01845"></a><span class="lineno"> 1845</span>&#160;  <span class="keywordflow">RETURN</span></div><div class="line"><a name="l01846"></a><span class="lineno"> 1846</span>&#160;<span class="keyword">END SUBROUTINE </span><a class="code" href="stwork_8f90.xhtml#a60176015435dd67d80b42122c78e024e" title="Subroutine STWORK !&gt; ">stwork</a></div></div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
