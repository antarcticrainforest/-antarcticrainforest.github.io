<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>UM General Atmosphere: /home/wilfred/PhD/UM/src/control/mpp/regrid_utils_mod.f90 Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="unified_model_logo_2.jpeg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">UM General Atmosphere
   &#160;<span id="projectnumber">8.6</span>
   </div>
   <div id="projectbrief">UK Met Offices Unified Model</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_b81b067251166617f9d0a8c0cfc3a4a9.xhtml">control</a></li><li class="navelem"><a class="el" href="dir_14a8e295637c738acc16dab33472505b.xhtml">mpp</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">regrid_utils_mod.f90</div>  </div>
</div><!--header-->
<div class="contents">
<a href="regrid__utils__mod_8f90.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="keyword">MODULE</span> regrid_utils      <span class="keywordtype">USE </span>um_parvars<span class="keywordtype">, ONLY</span>: g_datastart, g_datastartr, g_blsize,          &amp;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;       fld_type_p, fld_type_r</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespaceereport__mod.xhtml" title="This file belongs in section: Misc. ">ereport_mod</a><span class="keywordtype">, ONLY</span>: <a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;   <span class="keywordtype">USE </span><a class="code" href="namespaceumprintmgr.xhtml" title="This file belongs in section: Misc. ">umprintmgr</a><span class="keywordtype">, ONLY</span> :      &amp;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;      <a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>,                &amp;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;      <a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;  <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;   <span class="keywordtype">INTEGER</span>, <span class="keywordtype">PARAMETER</span> :: atmos_grid = 1, riv_grid = 2</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160; <span class="keyword">CONTAINS</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;   <span class="comment">! returns what processor a grid point lie in for</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;  <span class="comment">! a given pixel and grid type, returns -1 if point</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;  <span class="comment">! could not be found</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">  INTEGER </span><span class="keyword">FUNCTION </span>get_proc_for_gridpt(x, y, grid)       use um_parvars, only: nproc_x, nproc_y, g_pe_index_ew,            &amp;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;         g_pe_index_ns</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;       <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: grid</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="comment">! grid type (e.g. atmso, river ...)    INTEGER, INTENT(IN) :: x, y</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="comment">! x is lambda position and y phi position</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;         <span class="comment">! locals</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="keywordtype">INTEGER</span> proc_num    <span class="keywordtype">INTEGER</span> slam, sphi</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="keywordtype">INTEGER</span> i, j</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keywordtype">LOGICAL</span> found</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;          <span class="comment">! search down lambda        found = .FALSE.</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;       <span class="keywordflow">IF</span>(grid == atmos_grid) <span class="keywordflow">THEN</span>           i = g_pe_index_ew(<a class="code" href="namespaceregrid__types.xhtml#a7ca70352d6d7a250eb1f293e3801d767">x</a>)</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;      j = g_pe_index_ns(<a class="code" href="namespaceregrid__types.xhtml#a2e9e941d93fb2128e1bd6693e2a6da0a">y</a>)</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;      proc_num = j*nproc_x + i</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;         <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span>(grid == riv_grid) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;           slam = 0</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;      sphi = 0</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;      i = 1</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;      j = 1</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;           <span class="keywordflow">DO</span> <span class="keywordflow">WHILE</span>((.NOT. found) .AND. (i &lt;= nproc_x))</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;               slam = slam + g_blsize(1, fld_type_r, i)               <span class="keywordflow">IF</span>(<a class="code" href="namespaceregrid__types.xhtml#a7ca70352d6d7a250eb1f293e3801d767">x</a> &lt;= slam) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;          found = .true.<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;               <span class="keywordflow">IF</span>(.NOT. found) i = i + 1</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;           <span class="comment">! the search down phi</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;      found = .false.</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;           <span class="keywordflow">DO</span> <span class="keywordflow">WHILE</span>((.NOT. found) .AND. (j &lt;= nproc_y))</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                   sphi = sphi + g_blsize(2, fld_type_r, j)</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                   <span class="keywordflow">IF</span>(<a class="code" href="namespaceregrid__types.xhtml#a2e9e941d93fb2128e1bd6693e2a6da0a">y</a> &lt;= sphi) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;          found = .true.<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;               <span class="keywordflow">IF</span>(.NOT. found) j = j + 1<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;           proc_num = (j-1)*nproc_x + i           <span class="comment">! should always find proc either yourself or another proc      ! is condition below is true then something is wrong</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;      <span class="keywordflow">IF</span>((i&gt;nproc_x) .OR. (j&gt;nproc_y)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        proc_num = -1</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keywordflow">      ENDIF</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;         <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;      proc_num  = -1</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;       get_proc_for_gridpt = proc_num</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="keyword">  END FUNCTION </span>get_proc_for_gridpt</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  <span class="comment">! returns the global coordinates as process local subdomain  ! coordinates (local index values)</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="keyword">  SUBROUTINE </span>global_to_local_gridpt(x, y, grid)       use <a class="code" href="namespaceum__parcore.xhtml" title="This file belongs in section: MPP. ">um_parcore</a>, only: <a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;       <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(INOUT)</span> :: <a class="code" href="namespaceregrid__types.xhtml#a7ca70352d6d7a250eb1f293e3801d767">x</a>, <a class="code" href="namespaceregrid__types.xhtml#a2e9e941d93fb2128e1bd6693e2a6da0a">y</a></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="comment">! the global lambda and phi coordinate to convert</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="comment">! to local coordinates</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: grid</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="comment">! set to choose atmosphere or river grid       IF(grid == atmos_grid) THEN</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;      <a class="code" href="namespaceregrid__types.xhtml#a7ca70352d6d7a250eb1f293e3801d767">x</a> = <a class="code" href="namespaceregrid__types.xhtml#a7ca70352d6d7a250eb1f293e3801d767">x</a> - g_datastart(1, <a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>) + 1</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;      <a class="code" href="namespaceregrid__types.xhtml#a2e9e941d93fb2128e1bd6693e2a6da0a">y</a> = <a class="code" href="namespaceregrid__types.xhtml#a2e9e941d93fb2128e1bd6693e2a6da0a">y</a> - g_datastart(2, <a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>) + 1</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (grid == riv_grid) <span class="keywordflow">THEN</span>      <a class="code" href="namespaceregrid__types.xhtml#a7ca70352d6d7a250eb1f293e3801d767">x</a> = <a class="code" href="namespaceregrid__types.xhtml#a7ca70352d6d7a250eb1f293e3801d767">x</a> - g_datastartr(1, <a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>) + 1</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;      <a class="code" href="namespaceregrid__types.xhtml#a2e9e941d93fb2128e1bd6693e2a6da0a">y</a> = <a class="code" href="namespaceregrid__types.xhtml#a2e9e941d93fb2128e1bd6693e2a6da0a">y</a> - g_datastartr(2, <a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>) + 1</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;           <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a>(<span class="stringliteral">&quot;GLOBAL_TO_LOCAL_GRIDPT&quot;</span>, -1,                      &amp;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;           <span class="stringliteral">&quot;incorrect grid number&quot;</span>)</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="keywordflow">         END IF</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="keyword">     END SUBROUTINE </span>global_to_local_gridpt</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="keyword">   SUBROUTINE </span>local_to_global_gridpt(x, y, grid)       use <a class="code" href="namespaceum__parcore.xhtml" title="This file belongs in section: MPP. ">um_parcore</a>, only: <a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;       <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(INOUT)</span> :: <a class="code" href="namespaceregrid__types.xhtml#a7ca70352d6d7a250eb1f293e3801d767">x</a>, <a class="code" href="namespaceregrid__types.xhtml#a2e9e941d93fb2128e1bd6693e2a6da0a">y</a>    <span class="comment">! the local lambda and phi coordinate to convert    ! to global coordinates</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: grid    <span class="comment">! set to choose atmosphere or river grid</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">IF</span>(grid == atmos_grid) <span class="keywordflow">THEN</span>      <a class="code" href="namespaceregrid__types.xhtml#a7ca70352d6d7a250eb1f293e3801d767">x</a> = <a class="code" href="namespaceregrid__types.xhtml#a7ca70352d6d7a250eb1f293e3801d767">x</a> + g_datastart(1, <a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>) - 1</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;      <a class="code" href="namespaceregrid__types.xhtml#a2e9e941d93fb2128e1bd6693e2a6da0a">y</a> = <a class="code" href="namespaceregrid__types.xhtml#a2e9e941d93fb2128e1bd6693e2a6da0a">y</a> + g_datastart(2, <a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>) - 1</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (grid == riv_grid) <span class="keywordflow">THEN</span>      <a class="code" href="namespaceregrid__types.xhtml#a7ca70352d6d7a250eb1f293e3801d767">x</a> = <a class="code" href="namespaceregrid__types.xhtml#a7ca70352d6d7a250eb1f293e3801d767">x</a> + g_datastartr(1, <a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>) - 1</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;      <a class="code" href="namespaceregrid__types.xhtml#a2e9e941d93fb2128e1bd6693e2a6da0a">y</a> = <a class="code" href="namespaceregrid__types.xhtml#a2e9e941d93fb2128e1bd6693e2a6da0a">y</a> + g_datastartr(2, <a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>) - 1</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;      <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a>(<span class="stringliteral">&quot;LOCAL_TO_GLOBAL_GRIDPT&quot;</span>, -1,                        &amp;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;           <span class="stringliteral">&quot;incorrect grid number&quot;</span>)</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="keyword">     END SUBROUTINE </span>local_to_global_gridpt</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;   <span class="comment">! determine if global grid point is within subdomain of calling</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;  <span class="comment">! process</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="keyword">  LOGICAL </span><span class="keyword">FUNCTION </span>gridpt_outside_proc_domain(x, y, grid)</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;       <span class="keywordtype">USE </span><a class="code" href="namespaceum__parcore.xhtml" title="This file belongs in section: MPP. ">um_parcore</a><span class="keywordtype">, ONLY</span>: <a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;       <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(INOUT)</span> :: <a class="code" href="namespaceregrid__types.xhtml#a7ca70352d6d7a250eb1f293e3801d767">x</a>, <a class="code" href="namespaceregrid__types.xhtml#a2e9e941d93fb2128e1bd6693e2a6da0a">y</a></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="comment">! the global lambda and phi grid point    INTEGER, INTENT(IN) :: grid</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="comment">! set to choose type of grid       LOGICAL ok       ok = .FALSE.       IF(grid == atmos_grid) THEN</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;           <span class="keywordflow">IF</span>((<a class="code" href="namespaceregrid__types.xhtml#a7ca70352d6d7a250eb1f293e3801d767">x</a> &lt; g_datastart(1,<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>)) .OR. (<a class="code" href="namespaceregrid__types.xhtml#a7ca70352d6d7a250eb1f293e3801d767">x</a> &gt; (g_datastart(1, <a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>) +    &amp;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;           g_blsize(1, fld_type_p, <a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>)-1))) ok = .true.</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;           <span class="keywordflow">IF</span>((<a class="code" href="namespaceregrid__types.xhtml#a2e9e941d93fb2128e1bd6693e2a6da0a">y</a> &lt; g_datastart(2,<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>)) .OR. (<a class="code" href="namespaceregrid__types.xhtml#a2e9e941d93fb2128e1bd6693e2a6da0a">y</a> &gt; (g_datastart(2, <a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>) +    &amp;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;           g_blsize(2, fld_type_p, <a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>)-1))) ok = .true.</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;         <span class="keywordflow">ELSE</span>      <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a>(<span class="stringliteral">&quot;GRIDPT_OUTSIDE_PROC_DOMAIN&quot;</span>, -1,                    &amp;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;      <span class="stringliteral">&quot;GRID TYPE NOT SUPPORTED&quot;</span>)<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;       gridpt_outside_proc_domain = ok</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="keyword">     END FUNCTION </span>gridpt_outside_proc_domain</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;   <span class="comment">! Convenience routine which scans mpl</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  <span class="comment">! ierror array to determine if an error</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  <span class="comment">! has occured. If an element of ierror is  ! is not equal to zero, error is set to -1 otherwise to 0</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="keyword">  SUBROUTINE </span>error_check_mpl(ierror, lenl, error)       implicit none</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: lenl, ierror(lenl)</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="comment">! array of mpl error codes</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;       <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(OUT)</span> :: error</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="comment">! result of error check, -1=present of error</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="comment">! 0 equals no error</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;       <span class="comment">! local variable</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;       <span class="keywordtype">INTEGER</span> i</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;         error = 0</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;       <span class="keywordflow">DO</span> i=1, lenl</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;      <span class="keywordflow">IF</span>(ierror(i) /= 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        error = 1</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;       <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="keyword">  END SUBROUTINE </span>error_check_mpl</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="comment">! searches recvConcern for a particular global grid</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  <span class="comment">! point. If found the value for the point is  ! retrieved and stored in val, and param found is set</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  <span class="comment">! to true on return otherwise false</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="keyword">  SUBROUTINE </span>find_value(x, y, recv_size, recv_concern_v, val, found)       use <a class="code" href="namespaceregrid__types.xhtml" title="Module: REGRID_TYPES !&gt; ">regrid_types</a></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;       <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: <a class="code" href="namespaceregrid__types.xhtml#a7ca70352d6d7a250eb1f293e3801d767">x</a>, <a class="code" href="namespaceregrid__types.xhtml#a2e9e941d93fb2128e1bd6693e2a6da0a">y</a>    <span class="comment">! lambda and phi position       LOGICAL, INTENT(OUT) :: found    ! set to true if value found, false otherwise</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;       <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(OUT)</span> :: val    <span class="comment">! the value found</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;         <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: recv_size</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="comment">! size of recv_concern array</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;       type(<a class="code" href="structregrid__types_1_1concern.xhtml">concern</a>), <span class="keywordtype">INTENT(IN)</span> :: recv_concern_v(recv_size)</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="comment">! concern that is searched for grid point x,y</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;       <span class="comment">! local    INTEGER i, j, k, len</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;       found = .false.</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    val = 0.          <span class="comment">! search all processors and for    ! grid pt val</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;       j = 1</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordflow">DO</span> <span class="keywordflow">WHILE</span>((j &lt;= recv_size) .AND. (.NOT.found))</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;      len = recv_concern_v(j)%size           <span class="keywordflow">DO</span> i=1, len</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="keywordflow">IF</span>((recv_concern_v(j)%y(i)==<a class="code" href="namespaceregrid__types.xhtml#a2e9e941d93fb2128e1bd6693e2a6da0a">y</a>) .AND. (recv_concern_v(j)%x(i)    &amp;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;             == <a class="code" href="namespaceregrid__types.xhtml#a7ca70352d6d7a250eb1f293e3801d767">x</a>))<span class="keywordflow">THEN</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;          found = .true.          val = recv_concern_v(j)%field(i)<span class="keywordflow">                   END IF</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;      j = j + 1</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="keyword">     END SUBROUTINE </span>find_value</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;   <span class="comment">! provided to retrieve the field value at (xpos, ypos) in concern_max  ! passed returns -1 if not found</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="keyword">  REAL </span><span class="keyword">FUNCTION </span>get_val_from_concern(recv_concern_max, recv_size,    &amp;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;       xpos, ypos, proc, error)</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;       <span class="keywordtype">USE </span><a class="code" href="namespaceregrid__types.xhtml" title="Module: REGRID_TYPES !&gt; ">regrid_types</a></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;       <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: recv_size</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordtype">TYPE</span>(<a class="code" href="structregrid__types_1_1concern__max.xhtml">concern_max</a>), <span class="keywordtype">INTENT(IN)</span> :: recv_concern_max(recv_size)</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="comment">!    INTEGER, INTENT(IN) :: xpos, ypos, proc</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(OUT)</span> :: error</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;       <span class="comment">! local variable    INTEGER i, j, k, npts</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;       error = 0</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;       <span class="comment">! search through all processors    DO i=1, recv_size</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;           <span class="keywordflow">IF</span>(recv_concern_max(i)%proc_num == proc) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        npts = recv_concern_max(i)%size             <span class="keywordflow">DO</span> j=1, npts          <span class="keywordflow">IF</span>((recv_concern_max(i)%x(j) == xpos) .AND. (               &amp;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;               &amp; recv_concern_max(i)%y(j) &amp;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;               &amp;  == ypos) .AND. recv_concern_max(i)%contribute(j)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            get_val_from_concern = recv_concern_max(i)%field(j)</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            <span class="keywordflow">RETURN</span><span class="keywordflow">          END IF</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="keywordflow">        END DO</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="keywordflow">         END DO</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    error = -1</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    get_val_from_concern = 0.</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordflow">RETURN</span>  end<span class="keyword"> FUNCTION </span>get_val_from_concern</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="comment">!  ! sorts each element of contribution info array</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  <span class="comment">! that is weights are now in ascending order of their  ! global 1-D index  !</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="keyword">  SUBROUTINE </span>sort_contributors(contribution, lenl, global_row_length,   &amp;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;       error)       use <a class="code" href="namespaceregrid__types.xhtml" title="Module: REGRID_TYPES !&gt; ">regrid_types</a></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keywordtype">USE </span><a class="code" href="namespaceum__parcore.xhtml" title="This file belongs in section: MPP. ">um_parcore</a><span class="keywordtype">, ONLY</span>: <a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;       <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: global_row_length, lenl</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keywordtype">TYPE</span>(contribution_info), <span class="keywordtype">INTENT(INOUT)</span> :: contribution(lenl)</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="comment">! the target grid local rows</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(OUT)</span> :: error</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="comment">! set to 0 if not error occurs, to -1 if an error occurs</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;       <span class="comment">! local variables    INTEGER i, j, size_c, largest_size, rank, cg_index, g_index, k</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">ALLOCATABLE</span> :: xtemp(:), ytemp(:), redirect(:), proctemp(:)</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keywordtype">REAL</span>, <span class="keywordtype">ALLOCATABLE</span> :: weight_temp(:)        <span class="comment">! set error flag</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    error = 0</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;       size_c = 0</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    largest_size = 0</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;       <span class="comment">! get largest contribution info and allocate with    ! that so we don&#39;t have to worry about src points with larger    ! number of contributions</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keywordflow">DO</span> i=1, lenl           size_c = contribution(i)%size</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;      <span class="keywordflow">IF</span>(size_c &gt; largest_size) largest_size = size_c</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="keywordflow">         END DO</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;       <span class="comment">! contributions cannot be less than zero</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keywordflow">IF</span>(size_c &lt; 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;      <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&quot;Error in SORT_CONTRIBUTION, SIZE &lt; 0&quot;</span>,             &amp;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;           <span class="stringliteral">&quot;, Exiting!&quot;</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;      <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;regrid_utils_mod&#39;</span>)</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;      <span class="keyword">WRITE</span>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,*) <span class="stringliteral">&quot;SIZE: &quot;</span>, size_c</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;      <span class="keyword">CALL </span><a class="code" href="namespaceumprintmgr.xhtml#aae44897e556705dbf5e945a26538be9a">umprint</a>(<a class="code" href="namespaceumprintmgr.xhtml#a38275af5a575d53ab2b03beb38d249b5">ummessage</a>,src=<span class="stringliteral">&#39;regrid_utils_mod&#39;</span>)</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;      error = -1</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;      <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;          <span class="keyword">ALLOCATE</span>(xtemp(largest_size))</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keyword">ALLOCATE</span>(ytemp(largest_size))</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keyword">ALLOCATE</span>(weight_temp(largest_size))</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keyword">ALLOCATE</span>(proctemp(largest_size))</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keyword">ALLOCATE</span>(redirect(largest_size))</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;       <span class="comment">! iterate over each contribution info and arrange in    ! ascending order (globalindex). Its really comparison sort</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keywordflow">DO</span> i=1, lenl</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;           size_c = contribution(i)%size</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;      <span class="keywordflow">DO</span> j=1, size_c                  g_index = (contribution(i)%y(j)-1)*global_row_length +          &amp;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;             contribution(i)%x(j)               rank = 1</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="comment">! determine target&#39;s rank</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        <span class="keywordflow">DO</span> <a class="code" href="arg__atm__fields_8h.xhtml#a746e8233330aed561ffa6fdbd8b8fea9">k</a>=1, size_c</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                   <span class="comment">! don&#39;t compare to yourself</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;          <span class="keywordflow">IF</span>(<a class="code" href="arg__atm__fields_8h.xhtml#a746e8233330aed561ffa6fdbd8b8fea9">k</a> /= j) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            cg_index = (contribution(i)%y(<a class="code" href="arg__atm__fields_8h.xhtml#a746e8233330aed561ffa6fdbd8b8fea9">k</a>)-1)*global_row_length +     &amp;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                 contribution(i)%x(<a class="code" href="arg__atm__fields_8h.xhtml#a746e8233330aed561ffa6fdbd8b8fea9">k</a>)</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                       <span class="keywordflow">IF</span>(g_index &gt; cg_index) rank = rank + 1</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                       <span class="comment">! should not be possible to have target appear twice</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            <span class="keywordflow">IF</span>(g_index == cg_index) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;              error = -1</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;              <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="keywordflow">            END IF</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="keywordflow">                 END DO</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;               redirect(j) = rank</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;           <span class="comment">! now sort by applying redirection      DO j=1, size_c</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        xtemp(redirect(j)) = contribution(i)%x(j)        ytemp(redirect(j)) = contribution(i)%y(j)</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        weight_temp(redirect(j)) = contribution(i)%weight(j)</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        proctemp(redirect(j)) = contribution(i)%contrib_proc(j)</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;           <span class="keywordflow">DO</span> j=1, size_c</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        contribution(i)%x(j) = xtemp(j)</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        contribution(i)%y(j) = ytemp(j)        contribution(i)%weight(j) = weight_temp(j)        contribution(i)%contrib_proc(j) = proctemp(j)<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="keywordflow">         END DO</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;         <span class="comment">! release resources used for sort</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keyword">DEALLOCATE</span>(xtemp)</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keyword">DEALLOCATE</span>(ytemp)</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keyword">DEALLOCATE</span>(weight_temp)</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keyword">DEALLOCATE</span>(redirect)</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keyword">DEALLOCATE</span>(proctemp)</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;       <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="keyword">  END SUBROUTINE </span>sort_contributors</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="keyword"> END MODULE </span>regrid_utils</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160; </div></div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
