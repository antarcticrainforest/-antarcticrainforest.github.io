<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>UM General Atmosphere: /home/wilfred/PhD/UM/src/atmosphere/dynamics_advection/eg_bi_linear_h.f90 Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="unified_model_logo_2.jpeg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">UM General Atmosphere
   &#160;<span id="projectnumber">8.6</span>
   </div>
   <div id="projectbrief">UK Met Offices Unified Model</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_1df14ea1ac826f73bc3062fa8a76e0c2.xhtml">atmosphere</a></li><li class="navelem"><a class="el" href="dir_cd31b8e5b091f70cb512ede7e9775b9c.xhtml">dynamics_advection</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">eg_bi_linear_h.f90</div>  </div>
</div><!--header-->
<div class="contents">
<a href="eg__bi__linear__h_8f90.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="keyword">SUBROUTINE </span><a class="code" href="eg__bi__linear__h_8f90.xhtml#acfe9665a80b7970dfbe44aa69fd38dd2" title="Subroutine Interface: ">eg_bi_linear_h</a>(                                            &amp;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;                       data_in, lambda_out, phi_out, pnt_type,        &amp;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;                       dim_i_in, dim_j_in, dim_k_in,                  &amp;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;                       dim_i_out, dim_j_out, dim_k_out,               &amp;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;                       model_domain,                                  &amp;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;                       me, n_procx,                                   &amp;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;                       halo_i, halo_j, datastart,                     &amp;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;                       g_row_length, g_i_pe, at_extremity,            &amp;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;                       proc_row_group, data_out)</div><div class="line"><a name="l00014"></a><span class="lineno"><a class="line" href="eg__bi__linear__h_8f90.xhtml#acfe9665a80b7970dfbe44aa69fd38dd2">   14</a></span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="keywordtype">USE </span>mpl<span class="keywordtype">, ONLY</span> :                                                       &amp;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;  mpl_integer,                                                        &amp;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;  mpl_real,                                                           &amp;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;  mpl_address_kind,                                                   &amp;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;  mpl_status_size</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespacelocate__hdps__mod.xhtml">locate_hdps_mod</a></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespacemissing__data__mod.xhtml" title="*****************************COPYRIGHT************************************** ************************...">missing_data_mod</a><span class="keywordtype">, ONLY</span>:                                           &amp;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <a class="code" href="namespacemissing__data__mod.xhtml#aff73e8cc7491c6c6a6b2bcc14c172e20">imdi</a></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespaceum__types.xhtml" title="Code Owner: See Unified Model Code owners HTML page. ">um_types</a><span class="keywordtype">, ONLY</span>: <a class="code" href="namespaceum__types.xhtml#af5fbacdfa62f7f4f6d3aaab1a1149e9a">integer32</a></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keywordtype">USE </span>parkind1<span class="keywordtype">, ONLY</span>: jpim, jprb       <span class="comment">!DrHook</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keywordtype">USE </span>yomhook<span class="keywordtype">,  ONLY</span>: lhook, dr_hook   <span class="comment">!DrHook</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespaceereport__mod.xhtml" title="This file belongs in section: Misc. ">ereport_mod</a><span class="keywordtype">, ONLY</span> : <a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespaceum__parparams.xhtml" title="This file belongs in section: MPP. ">um_parparams</a></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">! Description:</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">! Code description:</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="keywordtype">REAL(KIND=jprb)</span>               :: zhook_handle</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="keywordtype">INTEGER</span>                                                                &amp;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  dim_i_in                                                             &amp;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;              <span class="comment">! Dimension of Data_in in i direction.</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;, dim_j_in                                                             &amp;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;              <span class="comment">! Dimension of Data_in in j direction.</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;, dim_k_in                                                             &amp;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;              <span class="comment">! Dimension of Data_in in k direction.</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;, dim_i_out                                                            &amp;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;              <span class="comment">! Dimension of Data_out in i direction.</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;, dim_j_out                                                            &amp;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;              <span class="comment">! Dimension of Data_out in j direction.</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;, dim_k_out                                                            &amp;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;              <span class="comment">! Dimension of Data_out in j direction.</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;, pnt_type                                                             &amp;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;              <span class="comment">! grid point type</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;, me                                                                   &amp;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;              <span class="comment">! My processor number</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;, n_procx                                                              &amp;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;              <span class="comment">! Number of processors in longitude</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;, halo_i                                                               &amp;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;              <span class="comment">! Size of halo in i direction.</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;, halo_j                                                               &amp;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;              <span class="comment">! Size of halo in j direction.</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;, datastart(3)                                                         &amp;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;               <span class="comment">! First gridpoints held by this processor.</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;, g_row_length                                                         &amp;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;               <span class="comment">! global number of points on a row</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;, g_i_pe(1-halo_i:g_row_length+halo_i)                                 &amp;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                                       <span class="comment">! processor on my</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;             <span class="comment">! processor-row holding a given value in i direction</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;, proc_row_group <span class="comment">! Group id for processors on the same row</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="keywordtype">INTEGER</span>                                                                &amp;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;  model_domain     <span class="comment">! holds integer code for model domain</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="keywordtype">REAL</span>                                                                   &amp;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  data_in (1-halo_i:dim_i_in+halo_i, 1-halo_j:dim_j_in+halo_j,         &amp;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;           dim_k_in)                 <span class="comment">! data to be interpolated</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="keywordtype">REAL</span>                                                                   &amp;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  lambda_out (dim_i_out, dim_j_out,dim_k_in)                           &amp;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                                              <span class="comment">! Lambda</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                                     <span class="comment">! co-ordinate of</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                                     <span class="comment">! output data on</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                                     <span class="comment">! input.</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;, phi_out(dim_i_out, dim_j_out, dim_k_in)     <span class="comment">! Phi Co-ordinate</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                                     <span class="comment">! of output data</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                                     <span class="comment">! on input.</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="keywordtype">LOGICAL</span>                                                                &amp;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;  at_extremity(4)  <span class="comment">! Indicates if this processor is at north,</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                   <span class="comment">! south, east or west of the processor grid</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">! Arguments with Intent OUT. ie: Output variables.</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="keywordtype">REAL</span>                                                                   &amp;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  data_out (dim_i_out, dim_j_out, dim_k_out) <span class="comment">! data interpolated</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                                             <span class="comment">! to desired locatns.</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">! Local Variables.</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">! scalars</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="keywordtype">INTEGER</span>                                                                &amp;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  i, j, k, kk                                                          &amp;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                       <span class="comment">! Loop indices</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;, j0, j1                                                               &amp;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;, index</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="keywordtype">REAL</span>                                                                   &amp;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  recip_delta_lambda                                                   &amp;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;, recip_delta_phi                                                      &amp;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;, temp                                                                 &amp;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;, wk</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">! arrays</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="keywordtype">INTEGER (KIND=integer32)</span> ::                                            &amp;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  i_out (dim_i_out, dim_j_out, dim_k_out)                              &amp;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;, j_out (dim_i_out, dim_j_out, dim_k_out)</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="keywordtype">REAL</span>                                                                   &amp;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  weight_lambda (dim_i_out, dim_j_out, dim_k_out)                      &amp;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;, weight_phi (dim_i_out, dim_j_out, dim_k_out)</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">! Varibles applied in the &quot;compute-on-demand&quot; strategy</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="keywordtype">INTEGER</span>                                                                &amp;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;  ime, ibase, irecv, my_imin, my_imax, dim_e_out                       &amp;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;, nsend, nrecv, info, comm_len, itmp, sender                           &amp;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;, my_iminp, my_imaxp</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">PARAMETER</span> :: on_demand_size = 80</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="keywordtype">INTEGER (KIND=integer32)</span> ::                                            &amp;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;  i_store(dim_k_out*dim_i_out*on_demand_size,0:n_procx-1)              &amp;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;, j_store(dim_k_out*dim_i_out*on_demand_size,0:n_procx-1)              &amp;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;, k_store(dim_k_out*dim_i_out*on_demand_size,0:n_procx-1)              &amp;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;, i_out_e(dim_k_out*dim_i_out*on_demand_size)                          &amp;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;, j_out_e(dim_k_out*dim_i_out*on_demand_size)</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="keywordtype">INTEGER</span>                                                                &amp;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  n_sendto(0:n_procx-1), n_recvfrom(0:n_procx-1)                       &amp;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;, sp_send(0:n_procx-1), sp_levels(0:n_procx-1,dim_k_out)               &amp;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;, np_send(0:n_procx-1), np_levels(0:n_procx-1,dim_k_out)</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="keywordtype">REAL</span>                                                                   &amp;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;  weight_lambda_e(dim_k_out*dim_i_out*on_demand_size)                  &amp;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;, weight_phi_e(dim_k_out*dim_i_out*on_demand_size)                     &amp;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;, data_out_e(dim_k_out*dim_i_out*on_demand_size)                       &amp;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;, recv_data(dim_k_out*dim_i_out*on_demand_size,0:n_procx-1)            &amp;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;, bcast_data(4*dim_k_out)</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="keywordtype">INTEGER</span> dsm1</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">! Stuff for improved commsINTEGER :: nsend_msg</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="keywordtype">INTEGER</span> :: nrecv_msg</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="keywordtype">INTEGER (KIND=mpl_address_kind)</span> :: extentINTEGER (kind=mpl_address_kind) :: lb    <span class="keywordtype">INTEGER</span> :: num_reqsinteger :: request(0:n_procx-1)<span class="keywordtype">INTEGER</span> :: rec_request(0:n_procx-1)<span class="keywordtype">INTEGER</span> :: send_stat(mpl_status_size,0:n_procx-1)<span class="keywordtype">INTEGER</span> :: recv_stats(mpl_status_size,0:n_procx-1)<span class="keywordtype">INTEGER</span> :: recv_stat(mpl_status_size)<span class="keywordtype">INTEGER</span>, <span class="keywordtype">SAVE</span> :: mpl_send_type = imdiinteger :: oldtypes(0:1)<span class="keywordtype">INTEGER</span> :: blockcounts(0:1)<span class="keywordtype">INTEGER (KIND=mpl_address_kind)</span> :: offsets(0:1)</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="keyword">TYPE</span> sendrecv_type  sequence  <span class="keywordtype">INTEGER</span>  :: i_out  <span class="keywordtype">INTEGER</span>  :: j_out  <span class="keywordtype">REAL</span>     :: weight_lambda  <span class="keywordtype">REAL</span>     :: weight_phiEND TYPE</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;type(sendrecv_type) :: send_array(dim_k_out*g_row_length,0:n_procx)type(sendrecv_type) :: recv_array(dim_k_out*g_row_length,0:n_procx)</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment">! Functions: None</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">! 1.0 Start of subroutine code: perform the calculation.</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;EG_BI_LINEAR_H&#39;</span>,zhook_in,zhook_handle)</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment">! ! Section 1.   Extend input data and r arrays to bigger area to</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">!              allow interpolation to be done without having to re-do</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">!              any end points.</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">! No extension required in the parallel version - taken care of by</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">! swap_bounds.</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">! ! Section 2.   For each output point find i,j so that the point on the</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">!              output grid lies between i and i+1, j and j+1</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment">! w points.</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;dsm1 = datastart(2)-1</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="keyword">CALL </span><a class="code" href="namespacelocate__hdps__mod.xhtml#a468a943405816b5adac7ccd99e88aa04">locate_hdps</a>(i_out, j_out, weight_lambda, weight_phi,                   &amp;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                 lambda_out, phi_out, dsm1,                                 &amp;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                 pnt_type, dim_i_out, dim_j_out, dim_k_out)</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="keywordflow">IF</span> ( n_procx &gt; 1 ) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;  <span class="keywordflow">IF</span> ( model_domain == <a class="code" href="namespacedomain__params.xhtml#aa4621b29b8014dcc312af1558bc008e3">mt_global</a> ) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">! Send the points outside my region to the appropriate processor for</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment">! interpolation. Only performed if the domain is decomposed in the</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment">! i direction and not performed for LAM versions of the model.</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment">! The first and last point I can interpolate in, based on available</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">! data on this processor</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    my_imin = datastart(1) - halo_i + 2</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    my_imax = datastart(1) + dim_i_out - 1 + halo_i - 2</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment">!   values for use in polar row to ensure pole is only calculated on one</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">!   processor.</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    my_iminp = datastart(1)</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    my_imaxp = datastart(1)+dim_i_out-1</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordflow">IF</span>(at_extremity(<a class="code" href="namespaceum__parparams.xhtml#adb75b95f9b9de945d4e1c15a922e9eab">pwest</a>) ) my_iminp = my_imin</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keywordflow">IF</span>(at_extremity(<a class="code" href="namespaceum__parparams.xhtml#a6419e182a3656885cf3147466ab705ea">peast</a>) ) my_imaxp = my_imax</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">!   The base processor on this row, and my address relative to that</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment">!   processor</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    ibase = (me/n_procx) * n_procx</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    ime = me - ibase</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keywordflow">DO</span> i = 0, n_procx-1</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;      n_sendto(i) = 0</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    j0 = 1</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    j1 = dim_j_out</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;  <span class="keywordflow">DO</span> k = 1, dim_k_out</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keywordflow">DO</span> j = j0, j1</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;      <span class="keywordflow">DO</span> i = 1, dim_i_out</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="keywordflow">IF</span> (i_out(i,j,k)  &gt;=  my_imin .AND.                           &amp;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            i_out(i,j,k)  &lt;=  my_imax) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment">! Process locally, so find the local destination</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;          i_out(i,j,k) = i_out(i,j,k) - datastart(1) + 1</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment">! Send to a remote processor, given by the array g_i_pe</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;          irecv = g_i_pe(i_out(i,j,k))</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;          n_sendto(irecv) = n_sendto(irecv) + 1</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;          itmp = n_sendto(irecv)</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;          send_array(itmp,irecv) % i_out = i_out(i,j,k)          send_array(itmp,irecv) % j_out = j_out(i,j,k)          send_array(itmp,irecv) % weight_lambda = weight_lambda(i,j,k)          send_array(itmp,irecv) % weight_phi = weight_phi(i,j,k)          i_store(itmp,irecv) = i</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;          j_store(itmp,irecv) = j</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;          k_store(itmp,irecv) = k</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment">!! fix to stop out of memory address calls</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;          i_out(i,j,k)=i</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;          j_out(i,j,k)=j</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;  <span class="comment">! Counts can be distributed via an alltoall with the row communicator</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;  <span class="keyword">CALL </span>mpl_alltoall(n_sendto,       1,    mpl_integer,               &amp;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                    n_recvfrom,     1,    mpl_integer,               &amp;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                    proc_row_group, info)</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  <span class="comment">! Get types setup if not done</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;  <span class="keywordflow">IF</span> (mpl_send_type == <a class="code" href="namespacemissing__data__mod.xhtml#aff73e8cc7491c6c6a6b2bcc14c172e20">imdi</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    offsets(0) = 0</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    oldtypes(0) = mpl_integer</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    blockcounts(0) = 2</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keyword">CALL </span>mpl_type_get_extent(mpl_integer, lb, extent, info)</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    offsets(1) = 2 * extent</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    oldtypes(1) = mpl_real</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    blockcounts(1) = 2</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="keyword">CALL </span>mpl_type_create_struct(2, blockcounts, offsets, oldtypes,   &amp;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                         mpl_send_type, info)</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keyword">CALL </span>mpl_type_commit(mpl_send_type, info)</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  <span class="comment">! Send/Recv data in one hit using isend and recv</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;  num_reqs = 0</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;  <span class="keywordflow">DO</span> i = 0, n_procx-1</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keywordflow">IF</span> (n_sendto(i)  &gt;   0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;      <span class="keyword">CALL </span>mpl_isend(send_array(1,i), n_sendto(i), mpl_send_type,    &amp;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                     i, 10, proc_row_group, request(num_reqs), info )</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;      num_reqs = num_reqs + 1</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;  <span class="keywordflow">DO</span> i = 0, n_procx-1</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="keywordflow">IF</span> (n_recvfrom(i)  &gt;   0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;      <span class="keyword">CALL </span>mpl_recv(recv_array(1,i), n_recvfrom(i), mpl_send_type, &amp;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                    i, 10, proc_row_group, recv_stat, info )</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;  <span class="keywordflow">IF</span> (num_reqs &gt; 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="keyword">CALL </span>mpl_waitall(num_reqs, request, send_stat, info)</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="keywordflow">ELSE</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;  <span class="keywordflow">DO</span> k = 1, dim_k_out</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="keywordflow">DO</span> j = 1, dim_j_out</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;       <span class="keywordflow">DO</span> i = 1, dim_i_out</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        i_out(i,j,k) = i_out(i,j,k) - datastart(1) + 1</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="keywordflow">END IF</span> <span class="comment">! model_domain == mt_Global</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="keywordflow">END IF</span> <span class="comment">! n_procx &gt; 1</span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="comment">! ! Section 3.   Perform required Interpolation.</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="comment">! DEPENDS ON: bi_linear</span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="keyword">CALL </span><a class="code" href="bi__linear_8f90.xhtml#a2d2bec3776651c0e7f3ea8621eda06a6" title="Subroutine Bi_Linear. ">bi_linear</a> (dim_i_out, dim_j_out, dim_k_out,                      &amp;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                dim_i_in, dim_j_in, dim_k_in,                         &amp;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                halo_i, halo_j, data_in,                              &amp;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                i_out, j_out, weight_lambda, weight_phi,              &amp;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                data_out)</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="keywordflow">IF</span> ( n_procx &gt; 1 .AND. model_domain == <a class="code" href="namespacedomain__params.xhtml#aa4621b29b8014dcc312af1558bc008e3">mt_global</a> ) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;  dim_e_out = 0</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;  <span class="keywordflow">DO</span> i = 0, n_procx-1</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <span class="keywordflow">IF</span> (n_recvfrom(i)  &gt;   0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;      <span class="keywordflow">DO</span> j = 1, n_recvfrom(i)</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        dim_e_out = dim_e_out + 1</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        i_out_e(dim_e_out) = recv_array(j,i) % i_out -datastart(1)+1        j_out_e(dim_e_out) = recv_array(j,i) % j_out        weight_lambda_e(dim_e_out) = recv_array(j,i) % weight_lambda        weight_phi_e(dim_e_out) = recv_array(j,i) % weight_phi<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;  <span class="keywordflow">IF</span> (dim_e_out  &gt;   dim_k_out*dim_i_out*on_demand_size) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;     <span class="keyword">Call </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a>(<span class="stringliteral">&quot;eg_bi_linear_h&quot;</span>, dim_e_out,                        &amp;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                  <span class="stringliteral">&quot;over-writing due to dim_e_out size&quot;</span> )</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;  <span class="keywordflow">IF</span> (dim_e_out  &gt;   0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="comment">! DEPENDS ON: bi_linear</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="keyword">CALL </span><a class="code" href="bi__linear_8f90.xhtml#a2d2bec3776651c0e7f3ea8621eda06a6" title="Subroutine Bi_Linear. ">bi_linear</a> (dim_e_out, 1, 1,                                  &amp;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                    dim_i_in, dim_j_in, dim_k_in,                     &amp;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                    halo_i, halo_j, data_in,                          &amp;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                    i_out_e, j_out_e,                                 &amp;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                    weight_lambda_e, weight_phi_e,                    &amp;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                    data_out_e)</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;  nsend = 1</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;  nsend_msg = 0</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;  <span class="keywordflow">DO</span> i = 0, n_procx-1</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <span class="keywordflow">IF</span> (n_recvfrom(i)  &gt;   0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;      comm_len = n_recvfrom(i)</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;      <span class="keyword">CALL </span>mpl_isend(data_out_e(nsend), comm_len, mpl_real, i, 40,    &amp;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                     proc_row_group, request(nsend_msg), info)</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;      nsend_msg = nsend_msg + 1</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;      nsend = nsend + n_recvfrom(i)</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;  nrecv_msg = 0</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;  <span class="keywordflow">DO</span> i = 0, n_procx-1</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="keywordflow">IF</span> (n_sendto(i)  &gt;   0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;      comm_len = n_sendto(i)</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;      <span class="keyword">CALL </span>mpl_irecv(recv_data(1,i), comm_len, mpl_real, i, 40,       &amp;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                     proc_row_group, rec_request(nrecv_msg), info)</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;      nrecv_msg = nrecv_msg + 1</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="comment">! Potential to move this wait to end of routine.</span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;  <span class="keywordflow">IF</span> (nsend_msg &gt; 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <span class="keyword">CALL </span>mpl_waitall(nsend_msg, request, send_stat, info)</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="comment">! This wait could possibly utilise a waitany so copies can happen</span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="comment">! before all data is received</span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;  <span class="keywordflow">IF</span> (nrecv_msg &gt; 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="keyword">CALL </span>mpl_waitall(nrecv_msg, rec_request, recv_stats, info)</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <span class="keywordflow">DO</span> i = 0, n_procx-1</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;      <span class="keywordflow">IF</span> (n_sendto(i)  &gt;   0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        <span class="keywordflow">DO</span> j = 1, n_sendto(i)</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;          data_out(i_store(j,i), j_store(j,i), k_store(j,i)) = recv_data(j,i)</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;<span class="keywordflow">        END DO</span></div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="keywordflow">END IF</span> <span class="comment">!  n_procx &gt; 1 .and. model_domain == mt_Global</span></div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="comment">! End of routine.</span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;EG_BI_LINEAR_H&#39;</span>,zhook_out,zhook_handle)</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="keywordflow">RETURN</span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="keyword">END SUBROUTINE </span><a class="code" href="eg__bi__linear__h_8f90.xhtml#acfe9665a80b7970dfbe44aa69fd38dd2" title="Subroutine Interface: ">eg_bi_linear_h</a></div></div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
