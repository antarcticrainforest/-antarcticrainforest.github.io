<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>UM General Atmosphere: /home/wilfred/PhD/UM/src/control/c_code/c_io_byteswap.c Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="unified_model_logo_2.jpeg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">UM General Atmosphere
   &#160;<span id="projectnumber">8.6</span>
   </div>
   <div id="projectbrief">UK Met Offices Unified Model</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_b81b067251166617f9d0a8c0cfc3a4a9.xhtml">control</a></li><li class="navelem"><a class="el" href="dir_3870c6a11f19197dc24c93b76d301a96.xhtml">c_code</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">c_io_byteswap.c</div>  </div>
</div><!--header-->
<div class="contents">
<a href="c__io__byteswap_8c.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#if defined(C95_2B)</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">/******************************COPYRIGHT*******************************/</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">/* (C) Crown copyright Met Office. All rights reserved.               */</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">/* For further details please refer to the file COPYRIGHT.txt         */</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">/* which you should have received as part of this distribution.       */</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">/* *****************************COPYRIGHT******************************/</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="c__io__layers_8h.xhtml">c_io_layers.h</a>&quot;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#if defined (BUFRD_IO)</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * DEPENDS ON : c_io_wbuffering</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#define CIO_NEXT_LAYER CIO_WBUFFERING</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#define CIO_NEXT_LAYER CIO_LIBC</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="c__io_8h.xhtml">c_io.h</a>&quot;</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="c__io__byteswap_8h.xhtml">c_io_byteswap.h</a>&quot;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">/*  Functions in this file:</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment"> *  Layer interfaces:</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment"> *    init          : Determine endianness and pass through</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment"> *    fini          : pass through</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment"> *    open          : pass through</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment"> *    close         : pass through</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment"> *    in            : pass through, then byteswap</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment"> *    out           : byteswap, then pass through</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment"> *    getpos        : pass through</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment"> *    setpos        : pass through</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment"> *    change_mode   : pass through</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"> *  Implentation auxiliary routines:</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment"> *    c_io_isMachineBigEndian : determine machine endianness</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment"> *    c_io_shouldByteSwap     : report whether a byteswap is needed</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"> *    c_io_byteswap           : byteswap a supplied array with specified</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment"> *                              word length and element count</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment"> */</span>  </div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;int64_t c_io_byteswap_init(<a class="code" href="structc__io__init__t.xhtml">c_io_init_t</a> * <a class="code" href="c__io_8h.xhtml#a7ed5ff2a03f7684212b28aa1968622f1">params</a>)</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;  <a class="code" href="c__io_8h.xhtml#a32c4d3ceffa2ab65c1d300842cc3d407">machineEndian</a>=<a class="code" href="c__io_8h.xhtml#a8ba83d09160bd55999b0630dccc467aead13338b1c7186aed834aa25dbb65b321">littleEndian</a>;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  <a class="code" href="c__io_8h.xhtml#a94d8b906ba6bbe4e6d8c08cfe8163ee6">fileEndian</a>   =<a class="code" href="c__io_8h.xhtml#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b">bigEndian</a>;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  <a class="code" href="c__io__layers_8h.xhtml#ab37149944a170aeec451a02a37cba045">c_io_init_next_layer</a>(<a class="code" href="c__io_8h.xhtml#a5140b8af92a952340818455d7ab84316">CIO_NEXT_LAYER</a>);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="c__io__byteswap_8h.xhtml#a1ad2e01a94b223ef879be2ecf01df431">c_io_isMachineBigEndian</a>()){</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <a class="code" href="c__io_8h.xhtml#a32c4d3ceffa2ab65c1d300842cc3d407">machineEndian</a>=<a class="code" href="c__io_8h.xhtml#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b">bigEndian</a>;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="c__io_8h.xhtml#af2dc07ec1edb7a34a3aa1f6a48fc1a7d">c_io_printf</a>(-1,<span class="stringliteral">&quot;init: byteswap: Machine is big endian\n&quot;</span>);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  } <span class="keywordflow">else</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <a class="code" href="c__io_8h.xhtml#af2dc07ec1edb7a34a3aa1f6a48fc1a7d">c_io_printf</a>(-1,<span class="stringliteral">&quot;init: byteswap: Machine is little endian\n&quot;</span>);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="c__io__byteswap_8h.xhtml#a90b68f4ca8f95b807bc16d63debb02d9">c_io_shouldByteSwap</a>()) </div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="c__io_8h.xhtml#af2dc07ec1edb7a34a3aa1f6a48fc1a7d">c_io_printf</a>(-1,<span class="stringliteral">&quot;init: byteswap: IO will byteswap on this machine\n&quot;</span>);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  <span class="keywordflow">return</span> C_IO_INIT(params);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;int64_t c_io_byteswap_fini()</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;{</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;  <span class="keywordflow">return</span> C_IO_FINI();</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;}</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;int64_t c_io_byteswap_open   (int64_t unit,</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                  <span class="keywordtype">char</span> *  filename, </div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                  int64_t fileStatus,</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                  int64_t fileMode)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;{</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  <span class="keywordflow">return</span> C_IO_OPEN(unit,filename,fileStatus,fileMode);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;}</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;int64_t c_io_byteswap_close  (int64_t unit)</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;{</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  <span class="keywordflow">return</span> C_IO_CLOSE(unit);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;}</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;int64_t c_io_byteswap_in     (int64_t unit, </div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                  <span class="keywordtype">char</span> * <a class="code" href="argspc_8h.xhtml#a3b51acbeb211391bb5a08eeb1d98132e">array</a>, </div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                  int64_t len, </div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                  int64_t word_len)</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;{</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  int64_t ammountRead;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  ammountRead=C_IO_IN(unit,array,len,word_len);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  <a class="code" href="c__io__byteswap_8h.xhtml#a9c9dd968e308adecb5ef439bc93d5608">c_io_byteswap</a>(array,ammountRead,word_len);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  <span class="keywordflow">return</span> ammountRead;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;}</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;int64_t c_io_byteswap_out    (int64_t unit, </div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                  <span class="keywordtype">char</span> * <a class="code" href="argspc_8h.xhtml#a3b51acbeb211391bb5a08eeb1d98132e">array</a>, </div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                  int64_t len, </div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                  int64_t word_len)</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;{</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;  int64_t ammountWritten;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  <a class="code" href="c__io__byteswap_8h.xhtml#a9c9dd968e308adecb5ef439bc93d5608">c_io_byteswap</a>(array,len,word_len);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  ammountWritten=C_IO_OUT(unit,array,len,word_len);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  <a class="code" href="c__io__byteswap_8h.xhtml#a9c9dd968e308adecb5ef439bc93d5608">c_io_byteswap</a>(array,len,word_len);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;  <span class="keywordflow">return</span> ammountWritten;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;}</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;int64_t c_io_byteswap_setpos (int64_t unit, </div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                  int64_t pos,</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                  int64_t word_len)</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;{</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  <span class="keywordflow">return</span> C_IO_SETPOS(unit,pos,word_len);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;}</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;int64_t c_io_byteswap_getpos (int64_t unit)</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;{</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  <span class="keywordflow">return</span> C_IO_GETPOS(unit);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;}</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;int64_t c_io_byteswap_change_mode(int64_t unit,int64_t newMode)</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;{</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  <span class="keywordflow">return</span> C_IO_CHANGE_MODE(unit,newMode);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">/* </span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment"> * local routines below, should only be accessed by this file </span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="c__io__byteswap_8h.xhtml#a90b68f4ca8f95b807bc16d63debb02d9">c_io_shouldByteSwap</a>()</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;{</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="c__io_8h.xhtml#a94d8b906ba6bbe4e6d8c08cfe8163ee6">fileEndian</a>==<a class="code" href="c__io_8h.xhtml#a32c4d3ceffa2ab65c1d300842cc3d407">machineEndian</a>)<span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;}</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="keywordtype">void</span> <a class="code" href="c__io__byteswap_8h.xhtml#a9c9dd968e308adecb5ef439bc93d5608">c_io_byteswap</a>(<span class="keywordtype">char</span> * <a class="code" href="argspc_8h.xhtml#a3b51acbeb211391bb5a08eeb1d98132e">array</a>,int64_t len,int64_t word_len)</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;{</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  int64_t * ptr_64;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  int32_t * ptr_32;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  int16_t * ptr_16;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  <span class="keywordtype">int</span> <a class="code" href="namespaceeg__moist__gcm__ctl__mod.xhtml#a2f4c64d4ab3b2d2cdd01acd019d04784">i</a>;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  <span class="keywordflow">if</span> (!<a class="code" href="c__io__byteswap_8h.xhtml#a90b68f4ca8f95b807bc16d63debb02d9">c_io_shouldByteSwap</a>())<span class="keywordflow">return</span>;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  <span class="keywordflow">if</span> (word_len == 8){</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    ptr_64 = (int64_t *)array;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="preprocessor">#pragma omp parallel for private(i) shared(len, ptr_64)</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordflow">for</span> (i=0 ; i&lt;len ; i++)</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;      ptr_64[i] = <a class="code" href="c__io__byteswap_8h.xhtml#a0c0b427a2547aa727e2c5262a174e26b">bswap_64</a>(ptr_64[i]); </div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;  }</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (word_len == 4){</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    ptr_32 = (int32_t *) array;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="preprocessor">#pragma omp parallel for private(i) shared(len, ptr_32)</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">for</span> (i=0 ; i&lt;len ; i++)</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;      ptr_32[i] = <a class="code" href="c__io__byteswap_8h.xhtml#a5bcbf8b6ee067af4c2fd60ef3bdb39d2">bswap_32</a>(ptr_32[i]); </div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;  }</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (word_len == 2){</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    ptr_16 = (int16_t *) array;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="preprocessor">#pragma omp parallel for private(i) shared(len, ptr_16)</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordflow">for</span> (i=0 ; i&lt;len ; i++)</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;      ptr_16[i] = <a class="code" href="c__io__byteswap_8h.xhtml#ad409605fabe125b1d222acb94a3f480f">bswap_16</a>(ptr_16[i]); </div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;  }</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;  <span class="keywordflow">else</span>{</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <a class="code" href="c__io_8h.xhtml#af2dc07ec1edb7a34a3aa1f6a48fc1a7d">c_io_printf</a>(-1,</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="stringliteral">&quot;Byteswap: Don&#39;t know how to swap a word size of %lld\n&quot;</span>,</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <a class="code" href="c__io_8h.xhtml#ac05351099b626122a943dc06bad2d9f9">LLD</a>(word_len));</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    abort();</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  }</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  <span class="keywordflow">return</span>;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;}</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;int32_t <a class="code" href="c__io__byteswap_8h.xhtml#a1ad2e01a94b223ef879be2ecf01df431">c_io_isMachineBigEndian</a>(){</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  <span class="keyword">union </span>{</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    uint32_t thirtytwo_bit_int;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keywordtype">char</span>     thirtytwo_bit_string[4];</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;  } un={0x01020304};</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;  <span class="comment">/* If the first character in the string is &#39;1&#39;</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">     then we are BE - method formally correct in c99 */</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  <span class="keywordflow">return</span> (un.thirtytwo_bit_string[0]==1);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;}</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="preprocessor">#endif</span></div></div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
