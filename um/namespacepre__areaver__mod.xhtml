<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>UM General Atmosphere: pre_areaver_mod Module Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="unified_model_logo_2.jpeg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">UM General Atmosphere
   &#160;<span id="projectnumber">8.6</span>
   </div>
   <div id="projectbrief">UK Met Offices Unified Model</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#func-members">Functions/Subroutines</a>  </div>
  <div class="headertitle">
<div class="title">pre_areaver_mod Module Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Code Owner: See Unified Model Code Owners HTML page.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions/Subroutines</h2></td></tr>
<tr class="memitem:a516c00ef709c8a7300e2bdf1c45f3807"><td class="memItemLeft" align="right" valign="top"><a class="el" href="interfacesubroutine.xhtml">subroutine</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacepre__areaver__mod.xhtml#a516c00ef709c8a7300e2bdf1c45f3807">pre_areaver</a> (GAPS_LAMBDA_SRCE, LAMBDA_SRCE, GAPS_PHI_SRCE, PHI_SRCE, CYCLIC_SRCE, LROW_SRCE, WANT, MASK_SRCE, GAPS_LAMBDA_TARG, LAMBDA_TARG, GAPS_PHI_TARG, PHI_TARG, CYCLIC_TARG, SPHERICAL, MAXL, COUNT_TARG, BASE_TARG, INDEX_SRCE, WEIGHT, <a class="el" href="i__stgfld_8h.xhtml#a6412d2f67ae1ccffc7ad33f9d70d6e0c">ICODE</a>, CMESSAGE)</td></tr>
<tr class="separator:a516c00ef709c8a7300e2bdf1c45f3807"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Code Owner: See Unified Model Code Owners HTML page. </p>
<p>Code Owner: See Unified Model Code Owners HTML page This file belongs in section: River Routing </p>
</div><h2 class="groupheader">Function/Subroutine Documentation</h2>
<a id="a516c00ef709c8a7300e2bdf1c45f3807"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a516c00ef709c8a7300e2bdf1c45f3807">&#9670;&nbsp;</a></span>pre_areaver()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="interfacesubroutine.xhtml">subroutine</a> pre_areaver_mod::pre_areaver </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="eg__hash_8c.xhtml#a3b6ee100a473e8866bcea6d1fc4041d9">integer</a>&#160;</td>
          <td class="paramname"><em>GAPS_LAMBDA_SRCE</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="c__fort2c__2a_8h.xhtml#a031f8951175b43076c2084a6c2173410">real</a>, dimension(*)&#160;</td>
          <td class="paramname"><em>LAMBDA_SRCE</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="eg__hash_8c.xhtml#a3b6ee100a473e8866bcea6d1fc4041d9">integer</a>&#160;</td>
          <td class="paramname"><em>GAPS_PHI_SRCE</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="c__fort2c__2a_8h.xhtml#a031f8951175b43076c2084a6c2173410">real</a>, dimension(*)&#160;</td>
          <td class="paramname"><em>PHI_SRCE</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">logical&#160;</td>
          <td class="paramname"><em>CYCLIC_SRCE</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="eg__hash_8c.xhtml#a3b6ee100a473e8866bcea6d1fc4041d9">integer</a>&#160;</td>
          <td class="paramname"><em>LROW_SRCE</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">logical&#160;</td>
          <td class="paramname"><em>WANT</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">logical, dimension(lrow_srce,*)&#160;</td>
          <td class="paramname"><em>MASK_SRCE</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="eg__hash_8c.xhtml#a3b6ee100a473e8866bcea6d1fc4041d9">integer</a>&#160;</td>
          <td class="paramname"><em>GAPS_LAMBDA_TARG</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="c__fort2c__2a_8h.xhtml#a031f8951175b43076c2084a6c2173410">real</a>, dimension(*)&#160;</td>
          <td class="paramname"><em>LAMBDA_TARG</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="eg__hash_8c.xhtml#a3b6ee100a473e8866bcea6d1fc4041d9">integer</a>&#160;</td>
          <td class="paramname"><em>GAPS_PHI_TARG</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="c__fort2c__2a_8h.xhtml#a031f8951175b43076c2084a6c2173410">real</a>, dimension(*)&#160;</td>
          <td class="paramname"><em>PHI_TARG</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">logical&#160;</td>
          <td class="paramname"><em>CYCLIC_TARG</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">logical&#160;</td>
          <td class="paramname"><em>SPHERICAL</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="eg__hash_8c.xhtml#a3b6ee100a473e8866bcea6d1fc4041d9">integer</a>&#160;</td>
          <td class="paramname"><em>MAXL</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="eg__hash_8c.xhtml#a3b6ee100a473e8866bcea6d1fc4041d9">integer</a>, dimension(gaps_lambda_targ,gaps_phi_targ)&#160;</td>
          <td class="paramname"><em>COUNT_TARG</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="eg__hash_8c.xhtml#a3b6ee100a473e8866bcea6d1fc4041d9">integer</a>, dimension(gaps_lambda_targ,gaps_phi_targ)&#160;</td>
          <td class="paramname"><em>BASE_TARG</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="eg__hash_8c.xhtml#a3b6ee100a473e8866bcea6d1fc4041d9">integer</a>, dimension(maxl)&#160;</td>
          <td class="paramname"><em>INDEX_SRCE</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="c__fort2c__2a_8h.xhtml#a031f8951175b43076c2084a6c2173410">real</a>, dimension(maxl)&#160;</td>
          <td class="paramname"><em>WEIGHT</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="eg__hash_8c.xhtml#a3b6ee100a473e8866bcea6d1fc4041d9">integer</a>&#160;</td>
          <td class="paramname"><em>ICODE</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">character(len=80)&#160;</td>
          <td class="paramname"><em>CMESSAGE</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">gaps_lambda_srce</td><td>The arrays INDEX_SRCE and WEIGHT are returned in the form which the area-averaging routine DO_AREAVER expects. They are continuous lists comprising consecutive groups of entries. There is a group for each target point, for which the number of entries is spec!&gt; ified by COUNT_TARG, and the groups appear in the normal order of grid points. The size required for INDEX_SRCE and WEIGHT depends on how many source boxes go into each target box, on average, and is not known at compile-time. The maximum that could be needed is (GAPS_LAMBDA_SRCE+GAPS_LAMBDA_TARG)*(GAPS_PHI_SRCE+GAPS_PHI_TARG) and the size to which the arrays are actually dimensioned should be supplied in MAXL. The size used is returned in MAXL. It is the responsibility of the calling routine to provide enough space.</td></tr>
    <tr><td class="paramname">gaps_phi_srce</td><td>The arrays INDEX_SRCE and WEIGHT are returned in the form which the area-averaging routine DO_AREAVER expects. They are continuous lists comprising consecutive groups of entries. There is a group for each target point, for which the number of entries is spec!&gt; ified by COUNT_TARG, and the groups appear in the normal order of grid points. The size required for INDEX_SRCE and WEIGHT depends on how many source boxes go into each target box, on average, and is not known at compile-time. The maximum that could be needed is (GAPS_LAMBDA_SRCE+GAPS_LAMBDA_TARG)*(GAPS_PHI_SRCE+GAPS_PHI_TARG) and the size to which the arrays are actually dimensioned should be supplied in MAXL. The size used is returned in MAXL. It is the responsibility of the calling routine to provide enough space.</td></tr>
    <tr><td class="paramname">gaps_lambda_targ</td><td>The arrays INDEX_SRCE and WEIGHT are returned in the form which the area-averaging routine DO_AREAVER expects. They are continuous lists comprising consecutive groups of entries. There is a group for each target point, for which the number of entries is spec!&gt; ified by COUNT_TARG, and the groups appear in the normal order of grid points. The size required for INDEX_SRCE and WEIGHT depends on how many source boxes go into each target box, on average, and is not known at compile-time. The maximum that could be needed is (GAPS_LAMBDA_SRCE+GAPS_LAMBDA_TARG)*(GAPS_PHI_SRCE+GAPS_PHI_TARG) and the size to which the arrays are actually dimensioned should be supplied in MAXL. The size used is returned in MAXL. It is the responsibility of the calling routine to provide enough space.</td></tr>
    <tr><td class="paramname">gaps_phi_targ</td><td>The arrays INDEX_SRCE and WEIGHT are returned in the form which the area-averaging routine DO_AREAVER expects. They are continuous lists comprising consecutive groups of entries. There is a group for each target point, for which the number of entries is spec!&gt; ified by COUNT_TARG, and the groups appear in the normal order of grid points. The size required for INDEX_SRCE and WEIGHT depends on how many source boxes go into each target box, on average, and is not known at compile-time. The maximum that could be needed is (GAPS_LAMBDA_SRCE+GAPS_LAMBDA_TARG)*(GAPS_PHI_SRCE+GAPS_PHI_TARG) and the size to which the arrays are actually dimensioned should be supplied in MAXL. The size used is returned in MAXL. It is the responsibility of the calling routine to provide enough space.</td></tr>
    <tr><td class="paramname">lrow_srce</td><td>The arrays INDEX_SRCE and WEIGHT are returned in the form which the area-averaging routine DO_AREAVER expects. They are continuous lists comprising consecutive groups of entries. There is a group for each target point, for which the number of entries is spec!&gt; ified by COUNT_TARG, and the groups appear in the normal order of grid points. The size required for INDEX_SRCE and WEIGHT depends on how many source boxes go into each target box, on average, and is not known at compile-time. The maximum that could be needed is (GAPS_LAMBDA_SRCE+GAPS_LAMBDA_TARG)*(GAPS_PHI_SRCE+GAPS_PHI_TARG) and the size to which the arrays are actually dimensioned should be supplied in MAXL. The size used is returned in MAXL. It is the responsibility of the calling routine to provide enough space.</td></tr>
    <tr><td class="paramname">maxl</td><td>The arrays INDEX_SRCE and WEIGHT are returned in the form which the area-averaging routine DO_AREAVER expects. They are continuous lists comprising consecutive groups of entries. There is a group for each target point, for which the number of entries is spec!&gt; ified by COUNT_TARG, and the groups appear in the normal order of grid points. The size required for INDEX_SRCE and WEIGHT depends on how many source boxes go into each target box, on average, and is not known at compile-time. The maximum that could be needed is (GAPS_LAMBDA_SRCE+GAPS_LAMBDA_TARG)*(GAPS_PHI_SRCE+GAPS_PHI_TARG) and the size to which the arrays are actually dimensioned should be supplied in MAXL. The size used is returned in MAXL. It is the responsibility of the calling routine to provide enough space.</td></tr>
    <tr><td class="paramname">count_targ</td><td>The arrays INDEX_SRCE and WEIGHT are returned in the form which the area-averaging routine DO_AREAVER expects. They are continuous lists comprising consecutive groups of entries. There is a group for each target point, for which the number of entries is spec!&gt; ified by COUNT_TARG, and the groups appear in the normal order of grid points. The size required for INDEX_SRCE and WEIGHT depends on how many source boxes go into each target box, on average, and is not known at compile-time. The maximum that could be needed is (GAPS_LAMBDA_SRCE+GAPS_LAMBDA_TARG)*(GAPS_PHI_SRCE+GAPS_PHI_TARG) and the size to which the arrays are actually dimensioned should be supplied in MAXL. The size used is returned in MAXL. It is the responsibility of the calling routine to provide enough space.</td></tr>
    <tr><td class="paramname">base_targ</td><td>The arrays INDEX_SRCE and WEIGHT are returned in the form which the area-averaging routine DO_AREAVER expects. They are continuous lists comprising consecutive groups of entries. There is a group for each target point, for which the number of entries is spec!&gt; ified by COUNT_TARG, and the groups appear in the normal order of grid points. The size required for INDEX_SRCE and WEIGHT depends on how many source boxes go into each target box, on average, and is not known at compile-time. The maximum that could be needed is (GAPS_LAMBDA_SRCE+GAPS_LAMBDA_TARG)*(GAPS_PHI_SRCE+GAPS_PHI_TARG) and the size to which the arrays are actually dimensioned should be supplied in MAXL. The size used is returned in MAXL. It is the responsibility of the calling routine to provide enough space.</td></tr>
    <tr><td class="paramname">index_srce</td><td>The arrays INDEX_SRCE and WEIGHT are returned in the form which the area-averaging routine DO_AREAVER expects. They are continuous lists comprising consecutive groups of entries. There is a group for each target point, for which the number of entries is spec!&gt; ified by COUNT_TARG, and the groups appear in the normal order of grid points. The size required for INDEX_SRCE and WEIGHT depends on how many source boxes go into each target box, on average, and is not known at compile-time. The maximum that could be needed is (GAPS_LAMBDA_SRCE+GAPS_LAMBDA_TARG)*(GAPS_PHI_SRCE+GAPS_PHI_TARG) and the size to which the arrays are actually dimensioned should be supplied in MAXL. The size used is returned in MAXL. It is the responsibility of the calling routine to provide enough space.</td></tr>
    <tr><td class="paramname">icode</td><td>The arrays INDEX_SRCE and WEIGHT are returned in the form which the area-averaging routine DO_AREAVER expects. They are continuous lists comprising consecutive groups of entries. There is a group for each target point, for which the number of entries is spec!&gt; ified by COUNT_TARG, and the groups appear in the normal order of grid points. The size required for INDEX_SRCE and WEIGHT depends on how many source boxes go into each target box, on average, and is not known at compile-time. The maximum that could be needed is (GAPS_LAMBDA_SRCE+GAPS_LAMBDA_TARG)*(GAPS_PHI_SRCE+GAPS_PHI_TARG) and the size to which the arrays are actually dimensioned should be supplied in MAXL. The size used is returned in MAXL. It is the responsibility of the calling routine to provide enough space. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="pre__areaver_8f90_source.xhtml#l00018">18</a> of file <a class="el" href="pre__areaver_8f90_source.xhtml">pre_areaver.f90</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacepre__areaver__mod_a516c00ef709c8a7300e2bdf1c45f3807_cgraph.svg" width="275" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespacepre__areaver__mod_a516c00ef709c8a7300e2bdf1c45f3807_icgraph.svg" width="100%" height="404"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
