<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>UM General Atmosphere: /home/wilfred/PhD/UM/src/control/stash/xpnd_all.f90 Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="unified_model_logo_2.jpeg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">UM General Atmosphere
   &#160;<span id="projectnumber">8.6</span>
   </div>
   <div id="projectbrief">UK Met Offices Unified Model</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_b81b067251166617f9d0a8c0cfc3a4a9.xhtml">control</a></li><li class="navelem"><a class="el" href="dir_807f876cb6d36c1a4c0b1b86608d148a.xhtml">stash</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">xpnd_all.f90</div>  </div>
</div><!--header-->
<div class="contents">
<a href="xpnd__all_8f90.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">      SUBROUTINE </span><a class="code" href="xpnd__all_8f90.xhtml#af737cbaef36b518f00723a6c99685bda" title="LL SUBROUTINE XPND_ALL -!&gt;LL. ">xpnd_all</a>(FIELD,ICOMP64,N,IX,IY,ISC,RMDI,               &amp;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;     &amp;                    ICODE,CMESSAGE)</div><div class="line"><a name="l00022"></a><span class="lineno"><a class="line" href="xpnd__all_8f90.xhtml#af737cbaef36b518f00723a6c99685bda">   22</a></span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;      <span class="keywordtype">USE </span>yomhook<span class="keywordtype">, ONLY</span>: lhook, dr_hook</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;      <span class="keywordtype">USE </span>parkind1<span class="keywordtype">, ONLY</span>: jprb, jpim</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;      <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;      <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span>  :: n, ix, iy, isc</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;      <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span>  :: icomp64(n)</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;      <span class="keywordtype">REAL</span>,    <span class="keywordtype">INTENT(IN)</span>  :: rmdi</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;      <span class="keywordtype">REAL</span>,    <span class="keywordtype">INTENT(OUT)</span> :: field(ix,iy)</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;      <span class="keywordtype">INTEGER</span>              :: icode</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;      <span class="keywordtype">CHARACTER</span>            :: cmessage*80</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;      <span class="keywordtype">INTEGER</span> :: i, j, nshft, num, iword, ioff, imask, ival, mant, iexp</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;      <span class="keywordtype">INTEGER</span> :: i1, i2, nbits_bmap</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;      <span class="keywordtype">INTEGER</span>, <span class="keywordtype">DIMENSION(3*ix)</span> :: itmp</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;      <span class="keywordtype">INTEGER</span>, <span class="keywordtype">DIMENSION(ix)</span>   :: idx, imap</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;      <span class="keywordtype">INTEGER</span>, <span class="keywordtype">DIMENSION(iy)</span>   :: istart, nop, ibase, nbits</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;      <span class="keywordtype">INTEGER</span>, <span class="keywordtype">DIMENSION(iy*(2*ix+2)+4)</span> :: icomp</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;      <span class="keywordtype">REAL</span>                 :: aprec</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;      <span class="keywordtype">REAL</span>, <span class="keywordtype">DIMENSION (iy)</span> :: base</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;      <span class="keywordtype">REAL</span>, <span class="keywordtype">DIMENSION (ix)</span> :: tmp</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;      <span class="keywordtype">LOGICAL</span>, <span class="keywordtype">DIMENSION(iy)</span> :: obtzer, obtmin, obtmis, obtmap</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;      <span class="keywordtype">INTEGER</span>, <span class="keywordtype">PARAMETER</span> :: MASK16 = z<span class="stringliteral">&#39;FFFF&#39;</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;      <span class="keywordtype">INTEGER</span>, <span class="keywordtype">PARAMETER</span> :: MASK32 = z<span class="stringliteral">&#39;FFFFFFFF&#39;</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;      <span class="keywordtype">INTEGER</span>, <span class="keywordtype">PARAMETER</span> :: MASK_MANT_IBM = z<span class="stringliteral">&#39;00FFFFFF&#39;</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;      <span class="keywordtype">INTEGER</span>, <span class="keywordtype">PARAMETER</span> :: MASK_EXPT_IBM = z<span class="stringliteral">&#39;7F000000&#39;</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;      <span class="keywordtype">INTEGER</span>, <span class="keywordtype">PARAMETER</span> :: MASK_SIGN_IBM = z<span class="stringliteral">&#39;80000000&#39;</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;      <span class="keywordtype">INTEGER</span>, <span class="keywordtype">SAVE</span> :: MASK_BITS(0:63), first</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;      <span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;      <span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;      <span class="keywordtype">REAL(KIND=jprb)</span>               :: zhook_handle</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;      <span class="keyword">DATA</span> first /1/</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;      <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;XPND_ALL&#39;</span>,zhook_in,zhook_handle)</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="preprocessor">#if !defined(VECTOR)</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="preprocessor"></span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;      imask = 0</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="preprocessor"></span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;      <span class="keywordflow">IF</span> (first/=0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keywordflow">DO</span> i=0,63</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;          mask_bits(i) = ishft(1,63-i)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="keywordflow">        END DO</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        first = 0</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;      aprec = 2.**isc</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;      num = ishft(icomp64(1),-32) <span class="comment">! Number of 32 bit words</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;      <span class="keywordflow">IF</span> (num &gt; <span class="keyword">SIZE</span>(icomp)-2) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        icode = 2</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        cmessage=<span class="stringliteral">&#39;COEX: Compressed data has too many elements&#39;</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;XPND_ALL&#39;</span>,zhook_out,zhook_handle)</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;      <span class="keywordflow">DO</span> i=1,(num+1)/2</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        icomp(2*i-1) = iand(ishft(icomp64(i),-32),mask32)</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        icomp(2*i)   = iand(icomp64(i),mask32)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="keywordflow">      ENDDO</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;      <span class="comment">! The following word MUST be 0, it is used during decomposition!</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;      icomp(num+1) = 0</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;      icomp(num+2) = 0</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">! Get start word and length of every row</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;      istart(1) = 6</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;      nop(1) = iand(icomp(5),mask16)</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;      <span class="keywordflow">DO</span> j=2,iy</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        istart(j) = istart(j-1) + nop(j-1) + 2</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        nop(j) = iand(icomp(istart(j)-1),mask16)</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordflow">IF</span> (istart(j)+nop(j)-1&gt;num) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;          icode = 2</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;          cmessage=<span class="stringliteral">&#39;COEX: Compressed data inconsistent&#39;</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;          <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;XPND_ALL&#39;</span>,zhook_out,zhook_handle)</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;          <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">! Get base (as a 32-bit IBM floating point number) and number of bits</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">! for every row and convert IBM floats to native floats</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">! The routine IBM2IEEE does a rather bad job, so we code it explicitly</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">!$OMP PARALLEL DO SCHEDULE(STATIC) DEFAULT(NONE)                        &amp;</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">!$OMP&amp;         SHARED(iy, obtmis, obtmin, obtzer, obtmap, nbits, ibase, &amp;</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">!$OMP&amp;                base, ix, mask_bits, field, icomp, rmdi, istart,  &amp;</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">!$OMP&amp;                aprec)                                            &amp;</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">!$OMP&amp;         PRIVATE(j, nbits_bmap, mant, iexp, ival, iword, itmp,    &amp;</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">!$OMP&amp;                 nshft, i1, i2, i, num, imap, idx, ioff, tmp, imask)</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;      <span class="keywordflow">DO</span> j=1,iy</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        ibase(j) = icomp(istart(j)-2)</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        nbits(j) = iand(ishft(icomp(istart(j)-1),-16),mask16)</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        mant = iand(ibase(j),mask_mant_ibm)</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        iexp = ishft(iand(ibase(j),mask_expt_ibm),-24)-64-6</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        base(j) = 16.0**iexp*mant</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordflow">IF</span> (iand(ibase(j),mask_sign_ibm) /= 0) base(j) = -base(j)</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">! Check if bitmaps are used</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        obtzer(j) = iand(nbits(j),128) /= 0</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        obtmin(j) = iand(nbits(j),64)  /= 0</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        obtmis(j) = iand(nbits(j),32)  /= 0</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        obtmap(j) = obtzer(j) .OR. obtmin(j) .OR. obtmis(j)</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        nbits(j)  = iand(nbits(j),31)</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">! Decode data row by row</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="comment">! Care about bitmaps</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        imap(:) = 1 <span class="comment">! Data present indicator</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        nbits_bmap = 0</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keywordflow">IF</span> (obtmis(j)) nbits_bmap = nbits_bmap + ix</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="keywordflow">IF</span> (obtmin(j)) nbits_bmap = nbits_bmap + ix</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="keywordflow">IF</span> (obtzer(j)) nbits_bmap = nbits_bmap + ix</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keywordflow">IF</span> (nbits_bmap &gt; 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;          iword = istart(j)</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;          <span class="keywordflow">DO</span> i1=1,nbits_bmap,64</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            ival  = ior(ishft(icomp(iword),32),icomp(iword+1))</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            iword = iword+2</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            <span class="keywordflow">DO</span> i2=0,min(nbits_bmap-i1,63)</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;              itmp(i1+i2) = <a class="code" href="merge_8f90.xhtml#a3f03076eede9ccbe522408e61e5ef030" title="-!&gt; SUBROUTINE MERGE-!&gt; ">merge</a>(1,0,iand(ival,mask_bits(i2))/=0)</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="keywordflow">            END DO</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="keywordflow">          END DO</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;          istart(j) = istart(j) + (nbits_bmap+31)/32</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        nbits_bmap = 0</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="comment">! Extract missing data bitmap</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordflow">IF</span> (obtmis(j)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;          <span class="keywordflow">WHERE</span>(itmp(nbits_bmap+1:nbits_bmap+ix)/=0)</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            field(:,j) = rmdi</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            imap(:) = 0</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="keywordflow">          END WHERE</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;          nbits_bmap = nbits_bmap + ix</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="comment">! Extract minimum value bitmap</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keywordflow">IF</span>(obtmin(j)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;          <span class="keywordflow">WHERE</span>(itmp(nbits_bmap+1:nbits_bmap+ix)/=0)</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            field(:,j) = base(j)</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            imap(:) = 0</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="keywordflow">          END WHERE</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;          nbits_bmap = nbits_bmap + ix</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <span class="comment">! Extract zero value bitmap</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="keywordflow">IF</span>(obtzer(j)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;          <span class="keywordflow">WHERE</span>(itmp(nbits_bmap+1:nbits_bmap+ix)==0)</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            field(:,j) = 0.</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            imap(:) = 0</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="keywordflow">          END WHERE</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;          nbits_bmap = nbits_bmap + ix</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <span class="keywordflow">IF</span>(nbits(j)==0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;          <span class="comment">! All points in row have same value</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;          <span class="keywordflow">IF</span>(obtmap(j)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            <span class="keywordflow">WHERE</span>(imap(:)/=0) field(:,j) = base(j)</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;          <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            field(:,j) = base(j)</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;          <span class="comment">! Get number [and index] of values to decode</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;          <span class="keywordflow">IF</span>(obtmap(j)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            num = 0</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            <span class="keywordflow">DO</span> i=1,ix</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;              <span class="keywordflow">IF</span>(imap(i) /= 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                num = num+1</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                idx(num) = i</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="keywordflow">              END IF</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="keywordflow">            END DO</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;          <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            num = ix</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="preprocessor">#if defined(VECTOR)</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="preprocessor"></span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;          imask = ishft(1,nbits(j))-1</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;          <span class="comment">! Decode data</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;          <span class="keywordflow">DO</span> i=1,num</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            <span class="comment">! Bit offset to value:</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            ioff  = (i-1)*nbits(j)</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            <span class="comment">! Number of word in icomp which contains first bit:</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            iword = ishft(ioff,-5)+istart(j)</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            <span class="comment">! We load this word and the following into ival,</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            <span class="comment">! this way we don&#39;t have to care if a word boundary</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            <span class="comment">! is crossed. This requires that ival is a 64 bit word!</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            ival  = ior(ishft(icomp(iword),32),icomp(iword+1))</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            <span class="comment">! Number of bits we have to shift to the right:</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            nshft = 64 - iand(ioff,31) - nbits(j)</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="preprocessor">#if defined(NEC)</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="preprocessor"></span>            <span class="comment">! Normally we could now code:</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            <span class="comment">!   ival = ISHFT(ival,-nshft)</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            <span class="comment">! but since vector-shift-by-vector is not</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            <span class="comment">! implemented in H/W we have to do:</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            <span class="keywordflow">if</span> (iand(nshft,32)/=0) ival = ishft(ival,-32)</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            <span class="keywordflow">if</span> (iand(nshft,16)/=0) ival = ishft(ival,-16)</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            <span class="keywordflow">if</span> (iand(nshft, 8)/=0) ival = ishft(ival, -8)</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            <span class="keywordflow">if</span> (iand(nshft, 4)/=0) ival = ishft(ival, -4)</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            <span class="keywordflow">if</span> (iand(nshft, 2)/=0) ival = ishft(ival, -2)</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            <span class="keywordflow">if</span> (iand(nshft, 1)/=0) ival = ishft(ival, -1)</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="preprocessor"></span>            ival = ishft(ival,-nshft)</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="preprocessor"></span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;            <span class="comment">! Mask ival and calculate decoded value:</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            ival = iand(ival,imask)</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            tmp(i) = ival*aprec + base(j)</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="keywordflow">          END DO</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;          <span class="comment">! Write decoded values to field</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;          <span class="keywordflow">IF</span> (obtmap(j)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            field(idx(1:num),j) = tmp(1:num)</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;          <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            field(:,j) = tmp(:)</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="preprocessor"></span>          <span class="comment">! Decode data</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;          <span class="keywordflow">IF</span> (obtmap(j)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            <span class="keywordflow">DO</span> i=1,num</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;              <span class="comment">! Bit offset to value:</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;              ioff  = (i-1)*nbits(j)</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;              <span class="comment">! Number of word in icomp which contains first bit:</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;              iword = ishft(ioff,-5)+istart(j)</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;              <span class="comment">! We load this word and the following into ival,</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;              <span class="comment">! this way we don&#39;t have to care if a word boundary</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;              <span class="comment">! is crossed. This requires that ival is a 64 bit word!</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;              ival  = ior(ishft(icomp(iword),32),icomp(iword+1))</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;              <span class="comment">! Number of bits we have to shift to the right:</span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;              nshft = 64 - iand(ioff,31) - nbits(j)</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;              <span class="comment">! Mask ival and calculate decoded value:</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;              ival = ibits(ival,nshft,nbits(j))</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;              field(idx(i),j) = ival*aprec + base(j)</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="keywordflow">            END DO</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;          <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            <span class="keywordflow">DO</span> i=1,num</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;              <span class="comment">! Bit offset to value:</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;              ioff  = (i-1)*nbits(j)</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;              <span class="comment">! Number of word in icomp which contains first bit:</span></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;              iword = ishft(ioff,-5)+istart(j)</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;              <span class="comment">! We load this word and the following into ival,</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;              <span class="comment">! this way we don&#39;t have to care if a word boundary</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;              <span class="comment">! is crossed. This requires that ival is a 64 bit word!</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;              ival  = ior(ishft(icomp(iword),32),icomp(iword+1))</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;              <span class="comment">! Number of bits we have to shift to the right:</span></div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;              nshft = 64 - iand(ioff,31) - nbits(j)</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;              <span class="comment">! Mask ival and calculate decoded value:</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;              ival = ibits(ival,nshft,nbits(j))</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;              field(i,j) = ival*aprec + base(j)</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="keywordflow">            END DO</span></div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="keywordflow">          END IF</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="preprocessor"></span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="comment">!$OMP END PARALLEL DO</span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;      <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;XPND_ALL&#39;</span>,zhook_out,zhook_handle)</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;      <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="keyword">      END SUBROUTINE </span><a class="code" href="xpnd__all_8f90.xhtml#af737cbaef36b518f00723a6c99685bda" title="LL SUBROUTINE XPND_ALL -!&gt;LL. ">xpnd_all</a></div></div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
