<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>UM General Atmosphere: /home/wilfred/PhD/UM/src/atmosphere/convection/tcs_class_interface.f90 Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="unified_model_logo_2.jpeg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">UM General Atmosphere
   &#160;<span id="projectnumber">8.6</span>
   </div>
   <div id="projectbrief">UK Met Offices Unified Model</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_1df14ea1ac826f73bc3062fa8a76e0c2.xhtml">atmosphere</a></li><li class="navelem"><a class="el" href="dir_c7cc3e4dc8dce4a958919661145604f9.xhtml">convection</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">tcs_class_interface.f90</div>  </div>
</div><!--header-->
<div class="contents">
<a href="tcs__class__interface_8f90.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00006"></a><span class="lineno"><a class="line" href="namespacetcs__class__interface.xhtml">    6</a></span>&#160;<span class="keyword">MODULE</span> <a class="code" href="namespacetcs__class__interface.xhtml" title="Module defining the tcs warm rain &quot;interface_input&quot; derived type and!&gt; subroutines for allocating and...">tcs_class_interface</a></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;  <span class="keywordtype">USE </span>yomhook<span class="keywordtype">, ONLY</span>: lhook, dr_hook</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;  <span class="keywordtype">USE </span>parkind1<span class="keywordtype">, ONLY</span>: jprb, jpim</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespaceereport__mod.xhtml" title="This file belongs in section: Misc. ">ereport_mod</a><span class="keywordtype">, ONLY</span> : <a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;  <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;  <span class="comment">!</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;  <span class="comment">! Description:</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;  <span class="comment">! This module defines the tcs warm rain &quot;cloud_input&quot; derived type and  ! subroutines for allocating and deallocating an instance of this class.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;  <span class="comment">!</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;  <span class="comment">!</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;  <span class="comment">! Method:</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;  <span class="comment">!   Variables of type &quot;interface_input&quot; store arrays of pointers to</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;  <span class="comment">! arrays sampled on interface levels (e.g.  cloud base, freezing level,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;  <span class="comment">! inversion base...)</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;  <span class="comment">! Each array is defined over convective points.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;  <span class="comment">!</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;      <span class="comment">!</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="comment">!   Language: Fortran 90.</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;  <span class="comment">!   This code is written to UMDP3 version 8.2 programming standards.</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno"><a class="line" href="structtcs__class__interface_1_1interface__input.xhtml">   28</a></span>&#160;  <span class="keyword">TYPE</span>, <span class="keyword">PUBLIC</span> :: <a class="code" href="structtcs__class__interface_1_1interface__input.xhtml">interface_input</a></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;     <span class="comment">!</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;     <span class="comment">! These are fields evaluated on interface levels,</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;     <span class="comment">! e.g. cloudbase (ntml), inversion (ntpar) and levels around these</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;     <span class="comment">!</span></div><div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="structtcs__class__interface_1_1interface__input.xhtml#a068e62c759e14dc53b0b476d4176d8d1">   33</a></span>&#160;     <span class="keywordtype">INTEGER</span>, <span class="keywordtype">POINTER</span> :: n_xx</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;     <span class="comment">! Number of convectively active points</span></div><div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="structtcs__class__interface_1_1interface__input.xhtml#a04c9726c9f71e153fd5a129e91871c50">   35</a></span>&#160;     <span class="keywordtype">INTEGER</span>, <span class="keywordtype">POINTER</span> :: ntra               <span class="comment">! Number of tracers</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;     <span class="comment">! These fields will all have shape (n_xx)</span></div><div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="structtcs__class__interface_1_1interface__input.xhtml#a18cd5c8ed21ebaba4b793ddc1bbe47b8">   37</a></span>&#160;     <span class="keywordtype">INTEGER</span>, <span class="keywordtype">POINTER</span> :: <a class="code" href="s__dims_8h.xhtml#a389c5dad31c15d9a8c93844f6216e36e">levels</a>(:) <span class="comment">! The levels on which the field is evaluated</span></div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="structtcs__class__interface_1_1interface__input.xhtml#ab25240443c444ee94fabadb5193b7ac4">   38</a></span>&#160;     <span class="keywordtype">REAL</span>, <span class="keywordtype">POINTER</span> :: theta(:)</div><div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="structtcs__class__interface_1_1interface__input.xhtml#abc01d7d6b74ebd22f19b94fbaef85a7e">   39</a></span>&#160;     <span class="keywordtype">REAL</span>, <span class="keywordtype">POINTER</span> :: q_mix(:)</div><div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="structtcs__class__interface_1_1interface__input.xhtml#a9cb338bcd358b1ce197a90b7f5b2111b">   40</a></span>&#160;     <span class="keywordtype">REAL</span>, <span class="keywordtype">POINTER</span> :: qse(:)</div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="structtcs__class__interface_1_1interface__input.xhtml#aad59d9e2d06332a7543c3b48d1c267ee">   41</a></span>&#160;     <span class="keywordtype">REAL</span>, <span class="keywordtype">POINTER</span> :: p_theta(:)  <span class="comment">! = p_layer_centres</span></div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="structtcs__class__interface_1_1interface__input.xhtml#a2552df650ace5f3ea520fbee19ea287d">   42</a></span>&#160;     <span class="keywordtype">REAL</span>, <span class="keywordtype">POINTER</span> :: p_rho(:)    <span class="comment">! = p_layer_boundaries</span></div><div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="structtcs__class__interface_1_1interface__input.xhtml#a406e3802ade33cb5a299616ae84519ec">   43</a></span>&#160;     <span class="keywordtype">REAL</span>, <span class="keywordtype">POINTER</span> :: exner_theta(:)   <span class="comment">! = exner_layer_centres</span></div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="structtcs__class__interface_1_1interface__input.xhtml#aefaa049c4fc8c397e8463b537a861b6a">   44</a></span>&#160;     <span class="keywordtype">REAL</span>, <span class="keywordtype">POINTER</span> :: exner_rho(:)     <span class="comment">! = exner_layer_boundaries</span></div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="structtcs__class__interface_1_1interface__input.xhtml#acfbbc383605863ae768fada294aa68a5">   45</a></span>&#160;     <span class="keywordtype">REAL</span>, <span class="keywordtype">POINTER</span> :: z_theta(:)</div><div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="structtcs__class__interface_1_1interface__input.xhtml#aa0cd057324e396c49d86086a3c80ab26">   46</a></span>&#160;     <span class="keywordtype">REAL</span>, <span class="keywordtype">POINTER</span> :: z_rho(:)</div><div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="structtcs__class__interface_1_1interface__input.xhtml#ae466c4b43f182d84f452c064dd9236b1">   47</a></span>&#160;     <span class="keywordtype">REAL</span>, <span class="keywordtype">POINTER</span> :: rho(:)</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;     <span class="comment">!These will have shape (n_xx,ntra)</span></div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="structtcs__class__interface_1_1interface__input.xhtml#a2dd25a5827ba204a43aca744ae85c319">   49</a></span>&#160;     <span class="keywordtype">REAL</span>, <span class="keywordtype">POINTER</span> :: <a class="code" href="ctracera_8h.xhtml#af11ae928fae7e6ee508166ead553bcff">tracer</a>(:,:)</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keyword">  END TYPE </span><a class="code" href="structtcs__class__interface_1_1interface__input.xhtml">interface_input</a></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="keyword">CONTAINS</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keyword">  SUBROUTINE </span><a class="code" href="namespacetcs__class__interface.xhtml#abbc731434c9a6d0e04872860e8b5c3bd">allocate_interface_input</a>(var, n_xx, ntra, initval)</div><div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="namespacetcs__class__interface.xhtml#abbc731434c9a6d0e04872860e8b5c3bd">   55</a></span>&#160;    <span class="comment">!</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="comment">! Allocates memory to a interface_input instance &quot;var&quot;.      ! Inputs &quot;n_xx&quot; and &quot;ntra&quot; define the sizes of the arrays</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="comment">! and if present all fields are initialized to the value &quot;initval&quot;</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="comment">!</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordtype">TYPE</span>(<a class="code" href="structtcs__class__interface_1_1interface__input.xhtml">interface_input</a>) :: var</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">OPTIONAL</span>, <span class="keywordtype">TARGET</span> :: n_xx, ntra</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(in)</span>, <span class="keywordtype">OPTIONAL</span> :: initval</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordtype">LOGICAL</span> :: l_init</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;       <span class="keywordtype">CHARACTER(Len=24)</span>, <span class="keywordtype">PARAMETER</span> ::  RoutineName = <span class="stringliteral">&#39;allocate_interface_input&#39;</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordtype">CHARACTER(Len=58)</span> :: Message</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordtype">INTEGER</span> :: ErrorStatus <span class="comment">! Return code:</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="comment">!   0 = Normal exit</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="comment">! +ve = Fatal Error</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="comment">! -ve = Warning</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordtype">REAL(KIND=jprb)</span>               :: zhook_handle</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;TCS_CLASS_INTERFACE:ALLOCATE_INTERFACE_INPUT&#39;</span>,zhook_in,zhook_handle)</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">IF</span> (<span class="keyword">PRESENT</span>(n_xx)) var%n_xx =&gt; n_xx</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordflow">IF</span> (<span class="keyword">PRESENT</span>(ntra)) var%ntra =&gt; ntra</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">IF</span> (.NOT. (<span class="keyword">ASSOCIATED</span>(var%n_xx) .AND. <span class="keyword">ASSOCIATED</span>(var%ntra))) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;      errorstatus=1</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;      <span class="keyword">WRITE</span>(message, <span class="stringliteral">&#39;(A54)&#39;</span>) &amp;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;         <span class="stringliteral">&#39; Error allocating interface_input: Dimensions not defined &#39;</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;           <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a>(routinename, errorstatus, message)</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="comment">! variables with shape (n_xx)</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">ALLOCATE</span>(var%levels(var%n_xx))</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keyword">ALLOCATE</span>(var%theta(var%n_xx))</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keyword">ALLOCATE</span>(var%q_mix(var%n_xx))</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">ALLOCATE</span>(var%qse(var%n_xx))</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keyword">ALLOCATE</span>(var%p_theta(var%n_xx))</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keyword">ALLOCATE</span>(var%p_rho(var%n_xx))</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keyword">ALLOCATE</span>(var%exner_theta(var%n_xx))</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keyword">ALLOCATE</span>(var%exner_rho(var%n_xx))</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keyword">ALLOCATE</span>(var%z_theta(var%n_xx))</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keyword">ALLOCATE</span>(var%z_rho(var%n_xx))</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keyword">ALLOCATE</span>(var%rho(var%n_xx))</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="comment">! variables with shape (n_xx, ntra)</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keyword">ALLOCATE</span>(var%tracer(var%n_xx,var%ntra))</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="comment">! initialise if required.</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordflow">IF</span> (<span class="keyword">PRESENT</span>(initval))<span class="keywordflow">THEN</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;      l_init=.true.    <span class="keywordflow">ELSE</span>      l_init=.false.</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">IF</span> (l_init)<span class="keywordflow">THEN</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;      var%theta       =<span class="keywordtype">REAL</span>(initval)</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;      var%q_mix       =<span class="keywordtype">REAL</span>(initval)</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;      var%qse         =<span class="keywordtype">REAL</span>(initval)</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;      var%p_theta     =<span class="keywordtype">REAL</span>(initval)</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;      var%p_rho       =<span class="keywordtype">REAL</span>(initval)</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;      var%exner_theta =<span class="keywordtype">REAL</span>(initval)</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;      var%exner_rho   =<span class="keywordtype">REAL</span>(initval)</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;      var%z_theta     =<span class="keywordtype">REAL</span>(initval)</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;      var%z_rho       =<span class="keywordtype">REAL</span>(initval)</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;      var%rho         =<span class="keywordtype">REAL</span>(initval)</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;      var%tracer      =<span class="keywordtype">REAL</span>(initval)</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;TCS_CLASS_INTERFACE:ALLOCATE_INTERFACE_INPUT&#39;</span>,zhook_out,zhook_handle)</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="keyword">  END SUBROUTINE </span><a class="code" href="namespacetcs__class__interface.xhtml#abbc731434c9a6d0e04872860e8b5c3bd">allocate_interface_input</a></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="keyword">  SUBROUTINE </span><a class="code" href="namespacetcs__class__interface.xhtml#a6ec136440415a5566db9ba4323e34128">deallocate_interface_input</a>(var)</div><div class="line"><a name="l00124"></a><span class="lineno"><a class="line" href="namespacetcs__class__interface.xhtml#a6ec136440415a5566db9ba4323e34128">  124</a></span>&#160;    <span class="comment">!</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="comment">! Deallocates memory assocciated with cloud_input instance &quot;var&quot;.      !</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;       <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordtype">TYPE</span>(<a class="code" href="structtcs__class__interface_1_1interface__input.xhtml">interface_input</a>) :: var</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordtype">REAL(KIND=jprb)</span>               :: zhook_handle</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;TCS_CLASS_INTERFACE:DEALLOCATE_INTERFACE_INPUT&#39;</span>,zhook_in,zhook_handle)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keyword">NULLIFY</span>(var%n_xx)</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keyword">NULLIFY</span>(var%ntra)</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="comment">!    nullify(var%levels)</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keyword">DEALLOCATE</span>(var%tracer)</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keyword">DEALLOCATE</span>(var%rho)</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keyword">DEALLOCATE</span>(var%z_rho)</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keyword">DEALLOCATE</span>(var%z_theta)</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keyword">DEALLOCATE</span>(var%exner_rho)</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keyword">DEALLOCATE</span>(var%exner_theta)</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keyword">DEALLOCATE</span>(var%p_rho)</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keyword">DEALLOCATE</span>(var%p_theta)</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keyword">DEALLOCATE</span>(var%qse)</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keyword">DEALLOCATE</span>(var%q_mix)</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keyword">DEALLOCATE</span>(var%theta)</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keyword">DEALLOCATE</span>(var%levels)</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;TCS_CLASS_INTERFACE:DEALLOCATE_INTERFACE_INPUT&#39;</span>,zhook_out,zhook_handle)</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="keyword">  END SUBROUTINE </span><a class="code" href="namespacetcs__class__interface.xhtml#a6ec136440415a5566db9ba4323e34128">deallocate_interface_input</a></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="keyword">  SUBROUTINE </span><a class="code" href="namespacetcs__class__interface.xhtml#ae93a8ddb9d274138c0eb8ee06a88c92d">assign_interface_input</a>(var, levels, theta,    &amp;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;     q_mix, qse, p_theta, p_rho, exner_theta, exner_rho, &amp;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;     z_theta, z_rho, rho, tracer )    <span class="comment">!</span></div><div class="line"><a name="l00159"></a><span class="lineno"><a class="line" href="namespacetcs__class__interface.xhtml#ae93a8ddb9d274138c0eb8ee06a88c92d">  159</a></span>&#160;    <span class="comment">! Assigns values to a interface_input instance &quot;var&quot;.      !</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keywordtype">TYPE</span>(<a class="code" href="structtcs__class__interface_1_1interface__input.xhtml">interface_input</a>), <span class="keywordtype">INTENT(inout)</span> :: var</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(in)</span>, <span class="keywordtype">TARGET</span> :: levels(:)</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(in)</span> :: theta(:,:)</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(in)</span> :: q_mix(:,:)</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(in)</span> :: qse(:,:)</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(in)</span> :: p_theta(:,0:)      <span class="comment">! input starts 0</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(in)</span> :: p_rho(:,0:)        <span class="comment">! input starts 0</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(in)</span> :: exner_theta(:,0:)  <span class="comment">! input starts 0</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(in)</span> :: exner_rho(:,0:)    <span class="comment">! input starts 0</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(in)</span> :: z_theta(:,:)</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(in)</span> :: z_rho(:,:)</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(in)</span> :: rho(:,:)</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(in)</span> :: tracer(:,:,:)</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keywordtype">INTEGER</span> :: i</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keywordtype">REAL(KIND=jprb)</span>               :: zhook_handle</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;TCS_CLASS_INTERFACE:ASSIGN_INTERFACE_INPUT&#39;</span>,zhook_in,zhook_handle)</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordflow">DO</span> i=1,var%n_xx</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;      var%levels(i)      = levels(i)</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;      var%theta(i)       = theta(i,levels(i))</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;      var%q_mix(i)       = q_mix(i,levels(i))</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;      var%qse(i)         = qse(i,levels(i))</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;      var%p_theta(i)     = p_theta(i,levels(i))</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;      var%p_rho(i)       = p_rho(i,levels(i))</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;      var%exner_theta(i) = exner_theta(i,levels(i))</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;      var%exner_rho(i)   = exner_rho(i,levels(i))</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;      var%z_theta(i)     = z_theta(i,levels(i))</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;      var%z_rho(i)       = z_rho(i,levels(i))</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;      var%rho(i)         = rho(i,levels(i))</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;      <span class="comment">! Working note: need to put on a check that tracer</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;      <span class="comment">! levels go up to levels(i) - c.f. also assign_cloud_input</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;      var%tracer(i,:)    = tracer(i,levels(i),:)</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;TCS_CLASS_INTERFACE:ASSIGN_INTERFACE_INPUT&#39;</span>,zhook_out,zhook_handle)</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="keyword">  END SUBROUTINE </span><a class="code" href="namespacetcs__class__interface.xhtml#ae93a8ddb9d274138c0eb8ee06a88c92d">assign_interface_input</a></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="keyword">END MODULE </span><a class="code" href="namespacetcs__class__interface.xhtml" title="Module defining the tcs warm rain &quot;interface_input&quot; derived type and!&gt; subroutines for allocating and...">tcs_class_interface</a></div></div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
