<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>UM General Atmosphere: /home/wilfred/PhD/UM/src/scm/modules/scmoptype_defn.f90 Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="unified_model_logo_2.jpeg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">UM General Atmosphere
   &#160;<span id="projectnumber">8.6</span>
   </div>
   <div id="projectbrief">UK Met Offices Unified Model</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_b97be95e70c2cb49b099ac39ba4801c2.xhtml">scm</a></li><li class="navelem"><a class="el" href="dir_5dcf8566cbfc1b4aff361a6c29396def.xhtml">modules</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">scmoptype_defn.f90</div>  </div>
</div><!--header-->
<div class="contents">
<a href="scmoptype__defn_8f90.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno"><a class="line" href="namespacescmoptype__defn.xhtml">    9</a></span>&#160;<span class="keyword">MODULE</span> <a class="code" href="namespacescmoptype__defn.xhtml" title="Defines the derived-type, SCMop_type, necessary for declaring. ">scmoptype_defn</a></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">! Description:</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespaceum__types.xhtml" title="Code Owner: See Unified Model Code owners HTML page. ">um_types</a></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="namespacescmoptype__defn.xhtml#a06b3f0cf7b5a58f3e0b994d16e9406de">   37</a></span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">PARAMETER</span> :: <a class="code" href="namespacescmoptype__defn.xhtml#a06b3f0cf7b5a58f3e0b994d16e9406de" title="Short-hands for integer64, real64 and logical64. ">i64</a> = <a class="code" href="namespaceum__types.xhtml#a8310ef8ca1959dbd923b9dc3b0b3b67a">integer64</a></div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="namespacescmoptype__defn.xhtml#ac092e51697cabeda9c527f82dc6b5625">   38</a></span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">PARAMETER</span> :: <a class="code" href="namespacescmoptype__defn.xhtml#ac092e51697cabeda9c527f82dc6b5625">r64</a> = <a class="code" href="namespaceum__types.xhtml#acb0e6f96907b900d65a64c5677f45b8b">real64</a></div><div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="namespacescmoptype__defn.xhtml#ad9dc89892152e20918c70097f7593ba9">   39</a></span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">PARAMETER</span> :: <a class="code" href="namespacescmoptype__defn.xhtml#ad9dc89892152e20918c70097f7593ba9">l64</a> = <a class="code" href="namespaceum__types.xhtml#ad694bf2158d535065abd5267f3bbd083">logical64</a></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="namespacescmoptype__defn.xhtml#ad84015e5dd43996db3394c7a670931dd">   42</a></span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">PARAMETER</span> :: <a class="code" href="namespacescmoptype__defn.xhtml#ad84015e5dd43996db3394c7a670931dd" title="Precision of integers passed in to &amp; out of NetCDF routines. ">incdf</a> = <a class="code" href="namespaceum__types.xhtml#af5fbacdfa62f7f4f6d3aaab1a1149e9a">integer32</a></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="namespacescmoptype__defn.xhtml#aaea05138ea49054079bbb0a2ab43d326">   45</a></span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">PARAMETER</span> :: <a class="code" href="namespacescmoptype__defn.xhtml#aaea05138ea49054079bbb0a2ab43d326" title="Some limits. ">maxndomprof</a> = 99</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="namespacescmoptype__defn.xhtml#a433ea53f0382c7ca99a76aead0ea2d10">   48</a></span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">PARAMETER</span> :: &amp;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="namespacescmoptype__defn.xhtml#a704538bdde0d7c1cc2adb58989600ddd" title="The lengths of certain character variables. ">lfilename</a> = 100     &amp;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  , <a class="code" href="namespacescmoptype__defn.xhtml#aa0025fececb179f45806f37e250349df">lsname</a>    = 30      &amp;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  , <a class="code" href="namespacescmoptype__defn.xhtml#acc8c63193280afbdfbc657162faced36">llname</a>    = 50      &amp;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  , <a class="code" href="namespacescmoptype__defn.xhtml#a433ea53f0382c7ca99a76aead0ea2d10">lunits</a>    = 15</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="namespacescmoptype__defn.xhtml#a7efd9648b2e02528ea21728afcd689b1">   57</a></span>&#160;  <span class="keywordtype">CHARACTER(LEN=lfilename)</span>, <span class="keywordtype">PARAMETER</span> :: <a class="code" href="namespacescmoptype__defn.xhtml#a7efd9648b2e02528ea21728afcd689b1" title="If the filename of a stream is set to this the name will be ignored and the stream will be opened wit...">default</a>=<span class="stringliteral">&#39;&lt;default&gt;&#39;</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="namespacescmoptype__defn.xhtml#a3f60f9478a654738d44df0e07cdb3d96">   62</a></span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">PARAMETER</span> :: <a class="code" href="namespacescmoptype__defn.xhtml#a3f60f9478a654738d44df0e07cdb3d96" title="The maximum no. of streams must be such that Stream(maxnstreams+1) gives an integer which is not too ...">maxnstreams</a>  = 29</div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="namespacescmoptype__defn.xhtml#a224a81f93aefb8174dc171ce5e5eaaf7">   63</a></span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">PARAMETER</span> :: <a class="code" href="namespacescmoptype__defn.xhtml#a224a81f93aefb8174dc171ce5e5eaaf7">inot_written</a> = <a class="code" href="namespacescmoptype__defn.xhtml#a3f60f9478a654738d44df0e07cdb3d96" title="The maximum no. of streams must be such that Stream(maxnstreams+1) gives an integer which is not too ...">maxnstreams</a>+1</div><div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="namespacescmoptype__defn.xhtml#ab6b7dad7e19aa778110914c57cbee404">   64</a></span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">PARAMETER</span> :: <a class="code" href="namespacescmoptype__defn.xhtml#ab6b7dad7e19aa778110914c57cbee404">listlength</a>   = 5000</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1allocatable__array.xhtml">   71</a></span>&#160;  <span class="keyword">TYPE</span> <a class="code" href="structscmoptype__defn_1_1allocatable__array.xhtml" title="A diagnostic&#39;s dump array has its own type so that we can declare an array of arrays and allocate mem...">allocatable_array</a></div><div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1allocatable__array.xhtml#a889b042e4028b8d943f4b0747fddaa66">   72</a></span>&#160;    <span class="keywordtype">REAL(r64)</span>, <span class="keywordtype">POINTER</span> :: dump(:)</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="keyword">  END TYPE </span><a class="code" href="structscmoptype__defn_1_1allocatable__array.xhtml" title="A diagnostic&#39;s dump array has its own type so that we can declare an array of arrays and allocate mem...">allocatable_array</a></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1astream.xhtml">   79</a></span>&#160;  <span class="keyword">TYPE</span> <a class="code" href="structscmoptype__defn_1_1astream.xhtml" title="A stream has its own type to clearly separate its entries in SCMop from those corresponding to indivi...">astream</a></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;   <span class="comment">! The unit the stream will write to</span></div><div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1astream.xhtml#ac3009295959434f017f8382b564e3abc">   82</a></span>&#160;    <span class="keywordtype">INTEGER(i64)</span> :: op_unit</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;   <span class="comment">! The name of the file it will create (if not set to default)</span></div><div class="line"><a name="l00085"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1astream.xhtml#acba6f1eb750c53d8a08d918d1d3ccbe2">   85</a></span>&#160;    <span class="keywordtype">CHARACTER (LEN=lfilename)</span> :: filename</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;         <span class="comment">! The dumping period of the diagnostics sent to this stream</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;         <span class="comment">! (i.e. if a diagnostic is an average it is the number of</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;         <span class="comment">! timesteps it is averaged over, if it is an accumulation it</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;         <span class="comment">! is the number of timesteps it is accumulated over, if it is</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;         <span class="comment">! a maximum it is the number of timesteps it is the maximum</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;         <span class="comment">! over, etc.)</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1astream.xhtml#a1aa81ef88e4068ed4dbaf2450dc786bb">   93</a></span>&#160;    <span class="keywordtype">INTEGER(i64)</span> :: dump_step</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;         <span class="comment">! Flags whether diagnostics sent to this stream by the</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;         <span class="comment">! respective input to routine SCMoutput will actually be</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;         <span class="comment">! sent to this stream.</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1astream.xhtml#a48d46ccf266565c542047bbbdc9cd575">   98</a></span>&#160;    <span class="keywordtype">INTEGER(i64)</span> :: heed_hardwired</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;         <span class="comment">! Flags whether diagnostics sent to this stream by namelist</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;         <span class="comment">! request will actually be sent to this stream.</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1astream.xhtml#a25babe37c970e62ab327ed65be65baa2">  102</a></span>&#160;    <span class="keywordtype">INTEGER(i64)</span> :: heed_acceptlist</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;         <span class="comment">! Flags whether diagnostics prevented from going to this</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;         <span class="comment">! stream by namelist request will actually be prevented.</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1astream.xhtml#a46dd31efdd3cf4163ed7349e0990a09b">  106</a></span>&#160;    <span class="keywordtype">INTEGER(i64)</span> :: heed_rejectlist</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1astream.xhtml#a6199cef1f7d8da00854e5f5e43016364">  108</a></span>&#160;    <span class="keywordtype">CHARACTER (LEN=lsname)</span>, <span class="keywordtype">POINTER</span> :: accept_list(:)</div><div class="line"><a name="l00109"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1astream.xhtml#a7b910ace21c997df093374e3cd799aa9">  109</a></span>&#160;    <span class="keywordtype">CHARACTER (LEN=lsname)</span>, <span class="keywordtype">POINTER</span> :: reject_list(:)</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1astream.xhtml#abd54b737225b5e03f07e376a26a062ab">  111</a></span>&#160;    <span class="keywordtype">INTEGER(i64)</span> :: switch <span class="comment">! If zero, stream is not active.</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1astream.xhtml#ae71d90ddd490efa0808d42b7ba49a965">  113</a></span>&#160;    <span class="keywordtype">INTEGER(i64)</span> :: format    <span class="comment">! Determines format of output file.</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                              <span class="comment">! 0 = format intended for subsequent reading</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                              <span class="comment">!     by PV-wave routine scmread2.pro</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                              <span class="comment">!     (used by scmoutput.pro)</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                              <span class="comment">! 1 = format geared to easy perusal by eye</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                              <span class="comment">! 2 = format suitable for FSSI database</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                              <span class="comment">! 3 = new PV-wave format designed to replace</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                              <span class="comment">!     format 0. Can be read by same routines.</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1astream.xhtml#a9e981177ca71935678089d5f4aac8052">  122</a></span>&#160;    <span class="keywordtype">INTEGER(i64)</span> :: n_output  <span class="comment">! The number of diagnostics that</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                              <span class="comment">! will be output to this stream</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="keyword">  END TYPE </span><a class="code" href="structscmoptype__defn_1_1astream.xhtml" title="A stream has its own type to clearly separate its entries in SCMop from those corresponding to indivi...">astream</a></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">! Define the derived type for SCMop. SCMop carries all</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">! necessary diagnostic information from the top(ish) level</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">! down to wherever any diagnostic is actually calculated,</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">! and then back up to the top for output.</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1scmop__type.xhtml">  133</a></span>&#160;  <span class="keyword">TYPE</span> <a class="code" href="structscmoptype__defn_1_1scmop__type.xhtml">scmop_type</a></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;         <span class="comment">! Flags whether diagnostic system is &quot;switched on&quot;</span></div><div class="line"><a name="l00136"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1scmop__type.xhtml#af6f4c85e3f5e9b942de25d3912cab756">  136</a></span>&#160;    <span class="keywordtype">LOGICAL(l64)</span> :: on</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;         <span class="comment">! first_pass will be true during all calls to SCMoutput in</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;         <span class="comment">! the first timestep (a formative stage for the list of</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;         <span class="comment">! diagnostics), and false thereafter (when the creation of</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;         <span class="comment">! new diagnostics will not be allowed).</span></div><div class="line"><a name="l00142"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1scmop__type.xhtml#a9a1f02b51e81613fa652c1eab913ae02">  142</a></span>&#160;    <span class="keywordtype">LOGICAL(l64)</span> :: first_pass</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;         <span class="comment">! Pointers to daycount and stepcount, and knowledge of</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;         <span class="comment">! full_daysteps (all declared and defined in scm_main) are</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;         <span class="comment">! required so SCMop can tell the time.</span></div><div class="line"><a name="l00147"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1scmop__type.xhtml#a3b813ae8035213f3dcc84da0a9b0a39d">  147</a></span>&#160;    <span class="keywordtype">INTEGER(i64)</span>, <span class="keywordtype">POINTER</span> :: daycount,stepcount</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1scmop__type.xhtml#afd4c25e35ba54b0321827a57bc36ce80">  149</a></span>&#160;    <span class="keywordtype">INTEGER(i64)</span> :: full_daysteps</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;         <span class="comment">! Knowledge of ntrad1 and ntrad (the first timestep on which</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;         <span class="comment">! radiation is called and the number of timesteps between calls</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;         <span class="comment">! thereafter) is required by SCMop to make sense of diagnostics</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;         <span class="comment">! only calculated on radiation timesteps.</span></div><div class="line"><a name="l00155"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1scmop__type.xhtml#a06c9660129e629342f80d62fa8460f2c">  155</a></span>&#160;    <span class="keywordtype">INTEGER(i64)</span> :: ntrad1,ntrad</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;         <span class="comment">! An encoded integer representing which output streams are</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;         <span class="comment">! open (i.e. which streams will be output to file).</span></div><div class="line"><a name="l00159"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1scmop__type.xhtml#a3040f1f25387e2ed74c312337f83b052">  159</a></span>&#160;    <span class="keywordtype">INTEGER(i64)</span> :: openstreams</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;         <span class="comment">! We want a certain number of streams, we will allocate</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;         <span class="comment">! exactly how many at runtime.</span></div><div class="line"><a name="l00163"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1scmop__type.xhtml#a7355094b377da185a90a3b41bffd91b6">  163</a></span>&#160;    <span class="keywordtype">TYPE</span>(<a class="code" href="structscmoptype__defn_1_1astream.xhtml" title="A stream has its own type to clearly separate its entries in SCMop from those corresponding to indivi...">astream</a>), <span class="keywordtype">POINTER</span> :: strm(:)</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;         <span class="comment">! maxnentries will be the size of all the arrays associated</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;         <span class="comment">! with the diagnostic entries (sname, etc.) once allocated.</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;         <span class="comment">! It can be increased at runtime in routine expand_SCMop.</span></div><div class="line"><a name="l00168"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1scmop__type.xhtml#ae4f154decfcbea1cfddb129bbb13c303">  168</a></span>&#160;    <span class="keywordtype">INTEGER(i64)</span> :: maxnentries</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;         <span class="comment">! nentries, n_output and nSCMoutput will be the total number</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;         <span class="comment">! of diagnostic entries in SCMop, the number of those entries</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;         <span class="comment">! being output to any stream (with no multiple counting of</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;         <span class="comment">! entries resulting from the same call to SCMoutput), and</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;         <span class="comment">! the number of calls made to SCMoutput so far this timestep</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;         <span class="comment">! respectively.</span></div><div class="line"><a name="l00176"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1scmop__type.xhtml#a7a4c8c3fd503020ff12f4ea79b33a326">  176</a></span>&#160;    <span class="keywordtype">INTEGER(i64)</span> :: nentries,n_output,nscmoutput</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;         <span class="comment">! Will hold the total number of expected/observed sub-steps</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;         <span class="comment">! and the current sub-step number</span></div><div class="line"><a name="l00180"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1scmop__type.xhtml#a794878aed1e615a50495e7dfe58edf8c">  180</a></span>&#160;    <span class="keywordtype">INTEGER(i64)</span> :: num_substeps,substep_number</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;         <span class="comment">! The diagnostic entries, 1:nentries have been set by newdiag</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;         <span class="comment">! via a call to SCMoutput. IF A NEW ARRAY IS ADDED HERE, THERE</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;         <span class="comment">! MUST BE AN ASSOCIATED SECTION OF CODE IN ROUTINE EXPAND_SCMOP.</span></div><div class="line"><a name="l00185"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1scmop__type.xhtml#a7543287842d8e37f48e6cb502d8bbee3">  185</a></span>&#160;    <span class="keywordtype">CHARACTER(LEN=lsname)</span>, <span class="keywordtype">POINTER</span> :: sname(:) <span class="comment">! Short name</span></div><div class="line"><a name="l00186"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1scmop__type.xhtml#a42c16bd0c811f81f5b995154955e7a44">  186</a></span>&#160;    <span class="keywordtype">CHARACTER(LEN=llname)</span>, <span class="keywordtype">POINTER</span> :: lname(:) <span class="comment">! Long name</span></div><div class="line"><a name="l00187"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1scmop__type.xhtml#a9ed7ee5a7411eb7fba155a43c630180a">  187</a></span>&#160;    <span class="keywordtype">CHARACTER(LEN=lunits)</span>, <span class="keywordtype">POINTER</span> :: units(:) <span class="comment">! Units</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1scmop__type.xhtml#a3e7100ec6d0e0b1d34b8a8ced859af5a">  189</a></span>&#160;    <span class="keywordtype">INTEGER(i64)</span>, <span class="keywordtype">POINTER</span> :: &amp;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;      domprof(:)       &amp;<span class="comment">! Domain profile</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    , timprof(:)       &amp;<span class="comment">! Time profile</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    , streams(:)       &amp;<span class="comment">! List of streams to write to</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    , dump_step(:)     &amp;<span class="comment">! Dumping period</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    , nadd2dump(:)     &amp;<span class="comment">! Number of calls to add2dump this period</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    , <a class="code" href="aflddima_8h.xhtml#a9b67803737a34a62ca32894ca567dd94">ncols</a>(:)         &amp;<span class="comment">! No. of columns</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    , nrows(:)         &amp;<span class="comment">! No. of rows</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    , nlevs(:)         &amp;<span class="comment">! No. of levels</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    , nelements(:)     &amp;<span class="comment">! elements in total (given the domain profile)</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    , sname_id(:)      &amp;<span class="comment">! An integer unique to each sname</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    , wd(:)            &amp;<span class="comment">! Index of another entry upon which this entry depends</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    , lastencounter(:) &amp;<span class="comment">! Last timestep this entry was seen by SCMoutput</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    , substep(:)        <span class="comment">! Substep this entry pertains to</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1scmop__type.xhtml#a683afed67578b4e1ea5486da62d15f17">  204</a></span>&#160;    <span class="keywordtype">LOGICAL(l64)</span>, <span class="keywordtype">POINTER</span> :: &amp;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;      only_radsteps(:)  <span class="comment">! Only defined on radiation timesteps?</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1scmop__type.xhtml#a0548ec3a0bf22058b84c97eae53509ee">  207</a></span>&#160;    <span class="keywordtype">INTEGER(incdf)</span>, <span class="keywordtype">POINTER</span> :: &amp;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;      netcdf_id(:)      <span class="comment">! A NetCDF integer id</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1scmop__type.xhtml#ab372bae09d57e12486afdce435ab0b4e">  210</a></span>&#160;    <span class="keywordtype">TYPE</span>(<a class="code" href="structscmoptype__defn_1_1allocatable__array.xhtml" title="A diagnostic&#39;s dump array has its own type so that we can declare an array of arrays and allocate mem...">allocatable_array</a>), <span class="keywordtype">POINTER</span> :: &amp;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;      <a class="code" href="namespacestextend__mod.xhtml#a52bd2500d422e2df66638626d8dc3613">diag</a>(:)           <span class="comment">! Dump array</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="comment">! The domain profiles, set by define_domprof.</span></div><div class="line"><a name="l00214"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1scmop__type.xhtml#a3d224cfd0f53f6c92a8102365a939dac">  214</a></span>&#160;    <span class="keywordtype">CHARACTER (LEN=15)</span> ::   &amp;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;      d_name(<a class="code" href="namespacescmoptype__defn.xhtml#aaea05138ea49054079bbb0a2ab43d326" title="Some limits. ">maxndomprof</a>)</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1scmop__type.xhtml#ae8150348a49f582e1eae10adaa9c1d6d">  217</a></span>&#160;    <span class="keywordtype">INTEGER(i64)</span> ::         &amp;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;      d_rowa1 (<a class="code" href="namespacescmoptype__defn.xhtml#aaea05138ea49054079bbb0a2ab43d326" title="Some limits. ">maxndomprof</a>) &amp;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    , d_rowa2 (<a class="code" href="namespacescmoptype__defn.xhtml#aaea05138ea49054079bbb0a2ab43d326" title="Some limits. ">maxndomprof</a>) &amp;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    , d_rowb1 (<a class="code" href="namespacescmoptype__defn.xhtml#aaea05138ea49054079bbb0a2ab43d326" title="Some limits. ">maxndomprof</a>) &amp;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    , d_rowb2 (<a class="code" href="namespacescmoptype__defn.xhtml#aaea05138ea49054079bbb0a2ab43d326" title="Some limits. ">maxndomprof</a>) &amp;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    , d_lev1  (<a class="code" href="namespacescmoptype__defn.xhtml#aaea05138ea49054079bbb0a2ab43d326" title="Some limits. ">maxndomprof</a>) &amp;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    , d_lev2  (<a class="code" href="namespacescmoptype__defn.xhtml#aaea05138ea49054079bbb0a2ab43d326" title="Some limits. ">maxndomprof</a>)</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;         <span class="comment">! This array will be used to memorise the order in which the</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;         <span class="comment">! calls to SCMoutput take place, which saves time in SCMoutput</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;         <span class="comment">! by avoiding the translation between the inputs and the</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;         <span class="comment">! corresponding diagnostic entries in this structure</span></div><div class="line"><a name="l00229"></a><span class="lineno"><a class="line" href="structscmoptype__defn_1_1scmop__type.xhtml#af655decbf1d954a6b136cb51036cbd49">  229</a></span>&#160;    <span class="keywordtype">INTEGER(i64)</span>, <span class="keywordtype">POINTER</span> :: diag_mem(:,:)</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="keyword">  END TYPE </span><a class="code" href="structscmoptype__defn_1_1scmop__type.xhtml">scmop_type</a></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="keyword">END MODULE </span><a class="code" href="namespacescmoptype__defn.xhtml" title="Defines the derived-type, SCMop_type, necessary for declaring. ">scmoptype_defn</a></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div></div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
