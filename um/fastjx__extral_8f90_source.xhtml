<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>UM General Atmosphere: /home/wilfred/PhD/UM/src/atmosphere/UKCA/fastjx_extral.f90 Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="unified_model_logo_2.jpeg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">UM General Atmosphere
   &#160;<span id="projectnumber">8.6</span>
   </div>
   <div id="projectbrief">UK Met Offices Unified Model</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_1df14ea1ac826f73bc3062fa8a76e0c2.xhtml">atmosphere</a></li><li class="navelem"><a class="el" href="dir_3b087d695daa154bfcb7242bcfd0fbd3.xhtml">UKCA</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">fastjx_extral.f90</div>  </div>
</div><!--header-->
<div class="contents">
<a href="fastjx__extral_8f90.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">!  Description:</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;-the log-spacing parameters have been tested for convergence and chosen</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;-  to be within 0.5% for ranges od=1-500, rflect=0-100%, mu0=0.1-1.0</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;-  <span class="keywordtype">use </span>of atau = 1.18 and min = 0.01, gives at most +135 pts for od=100-  atau = 1.12 now recommended for more -accurate heating rates (not <a class="code" href="arg__atm__fields_8h.xhtml#a00a9fc8d0f901f46d72445df9f6f4127">j</a><span class="stringliteral">&#39;s)</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="stringliteral"></span><span class="stringliteral"></span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="stringliteral"></span><span class="stringliteral">!</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="stringliteral"></span><span class="stringliteral">!&gt;  Part of the UKCA model, a community model supported by</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="stringliteral"></span><span class="stringliteral">!&gt;  The Met Office and NCAS, with components provided initially</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="stringliteral"></span><span class="stringliteral">!&gt;  by The University of Cambridge, University of Leeds and</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="stringliteral"></span><span class="stringliteral">!&gt;  The Met. Office.  See www.ukca.ac.uk</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="stringliteral"></span><span class="stringliteral">!</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="stringliteral"></span><span class="stringliteral">!&gt; This file belongs in section: UKCA</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="stringliteral"></span><span class="stringliteral">!</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="stringliteral"></span><span class="stringliteral">!  Code Description:</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="stringliteral"></span><span class="stringliteral">!&gt;    Language:  FORTRAN 90</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="stringliteral"></span><span class="stringliteral">!</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="stringliteral"></span><span class="stringliteral">!&gt; ######################################################################</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="stringliteral"></span><span class="stringliteral">!</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      SUBROUTINE FASTJX_EXTRAL(dtaux,l1x,l2x,nx,jtaumx,atau,atau0, jxtra)</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="stringliteral"></span><span class="stringliteral"></span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      USE ereport_mod,          ONLY: ereport</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      USE umPrintMgr          USE yomhook, ONLY: lhook, dr_hook</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      USE parkind1, ONLY: jprb, jpim</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      IMPLICIT NONE</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="stringliteral"></span><span class="stringliteral"></span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      ! index of cloud/aerosol</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      INTEGER, INTENT(IN)  ::  jtaumx,l1x,l2x       ! mie scattering array size</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      INTEGER, INTENT(IN)  ::  nx                   ! cloud+3aerosol od in each layer</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      REAL,    INTENT(IN)  ::  dtaux(l1x)           !      REAL,    INTENT(IN)  ::  atau,atau0</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      ! number of sub-layers to be added</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      INTEGER, INTENT(OUT) ::  jxtra(l2x+1)   </span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      ! End of I/O</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="stringliteral"></span><span class="stringliteral"></span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      ! Loop variables</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      INTEGER              :: jtotl,i,l,l2</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      REAL                 :: ttau(l2x+1)</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      REAL                 :: dtauj</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      REAL                 :: atau1</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      REAL                 :: atauln</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      REAL                 :: ataum</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      REAL                 :: ataun1</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      INTEGER              :: errcode</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      CHARACTER (LEN=70)   :: cmessage      ! error message</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="stringliteral"></span><span class="stringliteral"></span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      INTEGER(KIND=jpim), PARAMETER :: zhook_in  = 0</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      INTEGER(KIND=jpim), PARAMETER :: zhook_out = 1</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      REAL(KIND=jprb)               :: zhook_handle</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="stringliteral"></span><span class="stringliteral"></span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="stringliteral"></span><span class="stringliteral"></span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="stringliteral"></span><span class="stringliteral">!&gt;***************************************************************</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="stringliteral"></span><span class="stringliteral">!&gt; End of Header</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="stringliteral"></span><span class="stringliteral"></span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      IF (lhook) CALL dr_hook(&#39;</span>fastjx_extral<span class="stringliteral">&#39;,zhook_in,zhook_handle)</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="stringliteral"></span><span class="stringliteral"></span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="stringliteral"></span><span class="stringliteral">!&gt; Set arrays to 0</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      ttau(:)  = 0.E0</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      jxtra(:) = 0</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="stringliteral"></span><span class="stringliteral"> ! Combine these edge- and mid-layer points into grid of size:</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="stringliteral"></span><span class="stringliteral">!&gt;  l2x+1 = 2*l1x+1 = 2*l_+3</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="stringliteral"></span><span class="stringliteral">!&gt; Calculate column optical depths above each level, ttau(1:l2x+1)</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="stringliteral"></span><span class="stringliteral">!&gt;  note that ttau(l2x+1)=0 and ttau(1)=total od</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="stringliteral"></span><span class="stringliteral"></span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="stringliteral"></span><span class="stringliteral">!&gt; Divide thick layers to achieve better accuracy in the scattering code</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="stringliteral"></span><span class="stringliteral">!&gt;  in the original fast-j, equal sub-layers were chosen, this is wasteful</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="stringliteral"></span><span class="stringliteral">!&gt;  and this new code (ver 5.3) uses log-scale: !&gt;  each succesive layer (down) increase thickness by atau &gt; 1</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="stringliteral"></span><span class="stringliteral">!&gt;  e.g., if atau = 2, a layer with od = 15 could be divided into</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="stringliteral"></span><span class="stringliteral">!&gt;  4 sub-layers with ods = 1 - 2 - 4 - 8</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="stringliteral"></span><span class="stringliteral">!&gt;  the key parameters are:</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="stringliteral"></span><span class="stringliteral">!&gt;    atau = factor increase from one layer to the next</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="stringliteral"></span><span class="stringliteral">!&gt;    ataumn = the smallest od layer desired</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="stringliteral"></span><span class="stringliteral">!&gt;    jtaumx = maximum number of divisions (i.e., may not get to ataumn)</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="stringliteral"></span><span class="stringliteral">!&gt;  these are hardwired below, can be changed, but have been tested/optimized</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="stringliteral"></span><span class="stringliteral"></span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      atau1  = atau - 1.E0</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      atauln = LOG(atau)</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="stringliteral"></span><span class="stringliteral">        ttau(l2x+1)  = 0.0E0</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      DO l2 = l2x,1,-1</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="stringliteral"></span><span class="stringliteral">        l         = (l2+1)/2</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="stringliteral"></span><span class="stringliteral">        dtauj     = 0.5E0 * dtaux(l)</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="stringliteral"></span><span class="stringliteral">        ttau(l2)  = ttau(l2+1) + dtauj</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="stringliteral"></span><span class="stringliteral"></span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="stringliteral"></span><span class="stringliteral">        ! now compute the number of log-spaced sub-layers to be added in</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="stringliteral"></span><span class="stringliteral">        ! the interval ttau(l2) &gt; ttau(l2+1)</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="stringliteral"></span><span class="stringliteral">        ! the objective is to have successive tau-layers increasing by        ! factor atau &gt;1 the number of sub-layers + 1</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="stringliteral"></span><span class="stringliteral">        IF (ttau(l2) &lt; atau0) THEN</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="stringliteral"></span><span class="stringliteral">          jxtra(l2) = 0</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="stringliteral"></span><span class="stringliteral">        ELSE</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="stringliteral"></span><span class="stringliteral">          ataum     = MAX(atau0, ttau(l2+1))</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="stringliteral"></span><span class="stringliteral">          ataun1    = LOG(ttau(l2)/ataum) / atauln</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="stringliteral"></span><span class="stringliteral">          jxtra(l2) = MIN(jtaumx, MAX(0, INT(ataun1 - 0.5E0)))</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="stringliteral"></span><span class="stringliteral">        END IF</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      END DO</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="stringliteral"></span><span class="stringliteral"></span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="stringliteral"></span><span class="stringliteral">! Check on overflow of arrays, cut off jxtra at lower l if too many levels</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      jtotl    = l2x + 2</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      DO l2 = l2x,1,-1</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="stringliteral"></span><span class="stringliteral">        jtotl  = jtotl + jxtra(l2)</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="stringliteral"></span><span class="stringliteral">        IF (jtotl &gt; nx/2)  THEN</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="stringliteral"></span><span class="stringliteral">          cmessage = &#39;</span> too many <a class="code" href="s__dims_8h.xhtml#a389c5dad31c15d9a8c93844f6216e36e">levels</a>, cutting off<span class="stringliteral">&#39;</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="stringliteral"></span><span class="stringliteral">          errcode  = -1*jtotl</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="stringliteral"></span><span class="stringliteral">          IF (printstatus &gt; Prstatus_oper) THEN</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="stringliteral"></span><span class="stringliteral">            WRITE(umMessage,&#39;</span>(<a class="code" href="namespacerand__no__mcica.xhtml#aa9aa2ed2b68a52b1f05e55947969e83a">a</a>,2i5,f9.2)<span class="stringliteral">&#39;) &#39;</span>n_/l2_/l2-cutoff jxtra:<span class="stringliteral">&#39;,nx,l2x,l2</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="stringliteral"></span><span class="stringliteral">            CALL umPrint(umMessage,src=&#39;</span>fastjx_extral<span class="stringliteral">&#39;)</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="stringliteral"></span><span class="stringliteral">          END IF</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="stringliteral"></span><span class="stringliteral">          CALL EREPORT(&#39;</span>fastjx_extral<span class="stringliteral">&#39;,errcode,cmessage)</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="stringliteral"></span><span class="stringliteral">          DO l = l2,1,-1</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="stringliteral"></span><span class="stringliteral">            jxtra(l) = 0</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="stringliteral"></span><span class="stringliteral">          END DO</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="stringliteral"></span><span class="stringliteral">          EXIT</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="stringliteral"></span><span class="stringliteral">        END IF</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      END DO</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="stringliteral"></span><span class="stringliteral"></span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      IF (lhook) CALL dr_hook(&#39;</span>fastjx_extral<span class="stringliteral">&#39;,zhook_out,zhook_handle)</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      RETURN</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="stringliteral"></span><span class="stringliteral">      END SUBROUTINE FASTJX_EXTRAL</span></div><span class="stringliteral"></span></div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
