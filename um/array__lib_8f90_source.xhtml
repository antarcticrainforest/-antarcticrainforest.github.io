<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>UM General Atmosphere: /home/wilfred/PhD/UM/src/atmosphere/COSP/quickbeam/array_lib.f90 Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="unified_model_logo_2.jpeg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">UM General Atmosphere
   &#160;<span id="projectnumber">8.6</span>
   </div>
   <div id="projectbrief">UK Met Offices Unified Model</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_1df14ea1ac826f73bc3062fa8a76e0c2.xhtml">atmosphere</a></li><li class="navelem"><a class="el" href="dir_ed81249674aa85f63c400e857765c346.xhtml">COSP</a></li><li class="navelem"><a class="el" href="dir_447bb538040597e7934e69c748403153.xhtml">quickbeam</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">array_lib.f90</div>  </div>
</div><!--header-->
<div class="contents">
<a href="array__lib_8f90.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">! ARRAY_LIB: Array procedures for F90</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">! Compiled/Modified:</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">!   07/01/06  John Haynes (haynes@atmos.colostate.edu)</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">! infind (function)</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">! lin_interpolate (function)</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;  </div><div class="line"><a name="l00008"></a><span class="lineno"><a class="line" href="namespacearray__lib.xhtml">    8</a></span>&#160;  <span class="keyword">module</span> <a class="code" href="namespacearray__lib.xhtml">array_lib</a></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacemod__cosp__utils.xhtml" title="(c) British Crown Copyright 2008-2013, the Met Office. (c) British Crown Copyright 2008-2013...">mod_cosp_utils</a><span class="keywordtype">, ONLY</span>: <a class="code" href="namespacemod__cosp__utils.xhtml#a73e9ff71214152fd204ef6eb6087efcf">cosp_ereport</a></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;  <span class="keywordtype">implicit none</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;  <span class="keyword">contains</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">! ----------------------------------------------------------------------------</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">! function INFIND</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">! ----------------------------------------------------------------------------</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">  function </span><a class="code" href="namespacearray__lib.xhtml#a566b848192b7c484cf2c8f999062442f">infind</a>(list,val,sort,dist)</div><div class="line"><a name="l00018"></a><span class="lineno"><a class="line" href="namespacearray__lib.xhtml#a566b848192b7c484cf2c8f999062442f">   18</a></span>&#160;  <span class="keywordtype">use </span><a class="code" href="namespacem__mrgrnk.xhtml">m_mrgrnk</a></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;  <span class="keywordtype">implicit none</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">! Purpose:</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">!   Finds the index of an array that is closest to a value, plus the</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">!   difference between the value found and the value specified</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">! Inputs:</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">!   [list]   an array of sequential values</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">!   [val]    a value to locate</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">! Optional input:</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">!   [sort]   set to 1 if [list] is in unknown/non-sequential order</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">! Returns:</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">!   index of [list] that is closest to [val]</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">! Optional output:</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">!   [dist]   set to variable containing [list([result])] - [val]</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">! Requires:</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">!   mrgrnk library</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">! Created:</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">!   10/16/03  John Haynes (haynes@atmos.colostate.edu)</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">! Modified:</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">!   01/31/06  IDL to Fortran 90</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">! ----- INPUTS -----</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  <span class="keywordtype">real*8</span>, <span class="keywordtype">dimension(:)</span>, <span class="keywordtype">intent(in)</span> :: list</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;  <span class="keywordtype">real*8</span>, <span class="keywordtype">intent(in)</span> :: val  </div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span>, <span class="keywordtype">optional</span> :: sort</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  </div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">! ----- OUTPUTS -----</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  <span class="keywordtype">integer*4</span> :: infind</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  <span class="keywordtype">real*8</span>, <span class="keywordtype">intent(out)</span>, <span class="keywordtype">optional</span> :: dist</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">! ----- INTERNAL -----</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;  <span class="keywordtype">real*8</span>, <span class="keywordtype">dimension(size(list))</span> :: lists</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;  <span class="keywordtype">integer*4</span> :: nlist, result, tmp(1), sort_list</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  <span class="keywordtype">integer*4</span>, <span class="keywordtype">dimension(size(list))</span> :: mask, idx</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;  <span class="keywordflow">if</span> (<span class="keyword">present</span>(sort)) <span class="keywordflow">then</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    sort_list = sort</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  <span class="keywordflow">else</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    sort_list = 0</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="keywordflow">  endif</span>  </div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  nlist = <span class="keyword">size</span>(list)</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  <span class="keywordflow">if</span> (sort_list == 1) <span class="keywordflow">then</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">call </span><a class="code" href="interfacem__mrgrnk_1_1mrgrnk.xhtml">mrgrnk</a>(list,idx)</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    lists = list(idx)</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  <span class="keywordflow">else</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    lists = list</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="keywordflow">  endif</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  <span class="keywordflow">if</span> (val &gt;= lists(nlist)) <span class="keywordflow">then</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    result = nlist</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (val &lt;= lists(1)) <span class="keywordflow">then</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    result = 1</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  <span class="keywordflow">else</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    mask(:) = 0</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">where</span> (lists &lt; val) mask = 1</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;      tmp = minloc(mask,1)</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;      <span class="keywordflow">if</span> (abs(lists(tmp(1)-1)-val) &lt; abs(lists(tmp(1))-val)) <span class="keywordflow">then</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        result = tmp(1) - 1</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;      <span class="keywordflow">else</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        result = tmp(1)</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="keywordflow">      endif</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="keywordflow">  endif</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  <span class="keywordflow">if</span> (<span class="keyword">present</span>(dist)) dist = lists(result)-val</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  <span class="keywordflow">if</span> (sort_list == 1) <span class="keywordflow">then</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    infind = idx(result)</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  <span class="keywordflow">else</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    infind = result</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="keywordflow">  endif</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="keyword">  end function </span><a class="code" href="namespacearray__lib.xhtml#a566b848192b7c484cf2c8f999062442f">infind</a></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">! ----------------------------------------------------------------------------</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">! function LIN_INTERPOLATE</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">! ----------------------------------------------------------------------------  </span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="keyword">  subroutine </span><a class="code" href="namespacearray__lib.xhtml#a09cf7cc65688b11a60328793dcd60213">lin_interpolate</a>(yarr,xarr,yyarr,xxarr,tol)</div><div class="line"><a name="l00100"></a><span class="lineno"><a class="line" href="namespacearray__lib.xhtml#a09cf7cc65688b11a60328793dcd60213">  100</a></span>&#160;  <span class="keywordtype">use </span><a class="code" href="namespacem__mrgrnk.xhtml">m_mrgrnk</a></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  <span class="keywordtype">implicit none</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">! Purpose:</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">!   linearly interpolate a set of y2 values given a set of y1,x1,x2</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">! Inputs:</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">!   [yarr]    an array of y1 values</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">!   [xarr]    an array of x1 values</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">!   [xxarr]   an array of x2 values</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">!   [tol]     maximum distance for a match</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">! Output:</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">!   [yyarr]   interpolated array of y2 values</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">! Requires:</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">!   mrgrnk library</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">! Created:</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">!   06/07/06  John Haynes (haynes@atmos.colostate.edu)</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">! ----- INPUTS -----</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  <span class="keywordtype">real*8</span>, <span class="keywordtype">dimension(:)</span>, <span class="keywordtype">intent(in)</span> :: yarr, xarr, xxarr</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  <span class="keywordtype">real*8</span>, <span class="keywordtype">intent(in)</span> :: tol</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">! ----- OUTPUTS -----</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  <span class="keywordtype">real*8</span>, <span class="keywordtype">dimension(size(xxarr))</span>, <span class="keywordtype">intent(out)</span> :: yyarr</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">! ----- INTERNAL -----</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  <span class="keywordtype">real*8</span>, <span class="keywordtype">dimension(size(xarr))</span> :: ysort, xsort</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  <span class="keywordtype">integer*4</span>, <span class="keywordtype">dimension(size(xarr))</span> :: ist</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  <span class="keywordtype">integer*4</span> :: nx, nxx, i, iloc</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  <span class="keywordtype">real*8</span> :: d, m</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;  <span class="comment">! Error handling</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  <span class="keywordtype">INTEGER</span> :: icode</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  <span class="keywordtype">CHARACTER(LEN=200)</span> :: cmessage</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  <span class="keywordtype">CHARACTER(LEN=*)</span>,<span class="keywordtype">PARAMETER</span> :: routine_name=<span class="stringliteral">&#39;lin_interpolate&#39;</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  nx = <span class="keyword">size</span>(xarr)</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  nxx = <span class="keyword">size</span>(xxarr)</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">! // xsort, ysort are sorted versions of xarr, yarr  </span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  <span class="keyword">call </span><a class="code" href="interfacem__mrgrnk_1_1mrgrnk.xhtml">mrgrnk</a>(xarr,ist)</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  ysort = yarr(ist)</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;  xsort = xarr(ist)</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;  </div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  <span class="keywordflow">do</span> i=1,nxx</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    iloc = <a class="code" href="namespacearray__lib.xhtml#a566b848192b7c484cf2c8f999062442f">infind</a>(xsort,xxarr(i),dist=d)</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordflow">if</span> (d &gt; tol) <span class="keywordflow">then</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;      icode = 9</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;      cmessage = <span class="stringliteral">&#39;Interpolation error&#39;</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;      <span class="keyword">CALL </span><a class="code" href="namespacemod__cosp__utils.xhtml#a73e9ff71214152fd204ef6eb6087efcf">cosp_ereport</a>(routine_name,cmessage,icode)</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="keywordflow">    endif</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordflow">if</span> (iloc == nx) <span class="keywordflow">then</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">!     :: set to the last value</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;      yyarr(i) = ysort(nx)</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">!     :: is there another closeby value?</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;      <span class="keywordflow">if</span> (abs(xxarr(i)-xsort(iloc+1)) &lt; 2*tol) <span class="keywordflow">then</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">!       :: yes, do a linear interpolation      </span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        m = (ysort(iloc+1)-ysort(iloc))/(xsort(iloc+1)-xsort(iloc))</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        yyarr(i) = ysort(iloc) + m*(xxarr(i)-xsort(iloc))</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;      <span class="keywordflow">else</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">!       :: no, set to the only nearby value</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        yyarr(i) = ysort(iloc)</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="keywordflow">      endif</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="keywordflow">    endif</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="keywordflow">  enddo</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  </div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="keyword">  end subroutine </span><a class="code" href="namespacearray__lib.xhtml#a09cf7cc65688b11a60328793dcd60213">lin_interpolate</a></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="keyword">  end module </span><a class="code" href="namespacearray__lib.xhtml">array_lib</a></div></div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
