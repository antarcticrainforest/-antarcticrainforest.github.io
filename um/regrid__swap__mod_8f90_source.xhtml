<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>UM General Atmosphere: /home/wilfred/PhD/UM/src/control/mpp/regrid_swap_mod.f90 Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="unified_model_logo_2.jpeg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">UM General Atmosphere
   &#160;<span id="projectnumber">8.6</span>
   </div>
   <div id="projectbrief">UK Met Offices Unified Model</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_b81b067251166617f9d0a8c0cfc3a4a9.xhtml">control</a></li><li class="navelem"><a class="el" href="dir_14a8e295637c738acc16dab33472505b.xhtml">mpp</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">regrid_swap_mod.f90</div>  </div>
</div><!--header-->
<div class="contents">
<a href="regrid__swap__mod_8f90.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="keyword">MODULE</span> regrid_swap</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;   <span class="keywordtype">USE </span>regrid_utils<span class="keywordtype">, ONLY</span>: atmos_grid, riv_grid,                         &amp;       global_to_local_gridpt, error_check_mpl</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;   <span class="keywordtype">IMPLICIT NONE</span>   <span class="keywordtype">INTEGER</span>, <span class="keywordtype">PARAMETER</span> :: swap_atmos_grid = 1 , swap_riv_grid = 2</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="keyword">CONTAINS</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;   <span class="comment">! sends and receives the required grid data to/from each</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;  <span class="comment">! process. Concerns passed to this routine must contain send  ! receive grid points required as well as proc numbers  ! concerned</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;  <span class="comment">!</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;  <span class="comment">! For both sendConcerns and recvConcerns arrays all space required  ! by array element members</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">  SUBROUTINE </span>swap_regrid_data(send_concern, recv_concern, field,        &amp;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;       src_grid, row_length, rows, error)</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <span class="keywordtype">USE </span><a class="code" href="namespaceregrid__types.xhtml" title="Module: REGRID_TYPES !&gt; ">regrid_types</a>    use <a class="code" href="namespaceum__parcore.xhtml" title="This file belongs in section: MPP. ">um_parcore</a><span class="keywordtype">, ONLY</span>: <a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <span class="keywordtype">USE </span>mpl</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;       <span class="keywordtype">TYPE</span>(<a class="code" href="structregrid__types_1_1concern.xhtml">concern</a>), <span class="keywordtype">DIMENSION(:)</span>, <span class="keywordtype">INTENT(IN)</span> :: send_concern,            &amp;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;         recv_concern</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="comment">! send concern contains data that will be sent to other processes    ! to regrid their subdomain field, and recv_concern contain data    ! to be set from data from other processes needed by this process</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="comment">! to regrid its subdomain src field</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: row_length, rows</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="comment">! row_length, rows of src grid on this process       REAL, INTENT(IN) :: field(row_length, rows)    ! this process local field subdomain       INTEGER, INTENT(IN) ::  src_grid    ! grid regridding from       INTEGER, INTENT(OUT) :: error    ! set to -1 if an error occurs, otherwise 0</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="comment">! local variables</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;       <span class="keywordtype">INTEGER</span> i, j, send_field_size, <a class="code" href="namespaceregrid__types.xhtml#a7ca70352d6d7a250eb1f293e3801d767">x</a>, <a class="code" href="namespaceregrid__types.xhtml#a2e9e941d93fb2128e1bd6693e2a6da0a">y</a>, my_comm</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keywordtype">INTEGER</span> s_concern_size, r_concern_size, request_size,               &amp;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;         send_data_space, recv_data_space</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="comment">! extent of send and recev concerns passed</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;       <span class="keywordtype">INTEGER</span>, <span class="keywordtype">ALLOCATABLE</span> :: requests(:), statuses(:,:), ierror(:)</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordtype">INTEGER</span> error1, error2    <span class="keywordtype">CHARACTER(len=40)</span> :: cmessage</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    error = 0</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    s_concern_size = <span class="keyword">SIZE</span>(send_concern,1)</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    r_concern_size = <span class="keyword">SIZE</span>(recv_concern,1)</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">CALL </span>gc_get_communicator(my_comm, error)</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="comment">! prepare data to send</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="comment">! populate send concerns with data required by other processes</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">DO</span> i=1, s_concern_size</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;      send_field_size = send_concern(i)%size</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;      <span class="keywordflow">DO</span> j=1, send_field_size</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;               <a class="code" href="namespaceregrid__types.xhtml#a7ca70352d6d7a250eb1f293e3801d767">x</a> = send_concern(i)%x(j)</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <a class="code" href="namespaceregrid__types.xhtml#a2e9e941d93fb2128e1bd6693e2a6da0a">y</a> = send_concern(i)%y(j)</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                       <span class="keyword">CALL </span>global_to_local_gridpt(<a class="code" href="namespaceregrid__types.xhtml#a7ca70352d6d7a250eb1f293e3801d767">x</a>, <a class="code" href="namespaceregrid__types.xhtml#a2e9e941d93fb2128e1bd6693e2a6da0a">y</a>, src_grid)</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        send_concern(i)%field(j) = <a class="code" href="s__dims_8h.xhtml#a98d64740628946d2acd859445eddad16">field</a>(<a class="code" href="namespaceregrid__types.xhtml#a7ca70352d6d7a250eb1f293e3801d767">x</a>,<a class="code" href="namespaceregrid__types.xhtml#a2e9e941d93fb2128e1bd6693e2a6da0a">y</a>)<span class="keywordflow">                END DO</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;       <span class="comment">! swap data    request_size = s_concern_size + r_concern_size</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;       <span class="comment">! allocate requests for sends and recvs</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">ALLOCATE</span>(requests(request_size))</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">ALLOCATE</span>(ierror(request_size))</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;       requests = 0</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    ierror = 0</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    error1 = 0</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    error2 = 0</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;       <span class="comment">! send field point required by other procs</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">DO</span> i=1, s_concern_size</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;           <span class="keyword">CALL </span>mpl_isend(send_concern(i)%field, send_concern(i)%size,   &amp;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;           mpl_real, send_concern(i)%proc_num, 0,  my_comm,         &amp;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;           requests(i), ierror(i))</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="keywordflow">         END DO</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;       <span class="comment">! recv field points you need    DO i=1, r_concern_size</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;           <span class="keyword">CALL </span>mpl_irecv(recv_concern(i)%field, recv_concern(i)%size,   &amp;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;           mpl_real, recv_concern(i)%proc_num, 0, my_comm,          &amp;           requests(i+s_concern_size), ierror(i+s_concern_size))</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="keywordflow">         END DO</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;       <span class="keyword">ALLOCATE</span>(statuses(mpl_status_size, request_size))</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;       statuses = 0</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;       <span class="comment">! check mpl errors of recv and send</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">CALL </span>error_check_mpl(ierror, request_size, error1)</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;       <span class="keyword">CALL </span>mpl_waitall(request_size, requests, statuses, i)       <span class="comment">! check mpl errors of waitall</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="comment">! request_size = 0 for 1x1 decomposition</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">IF</span>(request_size /= 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;      ierror(1) = i</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;      <span class="keyword">CALL </span>error_check_mpl(ierror, 1, error2)</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordflow">IF</span>(error1 &lt; 0 .OR. error2 &lt; 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;      error = -1      cmessage = <span class="stringliteral">&quot;REGRID_SWAP_DATA: MPL error&quot;</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;       <span class="comment">! release mem resources</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keyword">DEALLOCATE</span>(requests)</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keyword">DEALLOCATE</span>(statuses)</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keyword">DEALLOCATE</span>(ierror)            <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="keyword">  END SUBROUTINE </span>swap_regrid_data</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;  <span class="comment">! This retrieves and sends target data to and from other  ! other processes needed for backwards regridding  !</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="keyword">  SUBROUTINE </span>swap_regrid_data_max(src_field, l_src_row_length,          &amp;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;       l_src_rows, src_grid, send_concern_max, recv_concern_max, error, &amp;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;       cmessage)</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;       <span class="keywordtype">USE </span><a class="code" href="namespaceum__parcore.xhtml" title="This file belongs in section: MPP. ">um_parcore</a><span class="keywordtype">, ONLY</span>: <a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordtype">use </span><a class="code" href="namespaceregrid__types.xhtml" title="Module: REGRID_TYPES !&gt; ">regrid_types</a></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordtype">USE </span>mpl</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;       <span class="keywordtype">TYPE</span>(<a class="code" href="structregrid__types_1_1concern__max.xhtml">concern_max</a>), <span class="keywordtype">DIMENSION(:)</span>, <span class="keywordtype">INTENT(IN)</span> :: send_concern_max,    &amp;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;         recv_concern_max    <span class="comment">! send contains information other processes need to regrid their    ! subdomain and recv concern max will be set with field data    ! needed by this process to regrid its subdomain</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: l_src_row_length, l_src_rows, src_grid</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="comment">! src field dimension extents</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span> :: src_field(l_src_row_length, l_src_rows)</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="comment">! src field to be regridded to target grid</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(OUT)</span> :: error</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="comment">! if error occurs this is set to -1, otherwise 0</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordtype">CHARACTER(len=*)</span>, <span class="keywordtype">INTENT(OUT)</span> :: cmessage</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="comment">! is set to value indicating cause of error if error = -1</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="comment">! the purpose of this routine is to recv grid points this    ! processor needs to send</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="comment">! local variables</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;       <span class="keywordtype">INTEGER</span> i, j, error1, error2, error_i(1), my_comm</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordtype">INTEGER</span> s_concern_size, r_concern_size, request_size    <span class="keywordtype">INTEGER</span> send_field_size, <a class="code" href="namespaceregrid__types.xhtml#a7ca70352d6d7a250eb1f293e3801d767">x</a>, <a class="code" href="namespaceregrid__types.xhtml#a2e9e941d93fb2128e1bd6693e2a6da0a">y</a></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="comment">! extent of send and recev concerns passed</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">ALLOCATABLE</span> :: requests(:), statuses(:,:), ierror(:)</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;       s_concern_size = <span class="keyword">SIZE</span>(send_concern_max,1)</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    r_concern_size = <span class="keyword">SIZE</span>(recv_concern_max,1)</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    request_size = s_concern_size + r_concern_size</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="comment">! allocate requests for sends and recvs</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keyword">ALLOCATE</span>(requests(request_size))</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keyword">ALLOCATE</span>(ierror(request_size))</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    requests = 0</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    ierror = 0</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    error = 0</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keyword">CALL </span>gc_get_communicator(my_comm, error)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="comment">! populate send concerns with data required by other processes</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordflow">DO</span> i=1, s_concern_size</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;      send_field_size = send_concern_max(i)%size</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;      <span class="keywordflow">DO</span> j=1, send_field_size</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;               <a class="code" href="namespaceregrid__types.xhtml#a7ca70352d6d7a250eb1f293e3801d767">x</a> = send_concern_max(i)%x(j)</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <a class="code" href="namespaceregrid__types.xhtml#a2e9e941d93fb2128e1bd6693e2a6da0a">y</a> = send_concern_max(i)%y(j)</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;               <span class="keyword">CALL </span>global_to_local_gridpt(<a class="code" href="namespaceregrid__types.xhtml#a7ca70352d6d7a250eb1f293e3801d767">x</a>, <a class="code" href="namespaceregrid__types.xhtml#a2e9e941d93fb2128e1bd6693e2a6da0a">y</a>, src_grid)                        send_concern_max(i)%field(j) = src_field(<a class="code" href="namespaceregrid__types.xhtml#a7ca70352d6d7a250eb1f293e3801d767">x</a>,<a class="code" href="namespaceregrid__types.xhtml#a2e9e941d93fb2128e1bd6693e2a6da0a">y</a>)<span class="keywordflow">                END DO</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;          <span class="comment">! send lambda/phi point components telling appropriate    ! proc what grid points you need</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordflow">DO</span> i=1, s_concern_size</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;           <span class="keyword">CALL </span>mpl_isend(send_concern_max(i)%field,                        &amp;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            send_concern_max(i)%size, mpl_real,                        &amp;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            send_concern_max(i)%proc_num, 0, my_comm,                  &amp;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            requests(i), ierror(i))</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="keywordflow">         END DO</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;       <span class="comment">! recv lambda/phi point components which tells you</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="comment">! what grid points other procs need</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordflow">DO</span> i=1, r_concern_size</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;           <span class="keyword">CALL </span>mpl_irecv(recv_concern_max(i)%field,                        &amp;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;           recv_concern_max(i)%size, mpl_real,                         &amp;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;           recv_concern_max(i)%proc_num, 0, my_comm,                   &amp;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;           requests(i+s_concern_size), ierror(i+s_concern_size))</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="keywordflow">         END DO</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;       <span class="comment">! check for mpl errors</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keyword">CALL </span>error_check_mpl(ierror, request_size,  &amp;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;         error1)</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;       <span class="keyword">ALLOCATE</span>(statuses(mpl_status_size, request_size))</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    statuses = 0</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;       <span class="keyword">CALL </span>mpl_waitall(request_size, requests, statuses, i)       <span class="comment">! check for mpl errors</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="comment">! request_size = 0 for 1x1 decomposition</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordflow">IF</span>(request_size /= 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;      error_i(1) = i</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;      <span class="keyword">CALL </span>error_check_mpl(error_i, 1, error2)</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keywordflow">IF</span>(error1 &lt; 0 .OR. error2 &lt; 0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;      error = -1      cmessage = <span class="stringliteral">&quot;REGRID_SWAP_DATA_MAX: MPL error&quot;</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;       <span class="comment">! release request mem resource</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keyword">DEALLOCATE</span>(requests)</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keyword">DEALLOCATE</span>(statuses)</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keyword">DEALLOCATE</span>(ierror)</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordflow">RETURN</span>     end<span class="keyword"> SUBROUTINE </span>swap_regrid_data_max</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="keyword"> END MODULE </span>regrid_swap</div></div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
