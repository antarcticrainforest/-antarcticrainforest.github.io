<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>UM General Atmosphere: /home/wilfred/PhD/UM/src/atmosphere/convection/parcel-parcel4a.f90 Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="unified_model_logo_2.jpeg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">UM General Atmosphere
   &#160;<span id="projectnumber">8.6</span>
   </div>
   <div id="projectbrief">UK Met Offices Unified Model</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_1df14ea1ac826f73bc3062fa8a76e0c2.xhtml">atmosphere</a></li><li class="navelem"><a class="el" href="dir_c7cc3e4dc8dce4a958919661145604f9.xhtml">convection</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">parcel-parcel4a.f90</div>  </div>
</div><!--header-->
<div class="contents">
<a href="parcel-parcel4a_8f90.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="keyword">SUBROUTINE </span><a class="code" href="parcel-parcel4a_8f90.xhtml#a0a5729491c30601478bf7dba9a99d975" title="Completes lifting of the parcel from layer k to k+1. ">parcel_4a5a</a> (k,npnts,nlev,ad_on, new_termc, start_lev,             &amp;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;                        l_q_interact, l_shallow,                              &amp;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;                        bgmk,bwkp1,blowst, bland,                             &amp;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;                        pstar,thekp1,thek,qekp1,qek,qsek,qsekp1,dqsk,dqskp1,  &amp;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;                        thpk,qpk,xpk,qclpk,qcfpk,                             &amp;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;                        thpi,qpi,expi,rbuoy,rbuoy_p_old,xsbmin,               &amp;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;                        ekp14,ekp34,amdetk,                                   &amp;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;                        delpkp1,pk,pkp1,exk,exkp1,delexkp1,                   &amp;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;                        ! In/out                            bgmkp1,                                               &amp;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;                        thpkp1,qpkp1,qclpkp1,qcfpkp1,flxk, xsqkp1,            &amp;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;                        tcw,depth,cclwp,                                      &amp;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;                        ! Out                                   iccb,icct,lcbase,lctop,                               &amp;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;                        bterm,                                                &amp;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;                        prekp1,thrk,qrk,xpkp1,flxkp1,                         &amp;                        cca,ccw,lcca, deltak, flxkp12,                        &amp;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;                        rbuoy_p_here,the_here,thp_here,qe_here,qp_here)</div><div class="line"><a name="l00020"></a><span class="lineno"><a class="line" href="parcel-parcel4a_8f90.xhtml#a0a5729491c30601478bf7dba9a99d975">   20</a></span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keywordtype">USE </span><a class="code" href="namespacecv__run__mod.xhtml" title="*****************************COPYRIGHT************************************** ************************...">cv_run_mod</a><span class="keywordtype">, ONLY</span>:                                                    &amp;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <a class="code" href="namespacecv__run__mod.xhtml#a2036180fe7749ac16d213cae3a2c594a">r_det</a></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keywordtype">USE </span>yomhook<span class="keywordtype">, ONLY</span>: lhook, dr_hook</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keywordtype">USE </span>parkind1<span class="keywordtype">, ONLY</span>: jprb, jpim</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">! Description:</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">! Code description:</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: &amp;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  k                    &amp; <span class="comment">! present model layer</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; ,npnts                &amp; <span class="comment">! Number of points</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; ,nlev                 &amp; <span class="comment">! Number of model levels for calculations</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; ,ad_on                &amp; <span class="comment">! Flag for adaptive detrainment ,new_termc              ! Flag for simplified termination of convection</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: &amp;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;  start_lev(npnts)       <span class="comment">! Level at which convection is initiated</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keywordtype">LOGICAL</span>, <span class="keywordtype">INTENT(IN)</span> :: &amp;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  l_q_interact           <span class="comment">! Switch allows overwriting of parcel</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                         <span class="comment">! variables when calculating condensate</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                         <span class="comment">! increments (will alter results).</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="keywordtype">LOGICAL</span>, <span class="keywordtype">INTENT(IN)</span> ::  &amp;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  l_shallow(npnts)      &amp; <span class="comment">! true in shallow convection</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160; ,bgmk(npnts)           &amp; <span class="comment">! mask for parcels whcih are saturated in layer k</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; ,bwkp1(npnts)          &amp; <span class="comment">! mask for whether condensate is liquid in layer k+1</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160; ,blowst(npnts)         &amp; <span class="comment">! mask for those points at which stability is low</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                          <span class="comment">! enough for convection to occur</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; ,bland(npnts)            <span class="comment">! Land/sea mask</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="keywordtype">REAL</span>,<span class="keywordtype">INTENT(IN)</span> :: &amp;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  pstar(npnts)     &amp; <span class="comment">! Surface pressure (Pa)</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; ,thekp1(npnts)    &amp; <span class="comment">! potential temperature of cloud environment in layer k+1</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; ,thek(npnts)      &amp; <span class="comment">! potential temperature of cloud environment in layer k (K)</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; ,qekp1(npnts)     &amp; <span class="comment">! mixing ratio of cloud environment in layer k+1 (kg/kg)</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; ,qek(npnts)       &amp; <span class="comment">! mixing ratio of cloud environment in layer k (kg/kg)</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; ,qsek(npnts)      &amp; <span class="comment">! saturation mixing ratio of cloud environment                     ! in layer k (kg/kg)</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160; ,qsekp1(npnts)    &amp; <span class="comment">! saturation mixing ratio of cloud environment</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                     <span class="comment">! in layer k+1 (kg/kg)</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; ,dqsk(npnts)      &amp; <span class="comment">! gradient of saturation mixing ratio with potential                     ! temperature for the cloud environment of layer k</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                     <span class="comment">! (kg/kg/K)</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; ,dqskp1(npnts)      <span class="comment">! gradient of saturation mixing ratio with                     ! potential temperature for the cloud environment</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                     <span class="comment">! in layer k+1 (kg/kg/K)</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span> :: &amp;   thpk(npnts)       &amp; <span class="comment">! parcel potential temperature in layer k (K)</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; ,qpk(npnts)        &amp; <span class="comment">! parcel mixing ratio in layer k (kg/kg)</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160; ,qclpk(npnts)      &amp; <span class="comment">! parcel liquid condensate mixing ratio in                      !     layer k (kg/kg)</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160; ,qcfpk(npnts)      &amp; <span class="comment">! parcel frozen condensate mixing ratio in                      !     layer k (kg/kg)</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; ,thpi(npnts)       &amp; <span class="comment">! Initial parcel potential temperature (K)</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; ,qpi(npnts)        &amp; <span class="comment">! Initial parcel mixing ratio (kg/kg)</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; ,expi(npnts)       &amp; <span class="comment">! Initial parcel Exner pressure</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; ,rbuoy(npnts)      &amp; <span class="comment">! parcel buoyancy in layer k+1 (K)</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; ,rbuoy_p_old(npnts)&amp; <span class="comment">! buoyancy from previous level</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; ,xsbmin(npnts)       <span class="comment">!  Threshold buoyancy for forced detrainment</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                      <span class="comment">!    Function of delta P</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span> ::  &amp;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;  ekp14(npnts)       &amp; <span class="comment">! Entrainment coefficient at level k+1/4 multiplied by                       ! appropriate layer thickness</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; ,ekp34(npnts)       &amp; <span class="comment">! Entrainment coefficient at level k+3/4 multiplied by                       ! appropriate layer thickness</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; ,amdetk(npnts)        <span class="comment">! Mixing detrainment coefficient at level k multiplied                       ! by appropriate layer thickness</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(IN)</span> ::  &amp;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  delpkp1(npnts)     &amp; <span class="comment">! Difference in pressure across layer k+1 (Pa)</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; ,pk(npnts)          &amp; <span class="comment">! pressure at mid-point of layer k (Pa)</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; ,pkp1(npnts)        &amp; <span class="comment">! pressure at mid-point of layer k+1   (Pa)</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; ,exk(npnts)         &amp; <span class="comment">! Exner ratio at mid-point of layer k</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160; ,exkp1(npnts)       &amp; <span class="comment">! Exner ratio at mid-point of layer k+1</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160; ,delexkp1(npnts)      <span class="comment">! Difference in Exner ratio between mid-points of</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                       <span class="comment">!  layers k and k+1</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;-<span class="comment">! Variables which are input but which are also updated in this routine</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;-</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="keywordtype">LOGICAL</span>,<span class="keywordtype">INTENT(INOUT)</span> :: &amp;  bgmkp1(npnts)           <span class="comment">!IN Mask for parcels which are saturated in layer k+1</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                          <span class="comment">!OUT MASK for parcels which are saturated in layer k+1</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(INOUT)</span> :: &amp;   thpkp1(npnts)        &amp; <span class="comment">! IN parcel potential temperature in layer k+1  after</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                         <span class="comment">! entrainment and latent heating (K)</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                         <span class="comment">! OUT parcel potential temperature in layer k+1 (K)</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                         <span class="comment">! after forced detrainment</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160; ,qpkp1(npnts)         &amp; <span class="comment">! IN  parcel mixing ratio in layer k+1  after</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                         <span class="comment">! entrainment and latent heating (kg/kg)</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                         <span class="comment">! OUT parcel mixing ratio in layer k+1 (kg/kg)</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                         <span class="comment">! after forced detrainment</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; ,qclpkp1(npnts)       &amp; <span class="comment">! IN  parcel liquid condensate mixing ratio in layer</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                         <span class="comment">!     k+1 after dry ascent only (kg/kg)</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                         <span class="comment">! OUT parcel liquid condensate in layer k+1 (kg/kg)</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; ,qcfpkp1(npnts)       &amp; <span class="comment">! IN  parcel frozen condensate mixing ratio in layer</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                         <span class="comment">!     k+1 after dry ascent only (kg/kg)</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                         <span class="comment">! OUT parcel frozen condensate in layer k+1 (kg/kg)</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; ,xpk(npnts)           &amp; <span class="comment">! IN parcel cloud water in layer k (kg/kg)</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                         <span class="comment">! OUT overwritten with qcl+qcf in cloud_w for layer                         !     k if PC2</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; ,flxk(npnts)          &amp; <span class="comment">! IN parcel massflux in layer k (Pa/s)                         ! OUT parcel massflux in layer k (set if convection</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                         <span class="comment">!     initiated from layer k) (Pa/s)</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160; ,xsqkp1(npnts)          <span class="comment">! Excess parcel water after lifting from layer k to k+1</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                         <span class="comment">!   (kg/kg)</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(INOUT)</span> :: &amp;   tcw(npnts)           &amp; <span class="comment">! IN total condensed water summed to                         !       layer k(kg/m**2/s)</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                         <span class="comment">! OUT updated total condensed water summed to                         !       layer k+1 (kg/m**2/s)</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160; ,depth(npnts)         &amp; <span class="comment">! IN depth of convective cloud to layer k (m)</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                         <span class="comment">! OUT updated depth of convective cloud to layer k+1(m)</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; ,cclwp(npnts)           <span class="comment">! IN Condensed water path summed to layer k (kg/m**2)</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                         <span class="comment">! OUT updated condensed water path summed to                         !     layer k+1 (kg/m**2)</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">! Variables which are output</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(OUT)</span> :: &amp;  iccb(npnts)           &amp; <span class="comment">! convective cloud base_level</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; ,icct(npnts)           &amp; <span class="comment">! convective cloud top level</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160; ,lcbase(npnts)         &amp; <span class="comment">! Lowest conv. cloud base level</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160; ,lctop(npnts)            <span class="comment">! Lowest conv. cloud top level</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="keywordtype">LOGICAL</span>, <span class="keywordtype">INTENT(OUT)</span> :: &amp;   bterm(npnts)            <span class="comment">! Mask for parcels which terminate in layer k+1</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(OUT)</span> :: &amp;   prekp1(npnts)      &amp; <span class="comment">! precipitation from parcel as it rises from layer                       !  k to k+1 (kg/m**2/s)</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160; ,thrk(npnts)        &amp; <span class="comment">! parcel detrainment potential temperature in layer k (K)</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160; ,qrk(npnts)         &amp; <span class="comment">! parcel detrainment mxing ratio in layer k (kg/kg)</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160; ,xpkp1(npnts)       &amp; <span class="comment">! parcel cloud water in layer k+1 (kg/kg)</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160; ,flxkp1(npnts)        <span class="comment">! parcel massflux in layer k+1 (Pa/s)</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(OUT)</span> ::   &amp;   cca(npnts)           &amp; <span class="comment">! convective cloud amount (%)</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160; ,ccw(npnts)           &amp; <span class="comment">! convective cloud water(g/kg) on model levels</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; ,lcca(npnts)          &amp; <span class="comment">! Lowest conv. cloud amount (%)</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160; ,deltak(npnts)        &amp; <span class="comment">! parcel forced detrainment rate layer k multiplied</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                         <span class="comment">! by appropriate layer thickness</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; ,flxkp12(npnts)         <span class="comment">! half level mass flux</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(OUT)</span> ::  &amp;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;  rbuoy_p_here(npnts) &amp; <span class="comment">! buoyancy for SCM diags</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160; ,the_here(npnts)     &amp; <span class="comment">! TH environ for SCM diags</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160; ,thp_here(npnts)     &amp; <span class="comment">! TH parcel for SCM diags</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; ,qe_here(npnts)      &amp; <span class="comment">! Q environ for SCM diags</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160; ,qp_here(npnts)        <span class="comment">! Q parcel for SCM diags</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;-<span class="comment">! Local variables</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="keywordtype">INTEGER</span> ::        &amp;  i               &amp; <span class="comment">! loop counter ,ndet              ! Compress vector length for the detrainment calculation</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="keywordtype">INTEGER</span> ::        &amp;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;  index1(npnts)     <span class="comment">! Index for compress and expand</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="keywordtype">LOGICAL</span> ::        &amp;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  bwkp1_c(npnts)  &amp; <span class="comment">! Compressed mask for whether condensate is liquid                    ! in layer k+1</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160; ,bgmk_c(npnts)   &amp; <span class="comment">! Compressed mask for parcels which are saturated</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                    <span class="comment">! in layer k</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; ,bgmkp1_c(npnts) &amp; <span class="comment">! Compressed mask for parcels which are saturated</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                    <span class="comment">! in layer k+1</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160; ,bdetk(npnts)      <span class="comment">! Mask for points under going forced detrainment</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="keywordtype">REAL</span> ::            &amp;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;  xsbmin_ad(npnts) &amp; <span class="comment">! xsbmin adpative (NOTE, will be different at                     ! different points)</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160; ,thek_c(npnts)    &amp; <span class="comment">! Compressed potential temperature of</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                     <span class="comment">! cloud environment in layer k (K)</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160; ,thekp1_c(npnts)  &amp; <span class="comment">! Compressed potential temperature of</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                     <span class="comment">! cloud environment in layer k+1 (K)</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; ,qek_c(npnts)     &amp; <span class="comment">! Compressed mixing ratio of cloud</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                     <span class="comment">! environment in layer k (kg/kg)</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160; ,qekp1_c(npnts)   &amp; <span class="comment">! Compressed mixing ratio of cloud</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                     <span class="comment">! environment in layer k+1 (kg/kg)</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; ,qsek_c(npnts)    &amp; <span class="comment">! Compressed saturation mixing ratio of</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                     <span class="comment">! cloud environment in layer k (kg/kg)</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; ,dqsk_c(npnts)    &amp; <span class="comment">! Compressed gradient of saturation mixing ratio  with                     ! potential temperature for the cloud environment</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                     <span class="comment">! of layer k (kg/kg/K)</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160; ,qsekp1_c(npnts)  &amp; <span class="comment">! Compressed saturation mixing ratio of</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                     <span class="comment">! cloud environment in layer k+1 (kg/kg)</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160; ,dqskp1_c(npnts)    <span class="comment">! Compressed gradient of saturation mixing ratio  with                     ! potential temperature for the cloud environment                     ! of layer k+1 (kg/kg/K)</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="keywordtype">REAL</span> ::            &amp;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;  thpk_c(npnts)    &amp; <span class="comment">! Compressed parcel potential temperature in layer k (K)</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; ,qpk_c(npnts)     &amp; <span class="comment">! Compressed parcel mixing ratio  in layer k  (kg/kg)</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160; ,thpkp1_c(npnts)  &amp; <span class="comment">! Compressed parcel potential temperature in layer k+1 (K)</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160; ,qpkp1_c(npnts)   &amp; <span class="comment">! Compressed parcel mixing ratio  in layer k  (kg/kg)</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160; ,xsqkp1_c(npnts)    <span class="comment">! Excess parcel water after lifting from layer k to k+1</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                     <span class="comment">! (kg/kg)</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="keywordtype">REAL</span> ::            &amp;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  thrk_c(npnts)    &amp; <span class="comment">! Compressed parcel detrainment potential temperature</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                     <span class="comment">!  in layer k (K)</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160; ,qrk_c(npnts)     &amp; <span class="comment">! Compressed parcel detrainment mixing ratio</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                     <span class="comment">! in layer k (kg/kg)</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160; ,deltak_c(npnts)  &amp; <span class="comment">! Compressed parcel forced detrainment coefficient in</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                     <span class="comment">! layer k multiplied by appropriate layer thickness</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160; ,ekp14_c(npnts)   &amp; <span class="comment">! Compressed in entrainment coefficient at level k+1/4</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                     <span class="comment">! multiplied by appropriate layer thickness</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160; ,ekp34_c(npnts)     <span class="comment">! Compressed in entrainment coefficient at level k+3/4</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                     <span class="comment">! multiplied by appropriate layer thickness</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="keywordtype">REAL</span> ::            &amp;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;  pk_c(npnts)      &amp; <span class="comment">! Compressed pressure at level k (PA)</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160; ,pkp1_c(npnts)    &amp; <span class="comment">! Compressed pressure at level k+1 (PA)</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160; ,xsbmin_c(npnts)  &amp; <span class="comment">! Compressed threshold for forced detrainment</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                     <span class="comment">!  Function of delta P</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160; ,exk_c(npnts)     &amp; <span class="comment">! Compressed exner function at level k</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160; ,exkp1_c(npnts)     <span class="comment">! Compressed exner function at level k+1</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="keywordtype">REAL(KIND=jprb)</span>               :: zhook_handle</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;-</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;PARCEL_4A5A&#39;</span>,zhook_in,zhook_handle)</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="keywordflow">DO</span> i=1,npnts</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment">!  Calculate mask for those points under going forced detrainment</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment">!  UM Documentation paper 27</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment">!  Section (6), equation (23)</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;  bdetk(i) = rbuoy(i)  &lt;   xsbmin(i)</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;  <span class="comment">!  Calculate XSBMIN_AD</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;  <span class="comment">!  Use adaptive detrainment if ADAPTIVE ON flag is set to 1</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;  <span class="comment">!  making sure that adaptive min. buoyancy doesn&#39;t fall below 0.0</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;  <span class="keywordflow">IF</span> (ad_on  /=  1) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    xsbmin_ad(i) = xsbmin(i)</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;  <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    xsbmin_ad(i) = <a class="code" href="namespacecv__run__mod.xhtml#a2036180fe7749ac16d213cae3a2c594a">r_det</a> * rbuoy_p_old(i) + (1-<a class="code" href="namespacecv__run__mod.xhtml#a2036180fe7749ac16d213cae3a2c594a">r_det</a>)*rbuoy(i)</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    xsbmin_ad(i) = max(xsbmin_ad(i),0.0)</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;  <span class="comment">!  Set mask of points for forced detrainment</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;  bdetk(i) = rbuoy(i)  &lt;   xsbmin_ad(i)</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;  rbuoy_p_here(i)=rbuoy(i)</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;  the_here(i)=thek(i)</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;  qe_here(i)=qek(i)</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;  thp_here(i)=thpk(i)</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;  qp_here(i)=qpk(i)</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment">! !  Compress all input arrays for the forced detrainment calculations</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment">!ndet = 0</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="keywordflow">DO</span> i=1,npnts</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  <span class="keywordflow">IF</span> (bdetk(i)) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    ndet = ndet + 1</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    index1(ndet) = i</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="keywordflow">  END IF</span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="keywordflow">IF</span> (ndet  /=  0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;  <span class="keywordflow">DO</span> i=1,ndet</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    thek_c(i)  = thek(index1(i))</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    qek_c(i)   = qek(index1(i))</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    thpk_c(i)  = thpk(index1(i))</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    qpk_c(i)   = qpk(index1(i))</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    qsek_c(i)  = qsek(index1(i))</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    dqsk_c(i)  = dqsk(index1(i))</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    thekp1_c(i)= thekp1(index1(i))</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    qekp1_c(i) = qekp1(index1(i))</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    thpkp1_c(i)= thpkp1(index1(i))</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    qpkp1_c(i) = qpkp1(index1(i))</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    qsekp1_c(i)= qsekp1(index1(i))</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    dqskp1_c(i)= dqskp1(index1(i))</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    xsqkp1_c(i)= xsqkp1(index1(i))</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    ekp14_c(i) = ekp14(index1(i))</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    ekp34_c(i) = ekp34(index1(i))</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    pk_c(i)    = pk(index1(i))</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    pkp1_c(i)  = pkp1(index1(i))</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    exk_c(i)   = exk(index1(i))</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="comment">! Change xsbmin_c to adaptive version</span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    xsbmin_c(i)= xsbmin_ad(index1(i))</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    exkp1_c(i) = exkp1(index1(i))</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    bgmk_c(i)  = bgmk(index1(i))</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    bgmkp1_c(i)= bgmkp1(index1(i))</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    bwkp1_c(i) = bwkp1(index1(i))</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment">! !  detrainment calculation</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment">!  SUBROUTINE detrain</span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment">!  UM Documentation paper 27</span></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment">!  Section (6)</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="comment">! DEPENDS ON: detrain_4a5a</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;   <span class="keyword">CALL </span><a class="code" href="detrain-detrai4a_8f90.xhtml#ad61df286e88aa4c333debed73820a669" title="forced detrainment calculation ">detrain_4a5a</a> (ndet,  bwkp1_c,bgmk_c,                              &amp;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                      thek_c,qek_c,thpk_c,qpk_c,qsek_c,dqsk_c,            &amp;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                      thekp1_c,qekp1_c,qsekp1_c,dqskp1_c,                 &amp;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                      ekp14_c,ekp34_c,pk_c,pkp1_c,exk_c,exkp1_c,xsbmin_c, &amp;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                      bgmkp1_c, thpkp1_c,qpkp1_c,xsqkp1_c,                &amp;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                      deltak_c,thrk_c,qrk_c)</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;   <span class="comment">! Decompress/expand output arrays from the detrainment calculations</span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160; </div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;  <span class="keywordflow">DO</span> i=1,ndet</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    thpkp1(index1(i)) = thpkp1_c(i)</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    qpkp1(index1(i))  = qpkp1_c(i)</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;  <span class="keywordflow">DO</span> i=1,ndet</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    xsqkp1(index1(i)) = xsqkp1_c(i)</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    bgmkp1(index1(i)) = bgmkp1_c(i)</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="keywordflow">  END DO</span></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="keywordflow">END IF</span>     <span class="comment">!  ndet =/ 0</span></div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="keywordflow">DO</span> i=1,npnts</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;  deltak(i) = 0.0</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;  thrk(i) = 0.0</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;  qrk(i) = 0.0</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="keywordflow">DO</span> i=1,ndet</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;  deltak(index1(i)) = deltak_c(i)</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;  thrk(index1(i))   = thrk_c(i)</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;  qrk(index1(i))    = qrk_c(i)</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="comment">! !   Calculate mass flux at level K+1.</span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="comment">!   UM Documentation paper 27</span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="comment">!   Section (2B), equation (10A)</span></div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="comment">!DO i=1,npnts</span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;  flxkp1(i) = flxk(i)*(1.0+ekp14(i))*(1.0+ekp34(i))*(1.0-deltak(i))*      &amp;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                                                      (1.0-amdetk(i))</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;  flxkp12(i)= flxk(i)*(1.0+ekp14(i))*(1.0-deltak(i))* (1.0-amdetk(i)) </div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="keywordflow">END DO</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="comment">!  Test for points at which convection terminates in layer k+1</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="comment">!  SUBROUTINE TERM_CON</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="comment">!  UM Documentation paper 27</span></div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="comment">!  Section (7)</span></div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="comment">! DEPENDS ON: term_con_4a5a</span></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="keyword">CALL </span><a class="code" href="term__con-termco4a_8f90.xhtml#afbc731d9afe72ddec8ca634a7be9ee11" title="Returns a mask for points at which convection is terminating. ">term_con_4a5a</a> (npnts,nlev,k,new_termc,                                 &amp;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                    bwkp1,                                                  &amp;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                    flxkp1,thekp1,qekp1,thpi,qpi,qsekp1,deltak,             &amp;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                    expi,ekp14,ekp34,pstar,pk,pkp1,xsbmin_ad,               &amp;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                    bterm )</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="comment">! !  Cloud microphysics calculation</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="comment">!  SUBROUTINE cloud_w</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="comment">!  UM Documentation paper 27</span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="comment">!  Section (8), (9)</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="comment">! DEPENDS ON: cloud_w_4a5a</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="keyword">CALL </span><a class="code" href="cloud__w-cloudw1a_8f90.xhtml#aac2250c07f887fcc603f0ba9b8f67e85" title="Convection cloud Microphysics Scheme. ">cloud_w_4a5a</a> (k,npnts,xpkp1,qclpkp1,qcfpkp1,prekp1,xsqkp1,blowst,      &amp;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                   flxkp1,xpk,qclpk,qcfpk,thekp1,qekp1,bwkp1,bland,         &amp;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                   qsekp1,bgmkp1,bterm,cca,iccb,icct,tcw,depth,ekp14,ekp34, &amp;</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                   delexkp1,cclwp,delpkp1,ccw,lcca,lcbase,lctop,            &amp;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                   l_shallow,l_q_interact,start_lev)</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;PARCEL_4A5A&#39;</span>,zhook_out,zhook_handle)</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="keywordflow">RETURN</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="keyword">END SUBROUTINE </span><a class="code" href="parcel-parcel4a_8f90.xhtml#a0a5729491c30601478bf7dba9a99d975" title="Completes lifting of the parcel from layer k to k+1. ">parcel_4a5a</a></div></div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
