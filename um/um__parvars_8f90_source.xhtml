<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>UM General Atmosphere: /home/wilfred/PhD/UM/src/control/mpp/um_parvars.f90 Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="unified_model_logo_2.jpeg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">UM General Atmosphere
   &#160;<span id="projectnumber">8.6</span>
   </div>
   <div id="projectbrief">UK Met Offices Unified Model</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_b81b067251166617f9d0a8c0cfc3a4a9.xhtml">control</a></li><li class="navelem"><a class="el" href="dir_14a8e295637c738acc16dab33472505b.xhtml">mpp</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">um_parvars.f90</div>  </div>
</div><!--header-->
<div class="contents">
<a href="um__parvars_8f90.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="keyword">MODULE</span> um_parvars</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacefield__types.xhtml">field_types</a><span class="keywordtype">, ONLY</span> : <a class="code" href="namespacefield__types.xhtml#a2d7b2da552159fd60d34e174091345ec" title="FLDTYPE definitions for the different field types recognised on the decomposition. ">nfld_max</a></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespaceum__parparams.xhtml" title="This file belongs in section: MPP. ">um_parparams</a></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacedecomp__params.xhtml" title="Magic numbers defining decompositions Magic numbers defining decompositions. ">decomp_params</a></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespaceum__parcore.xhtml" title="This file belongs in section: MPP. ">um_parcore</a></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespaceereport__mod.xhtml" title="This file belongs in section: Misc. ">ereport_mod</a></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespaceatmos__max__sizes.xhtml" title="This file belongs in section: Misc. ">atmos_max_sizes</a></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;  <span class="keywordtype">USE </span><a class="code" href="namespacedecomp__db.xhtml" title="This file belongs in section: MPP. ">decomp_db</a></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;  <span class="keywordtype">USE </span>yomhook<span class="keywordtype">, ONLY</span>: lhook, dr_hook</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;  <span class="keywordtype">USE </span>parkind1<span class="keywordtype">, ONLY</span>: jprb, jpim</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;  <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;  <span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span>, <span class="keywordtype">PRIVATE</span> :: zhook_in  = 0</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;  <span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span>, <span class="keywordtype">PRIVATE</span> :: zhook_out = 1</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;  <span class="keywordtype">INTEGER</span> :: current_decomp_type=<a class="code" href="namespacedecomp__params.xhtml#a6e9b4c1d028a2d082bf3b915033d7982" title="not set decomp ">decomp_unset</a> <span class="comment">! current decomposition type</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;  <span class="keywordtype">INTEGER</span> :: offx                   <span class="comment">! standard halo size in East-West</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;  <span class="keywordtype">INTEGER</span> :: offy                   <span class="comment">! standard halo size in North-South</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;  <span class="keywordtype">INTEGER</span> :: halo_i                 <span class="comment">! extended halo size in East-West</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;  <span class="keywordtype">INTEGER</span> :: halo_j                 <span class="comment">! extended halo size in North-South</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;  <span class="keywordtype">INTEGER</span> :: gc_proc_row_group      <span class="comment">! GID for procs along a proc row</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  <span class="keywordtype">INTEGER</span> :: gc_proc_col_group      <span class="comment">! GID for procs along a proc col</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;  <span class="keywordtype">INTEGER</span> :: gc_all_proc_group      <span class="comment">! GID for all procs</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;  <span class="comment">! logicals indicating if a processor is at the edge of the LPG</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  <span class="keywordtype">LOGICAL</span> :: at_extremity(4)</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;  <span class="comment">! array with the tids of the four neighbours in the horizontal plane</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;  <span class="keywordtype">INTEGER</span> :: neighbour(4) </div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  <span class="comment">! position of personal data in global data (in terms of standard</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;  <span class="comment">! Fortran array notation</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  <span class="keywordtype">INTEGER</span> :: datastart(<a class="code" href="namespaceum__parparams.xhtml#a54b579b070f92f38a759987b9ebaa6ad">ndim_max</a>)</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  <span class="keywordtype">INTEGER</span> :: first_comp_pe       <span class="comment">! top left pe in LPG</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;  <span class="keywordtype">INTEGER</span> :: last_comp_pe        <span class="comment">! bottom right pe in LPG</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  <span class="keywordtype">INTEGER</span> :: halosize(<a class="code" href="namespaceum__parparams.xhtml#a54b579b070f92f38a759987b9ebaa6ad">ndim_max</a>,<a class="code" href="namespaceum__parparams.xhtml#a76a58c880ecd94fd4ac5c70301623033">nhalo_max</a>)        <span class="comment">! available halo sizes</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">TARGET</span> :: glsize(<a class="code" href="namespaceum__parparams.xhtml#a54b579b070f92f38a759987b9ebaa6ad">ndim_max</a>,<a class="code" href="namespacefield__types.xhtml#a2d7b2da552159fd60d34e174091345ec" title="FLDTYPE definitions for the different field types recognised on the decomposition. ">nfld_max</a>)   <span class="comment">! global data size</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">TARGET</span> :: blsize(<a class="code" href="namespaceum__parparams.xhtml#a54b579b070f92f38a759987b9ebaa6ad">ndim_max</a>,<a class="code" href="namespacefield__types.xhtml#a2d7b2da552159fd60d34e174091345ec" title="FLDTYPE definitions for the different field types recognised on the decomposition. ">nfld_max</a>)   <span class="comment">! personal data size</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  <span class="keywordtype">INTEGER</span> :: lasize(<a class="code" href="namespaceum__parparams.xhtml#a54b579b070f92f38a759987b9ebaa6ad">ndim_max</a>,<a class="code" href="namespacefield__types.xhtml#a2d7b2da552159fd60d34e174091345ec" title="FLDTYPE definitions for the different field types recognised on the decomposition. ">nfld_max</a>,<a class="code" href="namespaceum__parparams.xhtml#a76a58c880ecd94fd4ac5c70301623033">nhalo_max</a>) <span class="comment">! local data size</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;     <span class="comment">! Generalised version of datastart for *all* fieldtypes</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  <span class="keywordtype">INTEGER</span> :: datastart_f(<a class="code" href="namespaceum__parparams.xhtml#a54b579b070f92f38a759987b9ebaa6ad">ndim_max</a>,<a class="code" href="namespacefield__types.xhtml#a2d7b2da552159fd60d34e174091345ec" title="FLDTYPE definitions for the different field types recognised on the decomposition. ">nfld_max</a>)</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;   <span class="comment">! size of the LPG in each dimension</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;  <span class="keywordtype">INTEGER</span> :: gridsize(<a class="code" href="namespaceum__parparams.xhtml#a54b579b070f92f38a759987b9ebaa6ad">ndim_max</a>)   <span class="comment">! position of this process in the LPG 0,1,2,...,nproc_x-1 etc.</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;  <span class="keywordtype">INTEGER</span> :: gridpos(<a class="code" href="namespaceum__parparams.xhtml#a54b579b070f92f38a759987b9ebaa6ad">ndim_max</a>)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;   <span class="comment">! domain type</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  <span class="keywordtype">INTEGER</span> :: sb_model_domain</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;     <span class="comment">! type of boundary (cyclic or static) in each direction</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  <span class="keywordtype">INTEGER</span> :: bound(<a class="code" href="namespaceum__parparams.xhtml#a54b579b070f92f38a759987b9ebaa6ad">ndim_max</a>)</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;     <span class="keywordtype">INTEGER</span> :: datastartr(<a class="code" href="namespaceum__parparams.xhtml#a54b579b070f92f38a759987b9ebaa6ad">ndim_max</a>)</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;  <span class="comment">! Which processor column a given point is in: 0 -&gt; nproc_x-1</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  <span class="keywordtype">INTEGER</span> :: g_pe_index_ew(1-<a class="code" href="namespaceatmos__max__sizes.xhtml#aced0dbc61ef57e8b4f5ee4650948bb61">max_halo_size</a>:<a class="code" href="namespaceatmos__max__sizes.xhtml#ac0b0d784723c3cd9ca5acd8fd124a201" title="Maximum sector size for I/O. ">row_length_max</a>+<a class="code" href="namespaceatmos__max__sizes.xhtml#aced0dbc61ef57e8b4f5ee4650948bb61">max_halo_size</a>)</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  <span class="comment">! Which processor row a given point is in: 0 -&gt; nproc_y-1</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  <span class="keywordtype">INTEGER</span> :: g_pe_index_ns(1-<a class="code" href="namespaceatmos__max__sizes.xhtml#aced0dbc61ef57e8b4f5ee4650948bb61">max_halo_size</a>:<a class="code" href="namespaceatmos__max__sizes.xhtml#a80eea39ce495bbd63b0347a86638112a">rows_max</a>+<a class="code" href="namespaceatmos__max__sizes.xhtml#aced0dbc61ef57e8b4f5ee4650948bb61">max_halo_size</a>)</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;   <span class="keywordtype">INTEGER</span> :: nproc  =1</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  <span class="keywordtype">INTEGER</span> :: nproc_x=1    <span class="comment">! number of processors in x-direction</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  <span class="keywordtype">INTEGER</span> :: nproc_y=1    <span class="comment">! number of processors in y-direction</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;   </div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;  <span class="comment">! Short cut names that are used by some rcf code.</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">POINTER</span> :: glsizep(:)=&gt;null() <span class="comment">! global u data size</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">POINTER</span> :: glsizeu(:)=&gt;null() <span class="comment">! global u data size</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">POINTER</span> :: glsizev(:)=&gt;null() <span class="comment">! global v data size</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">POINTER</span> :: glsizer(:)=&gt;null() <span class="comment">! global river-routing data size</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">POINTER</span> :: blsizep(:)=&gt;null() <span class="comment">! personal p data area</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">POINTER</span> :: blsizeu(:)=&gt;null() <span class="comment">! personal u data area</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">POINTER</span> :: blsizev(:)=&gt;null() <span class="comment">! personal v data area</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  <span class="keywordtype">INTEGER</span>, <span class="keywordtype">POINTER</span> :: blsizer(:)=&gt;null() <span class="comment">! personal river-routing data area</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;   <span class="keywordtype">LOGICAL</span> ::               &amp;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;      atsouth,             &amp;<span class="comment">! process at the bottom of the LPG</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;      atnorth,             &amp;<span class="comment">! process at the top of the LPG</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;      atwest,              &amp;<span class="comment">! process at the left of the LPG</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;      ateast                <span class="comment">! process at the right of the LPG</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  <span class="comment">! NB: None of the above logicals are mutually exclusive</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; <span class="keyword">CONTAINS</span><span class="keyword">   INTEGER </span><span class="keyword">FUNCTION </span>g_datastart(dim,proc)</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: dim</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: proc         g_datastart=<a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(current_decomp_type)%g_datastart(dim,proc)</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="keyword">  END FUNCTION </span>g_datastart</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="keyword">  INTEGER </span><span class="keyword">FUNCTION </span>g_lasize(dim,fld,halo,proc)</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: dim</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: proc         <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: fld</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: halo</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    g_lasize= &amp;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(current_decomp_type)%g_lasize(dim,fld,halo,proc)     end<span class="keyword"> FUNCTION </span>g_lasize</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="keyword">   INTEGER </span><span class="keyword">FUNCTION </span>g_blsize(dim,fld,proc)</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: dim</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: proc         <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: fld       g_blsize= &amp;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(current_decomp_type)%g_blsize(dim,fld,proc)     end<span class="keyword"> FUNCTION </span>g_blsize</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="keyword">   INTEGER </span><span class="keyword">FUNCTION </span>g_datastartr(dim,proc)</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: dim</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: proc         g_datastartr= &amp;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(current_decomp_type)%g_datastartr(dim,proc)       end<span class="keyword"> FUNCTION </span>g_datastartr</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="keyword">   INTEGER </span><span class="keyword">FUNCTION </span>g_datastart_f(dim,fld,proc)</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: dim</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: fld</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: proc             g_datastart_f= &amp;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(current_decomp_type)%g_datastart_f(dim,fld,proc)     end<span class="keyword"> FUNCTION </span>g_datastart_f</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="keyword">  INTEGER </span><span class="keyword">FUNCTION </span>g_gridpos(dim,proc)</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: dim</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: proc             g_gridpos= &amp;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(current_decomp_type)%g_gridpos(dim,proc)     end<span class="keyword"> FUNCTION </span>g_gridpos</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  <span class="comment">! at_extremity for each processor</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="keyword">  LOGICAL </span><span class="keyword">FUNCTION </span>g_at_extremity(dir,proc)</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: dir</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: proc             <span class="keywordtype">INTEGER</span>             :: errorstatus <span class="comment">!    CHARACTER(LEN=256)  :: cmessage    ! Error message</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;       <span class="keywordflow">SELECT CASE</span>(dir)</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;         <span class="keywordflow">CASE</span>(<a class="code" href="namespaceum__parparams.xhtml#a575a86c6ed199d617f169b0bbd20ec88">pnorth</a>)</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;      g_at_extremity=(g_gridpos(2,proc)  ==  (gridsize(2)-1))</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordflow">CASE</span>(<a class="code" href="namespaceum__parparams.xhtml#a055cccbf23dd97e54f86b7be2fbfccb3">psouth</a>)</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;      g_at_extremity=(g_gridpos(2,proc)  ==  0)</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">CASE</span>(<a class="code" href="namespaceum__parparams.xhtml#a6419e182a3656885cf3147466ab705ea">peast</a>)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;      g_at_extremity=(g_gridpos(1,proc)  ==  (gridsize(1)-1))</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">CASE</span>(<a class="code" href="namespaceum__parparams.xhtml#adb75b95f9b9de945d4e1c15a922e9eab">pwest</a>)</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;      g_at_extremity=(g_gridpos(1,proc)  ==  0)</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="keywordflow">    CASE DEFAULT</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;      errorstatus=1</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;      <span class="keyword">WRITE</span>(cmessage,<span class="stringliteral">&#39;(A,I3,A)&#39;</span>)                     &amp;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;          <span class="stringliteral">&#39;Request for extremity in direction &#39;</span>,dir,<span class="stringliteral">&#39; is invalid&#39;</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;      <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a>(<span class="stringliteral">&#39;UM_Parvars:g_at_extrimity&#39;</span>,errorstatus,cmessage)</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="keywordflow">    END SELECT</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="keyword">  END FUNCTION </span>g_at_extremity</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="keyword">   INTEGER </span><span class="keyword">FUNCTION </span>g_blsizep(dim,proc)</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: dim</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: proc             g_blsizep= &amp;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(current_decomp_type)%g_blsize(dim,fld_type_p,proc)     end<span class="keyword"> FUNCTION </span>g_blsizep</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="keyword">   INTEGER </span><span class="keyword">FUNCTION </span>g_blsizeu(dim,proc)</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: dim</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: proc             g_blsizeu= &amp;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(current_decomp_type)%g_blsize(dim,fld_type_u,proc)    end<span class="keyword"> FUNCTION </span>g_blsizeu</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="keyword">   INTEGER </span><span class="keyword">FUNCTION </span>g_blsizev(dim,proc)</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: dim</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: proc             g_blsizev= &amp;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(current_decomp_type)%g_blsize(dim,fld_type_v,proc)     end<span class="keyword"> FUNCTION </span>g_blsizev</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="keyword">   INTEGER </span><span class="keyword">FUNCTION </span>g_blsizer(dim,proc)</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: dim</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> :: proc             g_blsizer= &amp;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(current_decomp_type)%g_blsize(dim,fld_type_r,proc)     end<span class="keyword"> FUNCTION </span>g_blsizer</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="keyword">  SUBROUTINE </span>change_decomposition(decomp,icode)</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">! Method:</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">! If decomp is already the current decomposition, exit and do</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">! nothing. If decomposition decomp has not been initialised,! print a message and exit. Otherwise, copy the! information from the decompDB arrays in the DECOMP_DB module into! here.</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;   <span class="preprocessor">#if defined (RECON)</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">USE </span><a class="code" href="namespacercf__lsm__mod.xhtml" title="Land-Sea mask data Land-Sea mask data. ">rcf_lsm_mod</a></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;           <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(IN)</span> ::  decomp <span class="comment">! new decomposition to use</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keywordtype">INTEGER</span>, <span class="keywordtype">OPTIONAL</span>   ::  icode  <span class="comment">! unused, for legacy reasons only</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;           <span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordtype">INTEGER</span>                       :: errval</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keywordtype">INTEGER</span>                       :: idm</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keywordtype">INTEGER</span>                       :: ifld</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keywordtype">INTEGER</span>                       :: ihalo</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keywordtype">INTEGER</span>                       :: ipt</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordtype">INTEGER</span>                       :: iside</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keywordtype">REAL(KIND=jprb)</span>               :: zhook_handle</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordtype">CHARACTER(LEN=256)</span>            :: cmessage <span class="comment">! Error message</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="comment">! -</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keywordflow">IF</span> (lhook) &amp;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;CHANGE_DECOMPOSITION&#39;</span>,zhook_in,zhook_handle)</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="comment">!</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="comment">! Initial Checks:    !</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keywordflow">IF</span> (((decomp  &gt;   <a class="code" href="namespacedecomp__params.xhtml#a4a7cb19c144d7845ce1f94b20bf57680" title="This data module contains magic numbers defining decompositions for MPP components. ">max_decomps</a>) .OR.(decomp  &lt;   1)) .AND. &amp;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        decomp  /=  <a class="code" href="namespacedecomp__params.xhtml#a6e9b4c1d028a2d082bf3b915033d7982" title="not set decomp ">decomp_unset</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;      <span class="keyword">WRITE</span>(cmessage,<span class="stringliteral">&#39;(A,I3)&#39;</span>) &amp;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;          <span class="stringliteral">&#39;Error: Cannot change to out of range decomposition &#39;</span>,decomp</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;      errval=10</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;      <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a>(<span class="stringliteral">&quot;um_parvars:change_decomposition&quot;</span>,errval, &amp;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;          cmessage)</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;       <span class="comment">! Check to see if setting decomposition to unset       IF (decomp  ==  decomp_unset) THEN</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;      current_decomp_type = <a class="code" href="namespacedecomp__params.xhtml#a6e9b4c1d028a2d082bf3b915033d7982" title="not set decomp ">decomp_unset</a></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;       <span class="comment">! Check if this decomposition has been initialised</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">IF</span> ( .NOT. <a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(decomp)%set .AND. &amp;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        decomp  /=  <a class="code" href="namespacedecomp__params.xhtml#a6e9b4c1d028a2d082bf3b915033d7982" title="not set decomp ">decomp_unset</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;      <span class="keyword">WRITE</span>(cmessage,<span class="stringliteral">&#39;(A,I3)&#39;</span>) &amp;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;          <span class="stringliteral">&#39;Attempt to select uninitialised decomposition &#39;</span>,decomp</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;      errval=10</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;      <span class="keyword">CALL </span><a class="code" href="interfaceereport__mod_1_1ereport.xhtml">ereport</a>(<span class="stringliteral">&quot;um_parvars:change_decomposition&quot;</span>,errval, &amp;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;          cmessage)</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;       <span class="comment">! Check if this is already the current decomposition</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keywordflow">IF</span> (decomp  /=  current_decomp_type .AND. &amp;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        decomp  /=  <a class="code" href="namespacedecomp__params.xhtml#a6e9b4c1d028a2d082bf3b915033d7982" title="not set decomp ">decomp_unset</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;           <span class="comment">! Set the current decomp early, we implicitly use it later on.</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;      current_decomp_type=decomp</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;           <span class="comment">! Set short aliases</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;      glsizep=&gt;glsize(1:<a class="code" href="namespaceum__parparams.xhtml#a54b579b070f92f38a759987b9ebaa6ad">ndim_max</a>,fld_type_p)</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;      glsizeu=&gt;glsize(1:<a class="code" href="namespaceum__parparams.xhtml#a54b579b070f92f38a759987b9ebaa6ad">ndim_max</a>,fld_type_u)</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;      glsizev=&gt;glsize(1:<a class="code" href="namespaceum__parparams.xhtml#a54b579b070f92f38a759987b9ebaa6ad">ndim_max</a>,fld_type_v)</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;      glsizer=&gt;glsize(1:<a class="code" href="namespaceum__parparams.xhtml#a54b579b070f92f38a759987b9ebaa6ad">ndim_max</a>,fld_type_r)</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;      blsizep=&gt;blsize(1:<a class="code" href="namespaceum__parparams.xhtml#a54b579b070f92f38a759987b9ebaa6ad">ndim_max</a>,fld_type_p)</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;      blsizeu=&gt;blsize(1:<a class="code" href="namespaceum__parparams.xhtml#a54b579b070f92f38a759987b9ebaa6ad">ndim_max</a>,fld_type_u)</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;      blsizev=&gt;blsize(1:<a class="code" href="namespaceum__parparams.xhtml#a54b579b070f92f38a759987b9ebaa6ad">ndim_max</a>,fld_type_v)</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;      blsizer=&gt;blsize(1:<a class="code" href="namespaceum__parparams.xhtml#a54b579b070f92f38a759987b9ebaa6ad">ndim_max</a>,fld_type_r)</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;      <span class="comment">!</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;      <span class="comment">! Copy decomp_db vars into um_parvars</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;      <span class="comment">!</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;      first_comp_pe   = <a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(decomp)%first_comp_pe</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;      last_comp_pe    = <a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(decomp)%last_comp_pe</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;      nproc           = <a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(decomp)%nproc</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;      nproc_x         = <a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(decomp)%gridsize(1)</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;      nproc_y         = <a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(decomp)%gridsize(2)</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;      sb_model_domain = <a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(decomp)%sb_model_domain</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;      offx            = <a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(decomp)%halosize(1,<a class="code" href="namespaceum__parparams.xhtml#adb948f5f906ecfd44cbbd3d86b6925f1">halo_type_single</a>)</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;      offy            = <a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(decomp)%halosize(2,<a class="code" href="namespaceum__parparams.xhtml#adb948f5f906ecfd44cbbd3d86b6925f1">halo_type_single</a>)</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;      halo_i          = <a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(decomp)%halosize(1,<a class="code" href="namespaceum__parparams.xhtml#a82294d3511f8e75fef76418a4a663dc9">halo_type_extended</a>)</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;      halo_j          = <a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(decomp)%halosize(2,<a class="code" href="namespaceum__parparams.xhtml#a82294d3511f8e75fef76418a4a663dc9">halo_type_extended</a>)</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;      gc_proc_row_group = <a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(decomp)%gc_proc_row_group</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;      gc_proc_col_group = <a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(decomp)%gc_proc_col_group</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;      gc_all_proc_group = <a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(decomp)%gc_all_proc_group</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;      halosize(:,:)   = <a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(decomp)%halosize(:,:)</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;      neighbour(:)    = <a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(decomp)%neighbour(:)</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;      bound(:)        = <a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(decomp)%bound(:)</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;      gridsize(:)     = <a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(decomp)%gridsize(:)</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;      glsize(:,:)     = <a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(decomp)%glsize(:,:)</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;      <span class="keywordflow">DO</span> idm=1,<a class="code" href="namespaceum__parparams.xhtml#a54b579b070f92f38a759987b9ebaa6ad">ndim_max</a></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        <span class="keywordflow">DO</span> ifld=1,<a class="code" href="namespacefield__types.xhtml#a2d7b2da552159fd60d34e174091345ec" title="FLDTYPE definitions for the different field types recognised on the decomposition. ">nfld_max</a></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;          <span class="keywordflow">DO</span> ihalo=1,<a class="code" href="namespaceum__parparams.xhtml#a76a58c880ecd94fd4ac5c70301623033">nhalo_max</a></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            lasize(idm,ifld,ihalo) = g_lasize(idm,ifld,ihalo,<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>)</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="keywordflow">          END DO</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;          blsize(idm,ifld)      = g_blsize(idm,ifld,<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>)</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;          datastart_f(idm,ifld) = g_datastart_f(idm,ifld,<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>)<span class="keywordflow">           END DO</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        datastart(idm)  = g_datastart(idm,<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>)</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        datastartr(idm) = g_datastartr(idm,<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>)</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        gridpos(idm)    = g_gridpos(idm,<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>)</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;      <span class="keywordflow">DO</span> iside=1,4</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        at_extremity(iside)=g_at_extremity(iside,<a class="code" href="namespaceum__parcore.xhtml#aa2c9f33748c85a26e676730601ad75d9" title="Note: These vars were formally part of parvars, but do not &#39;switch&#39; with decomposition, and hence were inappropriately homed there, and also cause circular dependencies when used from very basic routines. ">mype</a>)</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;           <span class="keywordflow">DO</span> ipt=1-<a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(decomp)%halosize(1,<a class="code" href="namespaceum__parparams.xhtml#a82294d3511f8e75fef76418a4a663dc9">halo_type_extended</a>),     &amp;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;          <a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(decomp)%glsize(1,fld_type_p)+                    &amp;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;          <a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(decomp)%halosize(1,<a class="code" href="namespaceum__parparams.xhtml#a82294d3511f8e75fef76418a4a663dc9">halo_type_extended</a>)</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        g_pe_index_ew(ipt)=<a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(decomp)%g_pe_index_ew(ipt)</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;      <span class="keywordflow">DO</span> ipt=1-<a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(decomp)%halosize(2,<a class="code" href="namespaceum__parparams.xhtml#a82294d3511f8e75fef76418a4a663dc9">halo_type_extended</a>),     &amp;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;          <a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(decomp)%glsize(2,fld_type_p)+                    &amp;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;          <a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(decomp)%halosize(2,<a class="code" href="namespaceum__parparams.xhtml#a82294d3511f8e75fef76418a4a663dc9">halo_type_extended</a>)</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        g_pe_index_ns(ipt)=<a class="code" href="namespacedecomp__db.xhtml#afe2af5edd60ac47cd7a2812f52f879d8">decompdb</a>(decomp)%g_pe_index_ns(ipt)</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;      atsouth = ( gridpos(2) == 0)</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;      atnorth = ( gridpos(2) == (gridsize(2)-1))</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;      ateast  = ( gridpos(1) == (gridsize(1)-1))</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;      atwest  = ( gridpos(1) == 0)</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;     <span class="preprocessor">#if defined(RECON)</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="preprocessor"></span>      <span class="comment">! Additional info for reconfiguration - for LandSeaMask</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;      <span class="keywordflow">IF</span> (decomp == <a class="code" href="namespacedecomp__params.xhtml#a3104711097ad4d38e5ccd648d10bcc6b" title="decomps for rcf ">decomp_rcf_input</a> ) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        <a class="code" href="namespacercf__lsm__mod.xhtml#a72bbd73284c7ac5751b4226aab41eb6f" title="Pointers to active lsm fields. ">glob_atmos_landmask</a>       =&gt; <a class="code" href="namespacercf__lsm__mod.xhtml#a703ea055b7d08f016d84f544759db5e2" title="Stores land sea masks and related sizes/data &amp; coastal adjustment gather indexes etc. ">glob_lsm_in</a></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <a class="code" href="namespacercf__lsm__mod.xhtml#a40bd16f91f51def1924f115077a6b92e">local_atmos_landmask</a>      =&gt; <a class="code" href="namespacercf__lsm__mod.xhtml#a6f4e26ba15af4ff8f15716bded9b44d7">local_lsm_in</a></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        <a class="code" href="namespacercf__lsm__mod.xhtml#aa4bc406d27d922f5a3cd5fa4371e52f7">local_land_field</a>          =&gt; <a class="code" href="namespacercf__lsm__mod.xhtml#a7facf41064b80e6aeb010319a8316278">local_land_in</a></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        <a class="code" href="namespacercf__lsm__mod.xhtml#a2db0eedbc7e90cefdace10071c8936e8">glob_land_field</a>           =&gt; <a class="code" href="namespacercf__lsm__mod.xhtml#a05f5ace1618b0c2d718456a69fd1400a">glob_land_in</a></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;      <span class="keywordflow">ELSE</span> <span class="keywordflow">IF</span> (decomp == <a class="code" href="namespacedecomp__params.xhtml#a197e853bde7274df4b87ac6a3940a602">decomp_rcf_output</a>) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <a class="code" href="namespacercf__lsm__mod.xhtml#a72bbd73284c7ac5751b4226aab41eb6f" title="Pointers to active lsm fields. ">glob_atmos_landmask</a>       =&gt; <a class="code" href="namespacercf__lsm__mod.xhtml#acc3273771adf31bb6284761c52ae98b5">glob_lsm_out</a></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        <a class="code" href="namespacercf__lsm__mod.xhtml#a40bd16f91f51def1924f115077a6b92e">local_atmos_landmask</a>      =&gt; <a class="code" href="namespacercf__lsm__mod.xhtml#ab522187082e89e62fee2ff81186100ab">local_lsm_out</a></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <a class="code" href="namespacercf__lsm__mod.xhtml#aa4bc406d27d922f5a3cd5fa4371e52f7">local_land_field</a>          =&gt; <a class="code" href="namespacercf__lsm__mod.xhtml#a6f9d7157f9b54ab3b35e442f3676d399">local_land_out</a></div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        <a class="code" href="namespacercf__lsm__mod.xhtml#a2db0eedbc7e90cefdace10071c8936e8">glob_land_field</a>           =&gt; <a class="code" href="namespacercf__lsm__mod.xhtml#a07f474777ef9b10aaae6354f7a2c8da2">glob_land_out</a></div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="keywordflow">      END IF</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="preprocessor"></span><span class="keywordflow">    END IF</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="keywordflow">IF</span> (lhook) &amp;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;CHANGE_DECOMPOSITION&#39;</span>,zhook_out,zhook_handle)</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="keyword">  END SUBROUTINE </span>change_decomposition</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="keyword">END MODULE </span>um_parvars</div></div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
