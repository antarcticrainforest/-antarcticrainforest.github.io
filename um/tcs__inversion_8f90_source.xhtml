<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>UM General Atmosphere: /home/wilfred/PhD/UM/src/atmosphere/convection/tcs_inversion.f90 Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="unified_model_logo_2.jpeg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">UM General Atmosphere
   &#160;<span id="projectnumber">8.6</span>
   </div>
   <div id="projectbrief">UK Met Offices Unified Model</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_1df14ea1ac826f73bc3062fa8a76e0c2.xhtml">atmosphere</a></li><li class="navelem"><a class="el" href="dir_c7cc3e4dc8dce4a958919661145604f9.xhtml">convection</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">tcs_inversion.f90</div>  </div>
</div><!--header-->
<div class="contents">
<a href="tcs__inversion_8f90.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">!</span></div><div class="line"><a name="l00006"></a><span class="lineno"><a class="line" href="namespacetcs__inversion.xhtml">    6</a></span>&#160;<span class="keyword">MODULE</span> <a class="code" href="namespacetcs__inversion.xhtml" title="!&gt; Module to calculate values of theta, q etc in inversion. These ">tcs_inversion</a></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;  <span class="keywordtype">USE </span>yomhook<span class="keywordtype">, ONLY</span>: lhook, dr_hook</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;  <span class="keywordtype">USE </span>parkind1<span class="keywordtype">, ONLY</span>: jprb, jpim</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;  <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;  <span class="comment">!</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;  <span class="comment">! Description:</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;  <span class="comment">!   Module to calculate values of theta, q etc inversion. These</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;  <span class="comment">!   values are then used to calculate the fluxes at the inversion.   !</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;  <span class="comment">! Method:</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;  <span class="comment">!   &lt;reference to documentation to go here, once available&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;  <span class="comment">!</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;      <span class="comment">!</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <span class="comment">!   Language: Fortran 90.</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;  <span class="comment">!   This code is written to UMDP3 version 8.1 programming standards.</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;  <span class="comment">!</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">CONTAINS</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">  SUBROUTINE </span><a class="code" href="namespacetcs__inversion.xhtml#a5ca0ecbf950d55cc5aec198fccb9b2ca">calc_inversion_warm</a>( n_xx, ntra, l_tracer,              &amp;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;     wthetav_surf, dthetav_cb, dthetav_cld, dp_cld, wqr_inv,         &amp;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;     precip_product_inv_base, wtheta_inv_base,wq_inv,wql_inv,        &amp;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;     wthetavl_inv, wthetav_inv,wthetal_inv, wqt_inv_base,wh_inv,     &amp;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;     wtracer_inv)</div><div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="namespacetcs__inversion.xhtml#a5ca0ecbf950d55cc5aec198fccb9b2ca">   31</a></span>&#160;    -    <span class="comment">!</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="comment">! Description:</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="comment">!   Calculate values of theta, q etc at the inversion level. These</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="comment">!   values are then used to calculate the fluxes at the inversion.</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="comment">!   The inversion base level is defined as a uv level in the scheme.</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="comment">!</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    -</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordtype">USE </span><a class="code" href="namespacetcs__parameters__warm.xhtml" title="!&gt; Module to hold the parameters which are used in the tcs warm rain ">tcs_parameters_warm</a><span class="keywordtype">,  ONLY</span> :                          &amp;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;       <a class="code" href="namespacetcs__parameters__warm.xhtml#a459791a63117a731862e351ea634c4a8" title="Used in: cgconv_inversion. ">beta_cld</a>, <a class="code" href="namespacetcs__parameters__warm.xhtml#aa0f270262bd1264424ed31f54ec7c8a3">jump_inv_a1</a>, <a class="code" href="namespacetcs__parameters__warm.xhtml#a51cbb3962eabdead1f550cb9a4cbead3">jump_inv_a2</a>, <a class="code" href="namespacetcs__parameters__warm.xhtml#ae7591e3ed7b15abe7f4a3885c2a90905">jump_inv_a3</a>        &amp;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;       , <a class="code" href="namespacetcs__parameters__warm.xhtml#a28b0a3392920e7259e03c2305c17fefb">mb_inv_a1</a> ,<a class="code" href="namespacetcs__parameters__warm.xhtml#a1dd6f7e8b6fc1cc2cfb35703f4e58d68">sat_inv_a1</a>, <a class="code" href="namespacetcs__parameters__warm.xhtml#ad5996f11824c2369e53b3d6d4caef260">q_min</a></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordtype">USE </span><a class="code" href="namespacetcs__constants.xhtml" title="!&gt; Module holding collection of physical constants and derived!&gt; combinations thereof. ">tcs_constants</a><span class="keywordtype">,        ONLY</span> :                          &amp;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;       repsilon, <a class="code" href="namespacetcs__constants.xhtml#aeaf6c45783b3213479b7d0e2d72f4d81">lc_o_cp</a>, a_bolton, b_bolton, c_bolton        &amp;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;       ,d_bolton, pref, c_virtual, lc, rv, kappa, g           &amp;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;       ,recip_kappa</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordtype">USE </span><a class="code" href="namespacetcs__common__warm.xhtml" title="!&gt; Module containing variables which are common to the tcs warm routines ">tcs_common_warm</a> <span class="keywordtype">,     ONLY</span> :                          &amp;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;       <a class="code" href="namespacetcs__common__warm.xhtml#a1b915253b39cbc88f61bb6685a397bde">scales</a>, <a class="code" href="namespacetcs__common__warm.xhtml#a81cdfdc8aa9c18bd5e2e556c9c944175">inv_m1</a>, <a class="code" href="namespacetcs__common__warm.xhtml#a3062d2ed9c720184c4173aafb651d775">inv</a>, <a class="code" href="namespacetcs__common__warm.xhtml#a9f6a7c86a880741044bc634bcb9f37a7">inv_p1</a></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="comment">! DEPENDS ONs... subroutines without explicit interface</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="comment">! DEPENDS ON: qsat_mix</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordtype">IMPLICIT NONE</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="comment">! Subroutine Arguments</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordtype">INTEGER</span>, <span class="keywordtype">INTENT(in)</span> ::                                            &amp;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;       n_xx                                                           &amp;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                                <span class="comment">! No. of congestus convection points</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;       ,  ntra                                                              <span class="comment">! Number of tracer fields</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordtype">LOGICAL</span>, <span class="keywordtype">INTENT(in)</span> ::                                            &amp;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;       L_tracer         <span class="comment">! true - tracers present.</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(in)</span> ::                                               &amp;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;       wthetav_surf(n_xx)                                             &amp;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                                <span class="comment">! wthetav flux at the surface</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;       , dthetav_cb(n_xx)                                             &amp;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                                <span class="comment">! dthetav across cloud base (k)</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;       , dthetav_cld(n_xx)                                            &amp;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                                <span class="comment">!  dthetav across cloud</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;       , dp_cld(n_xx)                                                 &amp;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                                <span class="comment">!  dp across cloud</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;       , wqr_inv(n_xx)                                                &amp;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                                <span class="comment">! rain water flux (kg/kg m/s)</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;       , precip_product_inv_base(n_xx)                                      <span class="comment">! precip production from inversion</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="comment">! (kg/m2/s) / density ?</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordtype">REAL</span>, <span class="keywordtype">INTENT(out)</span> ::                                              &amp;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;       wthetal_inv(n_xx)                                              &amp;                                <span class="comment">!  w&#39;thetal&#39; at inversion (Km/s)</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;       , wtheta_inv_base(n_xx)                                        &amp;                                <span class="comment">!  w&#39;theta&#39; at inversion (Km/s)</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;       , wq_inv(n_xx)                                                 &amp;                                <span class="comment">!  w&#39;q&#39;  at inversion (kg/kg m/s)</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;       , wqt_inv_base(n_xx)                                           &amp;                                <span class="comment">!  w&#39;qt&#39;  at inversion (kg/kg m/s)</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;       , wql_inv(n_xx)                                                &amp;                                <span class="comment">!  w&#39;ql at inversion (kg/kg m/s)</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;       , wthetavl_inv(n_xx)                                           &amp;                                <span class="comment">!  w&#39;thetavl&#39; at inversion (Km/s)</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;       , wthetav_inv(n_xx)                                            &amp;                                <span class="comment">!  w&#39;thetav&#39; at inversion (Km/s)</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;       , wh_inv(n_xx)                                                 &amp;                                <span class="comment">!  w&#39;h&#39; at inversion (Km/s)</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;       , wtracer_inv(n_xx,ntra)                                   <span class="comment">!  w&#39;tracer&#39; at inversion (kgm/kg/s)</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="comment">! Variables defined locally</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;       <span class="keywordtype">REAL</span>                                                                 &amp;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;       dthetav_inv(n_xx)                                                 &amp;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                                <span class="comment">! thetav across inversion (k)</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;       , dh_inv(n_xx)                                                    &amp;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                                <span class="comment">! h across inversion (k)        , thetav_mid(n_xx)                                                &amp;</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;       , thetav_below(n_xx)                                              &amp;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;       , thetav_above(n_xx)                                              &amp;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;       , h_mid(n_xx)                                                     &amp;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;       , h_below(n_xx)                                                   &amp;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;       , h_above(n_xx)                                                   &amp;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;       , t_mid(n_xx)                                                     &amp;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;       , t_above(n_xx)                                                   &amp;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;       , t_below(n_xx)                                                   &amp;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;       , r_inv_base(n_xx)                                                &amp;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                                <span class="comment">! water vapour at inversion (mixing</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                                <span class="comment">!  ratio, kg/kg)</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;       , t_inv_base(n_xx)                                                &amp;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                                <span class="comment">! T at inversion (K)</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;       , rsat_inv_base(n_xx)                                             &amp;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                                <span class="comment">! rsat at inversion (kg/kg)</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;       , drsatdt_inv_base(n_xx)                                          &amp;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                                <span class="comment">! drsat/dT at inversion (kg/kg/K)</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;       , t_lcl_below(n_xx)                                               &amp;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                                <span class="comment">! T at LCL for level below inversion base</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;       , t_lcl_mid(n_xx)                                                 &amp;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                                <span class="comment">! T at LCL for level above inversion base</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;       , t_lcl_above(n_xx)                                               &amp;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                                <span class="comment">! T at LCL for level above inversion top</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;       , t_lcl_inv(n_xx)                                                 &amp;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                                <span class="comment">! T at LCL for  inversion base</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;       , pstar_below(n_xx)                                               &amp;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                                <span class="comment">! p at LCL for level below inversion base</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;       , pstar_mid(n_xx)                                                 &amp;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                                <span class="comment">! p at LCL for level above inversion base</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;       , pstar_above(n_xx)                                               &amp;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                                <span class="comment">! p at LCL for level above inversion top</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;       , dthetav_inv2(n_xx)                                              &amp;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                                <span class="comment">!  dthetav across inversion</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;       , dthetav_invnew(n_xx)                                            &amp;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                                <span class="comment">!  dthetav across inversion</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;       , r_rsat_inv_base(n_xx)                                           &amp;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                                <span class="comment">! r-rsat at inversion</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;       , dpstar_inv(n_xx)                                                &amp;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                                <span class="comment">! dpstar across inversion</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;       , dp_inv(n_xx)                                                    &amp;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                                <span class="comment">! dp across inversion</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;       , rsat_lcl(n_xx)                                                  &amp;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                                <span class="comment">! rsat at lcl</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;       , dthetav_dpstar_top(n_xx)                                        &amp;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                                <span class="comment">! dthetav/dp* at top of inversion</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;       , dthetav_dpstar_base(n_xx)                                       &amp;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                                <span class="comment">! dthetav/dp* at base of inversion</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;       , dthetav_dpstar_layer(n_xx)                                      &amp;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                                <span class="comment">! dthetav/dp* across inversion</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;       , beta_inv(n_xx)                                                  &amp;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                                <span class="comment">! beta for the inversion layer</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;       , dp_lower(n_xx)                                                  &amp;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                                <span class="comment">! dp across lower part of inversion</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;       , dp_upper(n_xx)                                                  &amp;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                                <span class="comment">! dp across upper part of inversion</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;       , thetav_inv_base(n_xx)                                           &amp;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                                <span class="comment">! thetav and base of inversion (k)</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;       , thetav_inv_top(n_xx)                                            &amp;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                                <span class="comment">! thetav and top of inversion (k)</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;       , theta_inv_base(n_xx)                                            &amp;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                                <span class="comment">! thetav and base of inversion (k)</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;       , pstar_inv_base(n_xx)                                 <span class="comment">! pstar at inversion base</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="comment">! temporary variables</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keywordtype">REAL</span>                                                                 &amp;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;       term_a                                                            &amp;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;       , term_b                                                          &amp;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;       , term_c                                                          &amp;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;       , vap_press                                                       &amp;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;       , div_term2, divisor_term                                        </div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keywordtype">LOGICAL</span> :: l_3lev_inv     <span class="comment">! true for 3 level inversion cal</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="comment">! current default is false.      </span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    -    <span class="comment">! Loop counters</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    -    <span class="keywordtype">INTEGER</span> :: i, ktra</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_in  = 0</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keywordtype">INTEGER(KIND=jpim)</span>, <span class="keywordtype">PARAMETER</span> :: zhook_out = 1</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keywordtype">REAL(KIND=jprb)</span>               :: zhook_handle</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    -    <span class="comment">! 1.0 Initialise arrays</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    -</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;TCS_INVERSION:CALC_INVERSION_WARM&#39;</span>,zhook_in,zhook_handle)</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    l_3lev_inv = .false. <span class="comment">! Flag to use a 3 level inversion scheme</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="comment">! Working note: this doesn&#39;t yet work, but</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="comment">! if/when it does, then this switch should</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="comment">! be put at a higher level</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    wtheta_inv_base(:) = 0.0</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    wthetavl_inv(:)    = 0.0</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    wthetav_inv(:)     = 0.0</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    wh_inv(:)          = 0.0</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    wthetal_inv(:)     = 0.0</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    wq_inv(:)          = 0.0</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    wqt_inv_base(:)    = 0.0</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    wql_inv(:)         = 0.0</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    wtracer_inv(:,:)   = 0.0</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    -    <span class="comment">! derived values at levels above and below inversion base and top</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    -    thetav_below(:) = <a class="code" href="namespacetcs__common__warm.xhtml#a81cdfdc8aa9c18bd5e2e556c9c944175">inv_m1</a>%theta(:)*                               &amp;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;       (1.+<a class="code" href="namespacetcs__common__warm.xhtml#a81cdfdc8aa9c18bd5e2e556c9c944175">inv_m1</a>%q_mix(:)/repsilon)/(1.+<a class="code" href="namespacetcs__common__warm.xhtml#a81cdfdc8aa9c18bd5e2e556c9c944175">inv_m1</a>%q_mix(:))</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    thetav_mid(:)   = <a class="code" href="namespacetcs__common__warm.xhtml#a3062d2ed9c720184c4173aafb651d775">inv</a>%theta(:)*                                  &amp;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;       (1.+<a class="code" href="namespacetcs__common__warm.xhtml#a3062d2ed9c720184c4173aafb651d775">inv</a>%q_mix(:)/repsilon)/(1.+<a class="code" href="namespacetcs__common__warm.xhtml#a3062d2ed9c720184c4173aafb651d775">inv</a>%q_mix(:))</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    thetav_above(:) = <a class="code" href="namespacetcs__common__warm.xhtml#a9f6a7c86a880741044bc634bcb9f37a7">inv_p1</a>%theta(:)*                               &amp;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;       (1.+<a class="code" href="namespacetcs__common__warm.xhtml#a9f6a7c86a880741044bc634bcb9f37a7">inv_p1</a>%q_mix(:)/repsilon)/(1.+<a class="code" href="namespacetcs__common__warm.xhtml#a9f6a7c86a880741044bc634bcb9f37a7">inv_p1</a>%q_mix(:))</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    h_below(:) = <a class="code" href="namespacetcs__common__warm.xhtml#a81cdfdc8aa9c18bd5e2e556c9c944175">inv_m1</a>%theta(:) + <a class="code" href="namespacetcs__constants.xhtml#aeaf6c45783b3213479b7d0e2d72f4d81">lc_o_cp</a>*<a class="code" href="namespacetcs__common__warm.xhtml#a81cdfdc8aa9c18bd5e2e556c9c944175">inv_m1</a>%q_mix(:)</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    h_mid(:)   = <a class="code" href="namespacetcs__common__warm.xhtml#a3062d2ed9c720184c4173aafb651d775">inv</a>%theta(:)   + <a class="code" href="namespacetcs__constants.xhtml#aeaf6c45783b3213479b7d0e2d72f4d81">lc_o_cp</a>*<a class="code" href="namespacetcs__common__warm.xhtml#a3062d2ed9c720184c4173aafb651d775">inv</a>%q_mix(:)</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    h_above(:) = <a class="code" href="namespacetcs__common__warm.xhtml#a9f6a7c86a880741044bc634bcb9f37a7">inv_p1</a>%theta(:) + <a class="code" href="namespacetcs__constants.xhtml#aeaf6c45783b3213479b7d0e2d72f4d81">lc_o_cp</a>*<a class="code" href="namespacetcs__common__warm.xhtml#a9f6a7c86a880741044bc634bcb9f37a7">inv_p1</a>%q_mix(:)</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    t_below(:) = <a class="code" href="namespacetcs__common__warm.xhtml#a81cdfdc8aa9c18bd5e2e556c9c944175">inv_m1</a>%theta(:)*<a class="code" href="namespacetcs__common__warm.xhtml#a81cdfdc8aa9c18bd5e2e556c9c944175">inv_m1</a>%exner_theta(:)</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    t_mid(:)   = <a class="code" href="namespacetcs__common__warm.xhtml#a3062d2ed9c720184c4173aafb651d775">inv</a>%theta(:)  *<a class="code" href="namespacetcs__common__warm.xhtml#a3062d2ed9c720184c4173aafb651d775">inv</a>%exner_theta(:)</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    t_above(:) = <a class="code" href="namespacetcs__common__warm.xhtml#a9f6a7c86a880741044bc634bcb9f37a7">inv_p1</a>%theta(:)*<a class="code" href="namespacetcs__common__warm.xhtml#a9f6a7c86a880741044bc634bcb9f37a7">inv_p1</a>%exner_theta(:)</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    -    <span class="comment">! Calculate of r and theta at inversion</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="comment">! Require dp*/dp to do this  dtheta/dp* and dr/dp* are ~ constant</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="comment">! through inversion</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="comment">!</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="comment">! Need p* above and below inversion base and top</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="comment">!</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="comment">! Calculate temperature and pressure of lifting condensation level</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="comment">!  using approximations from Bolton (1980)</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    -</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keywordflow">IF</span> (l_3lev_inv) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;      <span class="comment">! Working note: This 3 level inversion method does not</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;      <span class="comment">! currently work.</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;      <span class="keywordflow">DO</span> i = 1,n_xx</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="keywordflow">IF</span> (<a class="code" href="namespacetcs__common__warm.xhtml#a3062d2ed9c720184c4173aafb651d775">inv</a>%q_mix(i) &gt;  0.0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;          vap_press = 0.01*<a class="code" href="namespacetcs__common__warm.xhtml#a3062d2ed9c720184c4173aafb651d775">inv</a>%q_mix(i)*<a class="code" href="namespacetcs__common__warm.xhtml#a3062d2ed9c720184c4173aafb651d775">inv</a>%p_theta(i)/                       &amp;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                          (repsilon+<a class="code" href="namespacetcs__common__warm.xhtml#a3062d2ed9c720184c4173aafb651d775">inv</a>%q_mix(i))</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;          vap_press = 0.01*<a class="code" href="namespacetcs__parameters__warm.xhtml#ad5996f11824c2369e53b3d6d4caef260">q_min</a>*<a class="code" href="namespacetcs__common__warm.xhtml#a3062d2ed9c720184c4173aafb651d775">inv</a>%p_theta(i)/(repsilon+<a class="code" href="namespacetcs__parameters__warm.xhtml#ad5996f11824c2369e53b3d6d4caef260">q_min</a>)</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        t_lcl_mid(i) =  a_bolton + b_bolton / ( c_bolton*log(t_mid(i))        &amp;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;           - log(vap_press) - d_bolton )</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        pstar_mid(i) = <a class="code" href="namespacetcs__common__warm.xhtml#a3062d2ed9c720184c4173aafb651d775">inv</a>%p_theta(i) *                                       &amp;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;           ( t_lcl_mid(i) / t_mid(i) )**recip_kappa</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        <span class="keywordflow">IF</span> (<a class="code" href="namespacetcs__common__warm.xhtml#a81cdfdc8aa9c18bd5e2e556c9c944175">inv_m1</a>%q_mix(i) &gt;  0.0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;          vap_press = 0.01*<a class="code" href="namespacetcs__common__warm.xhtml#a81cdfdc8aa9c18bd5e2e556c9c944175">inv_m1</a>%q_mix(i)*<a class="code" href="namespacetcs__common__warm.xhtml#a81cdfdc8aa9c18bd5e2e556c9c944175">inv_m1</a>%p_theta(i)                  &amp;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;             /(repsilon+<a class="code" href="namespacetcs__common__warm.xhtml#a81cdfdc8aa9c18bd5e2e556c9c944175">inv_m1</a>%q_mix(i))</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;          vap_press = 0.01*<a class="code" href="namespacetcs__parameters__warm.xhtml#ad5996f11824c2369e53b3d6d4caef260">q_min</a>*<a class="code" href="namespacetcs__common__warm.xhtml#a81cdfdc8aa9c18bd5e2e556c9c944175">inv_m1</a>%p_theta(i)/(repsilon+<a class="code" href="namespacetcs__parameters__warm.xhtml#ad5996f11824c2369e53b3d6d4caef260">q_min</a>)</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        t_lcl_below(i) = a_bolton + b_bolton/( c_bolton*log(t_below(i))       &amp;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;           - log(vap_press) - d_bolton )</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        pstar_below(i) = <a class="code" href="namespacetcs__common__warm.xhtml#a81cdfdc8aa9c18bd5e2e556c9c944175">inv_m1</a>%p_theta(i) *                                  &amp;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;           ( t_lcl_below(i) / t_below(i) )**recip_kappa</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <span class="keywordflow">IF</span> (<a class="code" href="namespacetcs__common__warm.xhtml#a9f6a7c86a880741044bc634bcb9f37a7">inv_p1</a>%q_mix(i) &gt;  0.0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;          vap_press = 0.01*<a class="code" href="namespacetcs__common__warm.xhtml#a9f6a7c86a880741044bc634bcb9f37a7">inv_p1</a>%q_mix(i)*<a class="code" href="namespacetcs__common__warm.xhtml#a9f6a7c86a880741044bc634bcb9f37a7">inv_p1</a>%p_theta(i)                  &amp;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;             /(repsilon+<a class="code" href="namespacetcs__common__warm.xhtml#a9f6a7c86a880741044bc634bcb9f37a7">inv_p1</a>%q_mix(i))</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;          vap_press = 0.01*<a class="code" href="namespacetcs__parameters__warm.xhtml#ad5996f11824c2369e53b3d6d4caef260">q_min</a>*<a class="code" href="namespacetcs__common__warm.xhtml#a9f6a7c86a880741044bc634bcb9f37a7">inv_p1</a>%p_theta(i)/(repsilon+<a class="code" href="namespacetcs__parameters__warm.xhtml#ad5996f11824c2369e53b3d6d4caef260">q_min</a>)</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        t_lcl_above(i) = a_bolton + b_bolton/( c_bolton*log(t_above(i))       &amp;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;           - log(vap_press) - d_bolton )</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        pstar_above(i) = <a class="code" href="namespacetcs__common__warm.xhtml#a9f6a7c86a880741044bc634bcb9f37a7">inv_p1</a>%p_theta(i) *                                  &amp;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;           ( t_lcl_above(i) / t_above(i) )**recip_kappa</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;      <span class="comment">! gradients of dthetav/dp* across inversion base and inversion top</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;      <span class="comment">!  and across the whole layer</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;      <span class="keywordflow">DO</span> i = 1,n_xx</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        dthetav_dpstar_top(i) = (thetav_above(i)-thetav_mid(i))/        &amp;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;           (pstar_above(i)-pstar_mid(i))</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        dthetav_dpstar_base(i) = (thetav_mid(i)-thetav_below(i))/       &amp;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;           (pstar_mid(i)-pstar_below(i))</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        dthetav_dpstar_layer(i) = (thetav_above(i)-thetav_below(i))/    &amp;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;           (pstar_above(i)-pstar_below(i))</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        <span class="comment">! pressure across inversion layer</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        dp_inv(i) = <a class="code" href="namespacetcs__common__warm.xhtml#a3062d2ed9c720184c4173aafb651d775">inv</a>%p_rho(i)-<a class="code" href="namespacetcs__common__warm.xhtml#a81cdfdc8aa9c18bd5e2e556c9c944175">inv_m1</a>%p_rho(i)</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        <span class="comment">! dthetav across the inversion layer</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        dthetav_inv(i) = (0.16+0.55*<a class="code" href="namespacetcs__common__warm.xhtml#a1b915253b39cbc88f61bb6685a397bde">scales</a>%zcld(i)/<a class="code" href="namespacetcs__common__warm.xhtml#a1b915253b39cbc88f61bb6685a397bde">scales</a>%zlcl(i))      &amp;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;           *wthetav_surf(i)/(0.2*<a class="code" href="namespacetcs__common__warm.xhtml#a1b915253b39cbc88f61bb6685a397bde">scales</a>%mb(i))</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <span class="comment">! dp* across inversion layer</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        dpstar_inv(i) = dthetav_inv(i)/dthetav_dpstar_layer(i)</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        beta_inv(i)  = dpstar_inv(i)/dp_inv(i)</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        dp_lower(i) = <a class="code" href="namespacetcs__common__warm.xhtml#a3062d2ed9c720184c4173aafb651d775">inv</a>%p_theta(i) - <a class="code" href="namespacetcs__common__warm.xhtml#a81cdfdc8aa9c18bd5e2e556c9c944175">inv_m1</a>%p_rho(i)</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        dp_upper(i) = <a class="code" href="namespacetcs__common__warm.xhtml#a3062d2ed9c720184c4173aafb651d775">inv</a>%p_rho(i) - <a class="code" href="namespacetcs__common__warm.xhtml#a3062d2ed9c720184c4173aafb651d775">inv</a>%p_theta(i)</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;      <span class="comment">! calculate thetav at inversion top and inversion base using</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;      <span class="comment">! interpolation from value at inversion middle.</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;      <span class="keywordflow">DO</span> i = 1,n_xx</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        thetav_inv_base(i) = thetav_mid(i)                              &amp;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;           - beta_inv(i)*dthetav_dpstar_base(i)*dp_lower(i)</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        thetav_inv_top(i) = thetav_mid(i)                               &amp;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;           + beta_inv(i)*dthetav_dpstar_top(i)*dp_upper(i)</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        pstar_inv_base(i) = pstar_mid(i) - beta_inv(i)*dp_lower(i)</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        dthetav_inv2(i) = thetav_inv_top(i) - thetav_inv_base(i)</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        <span class="comment">! There are points with problems        !  dthetav_inv2   -ve</span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        <span class="comment">!  dthetav_inv2 &gt;&gt; dthetav_inv</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        <span class="comment">! For these points need to use another method ?</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="keywordflow">ELSE</span>   <span class="comment">! 2 level inversion</span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;      <span class="keywordflow">DO</span> i = 1,n_xx</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        <span class="keywordflow">IF</span> (<a class="code" href="namespacetcs__common__warm.xhtml#a3062d2ed9c720184c4173aafb651d775">inv</a>%q_mix(i) &gt;  0.0) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;          vap_press = 0.01*<a class="code" href="namespacetcs__common__warm.xhtml#a3062d2ed9c720184c4173aafb651d775">inv</a>%q_mix(i)*<a class="code" href="namespacetcs__common__warm.xhtml#a3062d2ed9c720184c4173aafb651d775">inv</a>%p_theta(i)/                    &amp;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                                (repsilon+<a class="code" href="namespacetcs__common__warm.xhtml#a3062d2ed9c720184c4173aafb651d775">inv</a>%q_mix(i))</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;          vap_press = 0.01*<a class="code" href="namespacetcs__parameters__warm.xhtml#ad5996f11824c2369e53b3d6d4caef260">q_min</a>*<a class="code" href="namespacetcs__common__warm.xhtml#a3062d2ed9c720184c4173aafb651d775">inv</a>%p_theta(i)/(repsilon+<a class="code" href="namespacetcs__parameters__warm.xhtml#ad5996f11824c2369e53b3d6d4caef260">q_min</a>)</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        t_lcl_mid(i) = a_bolton + b_bolton /( c_bolton*log(t_mid(i))       &amp;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;           - log(vap_press) - d_bolton )</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        pstar_mid(i) = <a class="code" href="namespacetcs__common__warm.xhtml#a3062d2ed9c720184c4173aafb651d775">inv</a>%p_theta(i) *                                    &amp;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;           ( t_lcl_mid(i) / t_mid(i) )**recip_kappa</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;      <span class="keywordflow">DO</span> i = 1,n_xx</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        dp_inv(i) = <a class="code" href="namespacetcs__common__warm.xhtml#a3062d2ed9c720184c4173aafb651d775">inv</a>%p_theta(i)-<a class="code" href="namespacetcs__common__warm.xhtml#a81cdfdc8aa9c18bd5e2e556c9c944175">inv_m1</a>%p_theta(i)</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        dthetav_invnew(i) = (0.16+0.55*<a class="code" href="namespacetcs__common__warm.xhtml#a1b915253b39cbc88f61bb6685a397bde">scales</a>%zcld(i)/<a class="code" href="namespacetcs__common__warm.xhtml#a1b915253b39cbc88f61bb6685a397bde">scales</a>%zlcl(i))      &amp;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;           *wthetav_surf(i)/(0.2*<a class="code" href="namespacetcs__common__warm.xhtml#a1b915253b39cbc88f61bb6685a397bde">scales</a>%mb(i))</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        <span class="comment">! restriction on dthetav_cld to avoid problems with strange</span></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <span class="comment">! profiles</span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        <span class="keywordflow">IF</span> (dthetav_cld(i).GT.0.01) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;          dpstar_inv(i)     = <a class="code" href="namespacetcs__parameters__warm.xhtml#a459791a63117a731862e351ea634c4a8" title="Used in: cgconv_inversion. ">beta_cld</a>*dthetav_invnew(i)*dp_cld(i)    &amp;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;             /dthetav_cld(i)</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        <span class="keywordflow">ELSE</span></div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;          dpstar_inv(i)     = <a class="code" href="namespacetcs__parameters__warm.xhtml#a459791a63117a731862e351ea634c4a8" title="Used in: cgconv_inversion. ">beta_cld</a>*dthetav_invnew(i)*dp_cld(i)    &amp;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;             /0.01</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="keywordflow">        END IF</span></div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        pstar_inv_base(i)  = pstar_mid(i) - dpstar_inv(i)</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        thetav_inv_base(i) = thetav_mid(i) - dthetav_invnew(i)</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        <span class="comment">!</span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        <span class="comment">! value of thetav across inversion</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        <span class="comment">!</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        dthetav_inv2(i) = thetav_mid(i) - thetav_below(i)</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        dh_inv(i) = h_mid(i) - h_below(i)</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="keywordflow">    END IF</span>  <span class="comment">! inversion cal type</span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        <span class="comment">! Calculate of r-rsat at inversion</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;       <span class="keywordflow">DO</span> i = 1,n_xx</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;      t_lcl_inv(i) = thetav_inv_base(i)*                              &amp;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;         ((pstar_inv_base(i)/pref)**kappa)</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <span class="keyword">CALL </span><a class="code" href="qsat__mix_8f90.xhtml#ab2c9bd03497c107afdc2ea71e3887626" title="Saturation Specific Humidity/mixing Scheme(Qsat):Vapour to Liquid/Ice. ">qsat_mix</a>(rsat_lcl,t_lcl_inv,pstar_inv_base,n_xx,.true.)</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <span class="keywordflow">DO</span> i = 1,n_xx</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;      r_inv_base(i) = rsat_lcl(i)/                                    &amp;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;         (1.+c_virtual*(lc/(rv*t_lcl_inv(i)))*rsat_lcl(i))</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;      theta_inv_base(i) = thetav_inv_base(i)                          &amp;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;         /(1.+c_virtual*r_inv_base(i))</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;      t_inv_base(i) = theta_inv_base(i)*<a class="code" href="namespacetcs__common__warm.xhtml#a81cdfdc8aa9c18bd5e2e556c9c944175">inv_m1</a>%exner_rho(i)</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <span class="keyword">CALL </span><a class="code" href="qsat__mix_8f90.xhtml#ab2c9bd03497c107afdc2ea71e3887626" title="Saturation Specific Humidity/mixing Scheme(Qsat):Vapour to Liquid/Ice. ">qsat_mix</a>(rsat_inv_base,t_inv_base,<a class="code" href="namespacetcs__common__warm.xhtml#a81cdfdc8aa9c18bd5e2e556c9c944175">inv_m1</a>%p_rho,n_xx,.true.)</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="keywordflow">DO</span> i = 1,n_xx</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;      drsatdt_inv_base(i) = lc *rsat_inv_base(i)/                     &amp;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;         (rv * t_inv_base(i)*t_inv_base(i))</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;      r_rsat_inv_base(i) = r_inv_base(i) - rsat_inv_base(i)</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;       <span class="comment">!  Calculate fluxes at inversion uses values calculated above</span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;   </div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    -    <span class="comment">! Solution for fluxes at inversion</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    -</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    <span class="keywordflow">DO</span> i = 1,n_xx</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;      <span class="comment">! precipitation adds extra terms to A and B</span></div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;      term_a = -<a class="code" href="namespacetcs__parameters__warm.xhtml#aa0f270262bd1264424ed31f54ec7c8a3">jump_inv_a1</a>*<a class="code" href="namespacetcs__common__warm.xhtml#a1b915253b39cbc88f61bb6685a397bde">scales</a>%mb_new(i)*dthetav_inv2(i) +            &amp;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;         (<a class="code" href="namespacetcs__constants.xhtml#aeaf6c45783b3213479b7d0e2d72f4d81">lc_o_cp</a>/<a class="code" href="namespacetcs__common__warm.xhtml#a81cdfdc8aa9c18bd5e2e556c9c944175">inv_m1</a>%exner_rho(i)                                     &amp;</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;         -0.61*theta_inv_base(i))*precip_product_inv_base(i)</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;      term_b = thetav_inv_base(i)*<a class="code" href="namespacetcs__common__warm.xhtml#a1b915253b39cbc88f61bb6685a397bde">scales</a>%root_mb_new_o_wsc(i)             &amp;</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;         *(<a class="code" href="namespacetcs__common__warm.xhtml#a1b915253b39cbc88f61bb6685a397bde">scales</a>%wstar_up(i)**3)/                                        &amp;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;         (g*<a class="code" href="namespacetcs__common__warm.xhtml#a1b915253b39cbc88f61bb6685a397bde">scales</a>%zcld(i))                                               &amp;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;         +theta_inv_base(i)*wqr_inv(i)</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;      term_c = <a class="code" href="namespacetcs__parameters__warm.xhtml#a28b0a3392920e7259e03c2305c17fefb">mb_inv_a1</a>*<a class="code" href="namespacetcs__common__warm.xhtml#a1b915253b39cbc88f61bb6685a397bde">scales</a>%mb_new(i)*r_rsat_inv_base(i)</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;      <span class="comment">! Corrected version</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;      div_term2    = <a class="code" href="namespacetcs__constants.xhtml#aeaf6c45783b3213479b7d0e2d72f4d81">lc_o_cp</a>/<a class="code" href="namespacetcs__common__warm.xhtml#a81cdfdc8aa9c18bd5e2e556c9c944175">inv_m1</a>%exner_rho(i)                          &amp;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;         -(1.+c_virtual)*theta_inv_base(i)</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;      divisor_term = (1.+c_virtual*t_inv_base(i)*drsatdt_inv_base(i))</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;      <span class="comment">!</span></div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;      <span class="comment">! viscosity based value</span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;      <span class="comment">!</span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;      wthetavl_inv(i) = term_a</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;      <span class="comment">!</span></div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;      <span class="comment">! Liquid water flux correct for mixing ratio</span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;      <span class="comment">!</span></div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;      wql_inv(i) =(term_b-term_a)/div_term2</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;      wqt_inv_base(i) = ((1.+<a class="code" href="namespacetcs__constants.xhtml#aeaf6c45783b3213479b7d0e2d72f4d81">lc_o_cp</a>*drsatdt_inv_base(i))*                &amp;</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;         wql_inv(i)/<a class="code" href="namespacetcs__parameters__warm.xhtml#a1dd6f7e8b6fc1cc2cfb35703f4e58d68">sat_inv_a1</a>-term_c+                                    &amp;</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;         term_a*<a class="code" href="namespacetcs__common__warm.xhtml#a81cdfdc8aa9c18bd5e2e556c9c944175">inv_m1</a>%exner_rho(i)*drsatdt_inv_base(i))/divisor_term</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;      wthetal_inv(i) = term_a                                             &amp;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;         -c_virtual*theta_inv_base(i)*wqt_inv_base(i)</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;      <span class="comment">!</span></div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;      <span class="comment">! above implies</span></div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;      <span class="comment">!</span></div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;      wq_inv(i)=wqt_inv_base(i) - wql_inv(i)</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;      wtheta_inv_base(i) = wthetal_inv(i)                                 &amp;</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;         +<a class="code" href="namespacetcs__constants.xhtml#aeaf6c45783b3213479b7d0e2d72f4d81">lc_o_cp</a>*wql_inv(i)/<a class="code" href="namespacetcs__common__warm.xhtml#a81cdfdc8aa9c18bd5e2e556c9c944175">inv_m1</a>%exner_rho(i)</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;      <span class="comment">!</span></div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;      <span class="comment">! LEM derived wh_inv</span></div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;      <span class="comment">!</span></div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;      wh_inv(i) = <a class="code" href="namespacetcs__parameters__warm.xhtml#a51cbb3962eabdead1f550cb9a4cbead3">jump_inv_a2</a>*<a class="code" href="namespacetcs__common__warm.xhtml#a1b915253b39cbc88f61bb6685a397bde">scales</a>%mb_new(i)*dh_inv(i)</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;      <span class="comment">!</span></div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;      <span class="comment">! LEM derived wthetav_inv</span></div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;      <span class="comment">!</span></div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;      wthetav_inv(i) = <a class="code" href="namespacetcs__parameters__warm.xhtml#ae7591e3ed7b15abe7f4a3885c2a90905">jump_inv_a3</a>*<a class="code" href="namespacetcs__common__warm.xhtml#a1b915253b39cbc88f61bb6685a397bde">scales</a>%mb_new(i)*dthetav_inv2(i)</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="keywordflow">    END DO</span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="comment">! Note at base of inversion expect wtheta &amp; wthetal to be negative and</span></div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <span class="comment">! wq, wqt to be positive</span></div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;       <span class="comment">! Tracer flux at inversion - is this accurate (Do something slightly</span></div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    <span class="comment">! different for dtheta and dq across inversion ?)</span></div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <span class="comment">!</span></div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <span class="keywordflow">IF</span> (l_tracer) <span class="keywordflow">THEN</span></div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;      <span class="keywordflow">DO</span> ktra = 1,ntra</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        <span class="keywordflow">DO</span> i = 1,n_xx</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;          wtracer_inv(i,ktra) = -<a class="code" href="namespacetcs__parameters__warm.xhtml#aa0f270262bd1264424ed31f54ec7c8a3">jump_inv_a1</a>*<a class="code" href="namespacetcs__common__warm.xhtml#a1b915253b39cbc88f61bb6685a397bde">scales</a>%mb_new(i)*            &amp;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;             (<a class="code" href="namespacetcs__common__warm.xhtml#a3062d2ed9c720184c4173aafb651d775">inv</a>%tracer(i,ktra) - <a class="code" href="namespacetcs__common__warm.xhtml#a81cdfdc8aa9c18bd5e2e556c9c944175">inv_m1</a>%tracer(i,ktra))</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="keywordflow">        END DO</span></div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;<span class="keywordflow">      END DO</span></div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="keywordflow">    END IF</span></div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    <span class="keywordflow">IF</span> (lhook) <span class="keyword">CALL </span>dr_hook(<span class="stringliteral">&#39;TCS_INVERSION:CALC_INVERSION_WARM&#39;</span>,zhook_out,zhook_handle)</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    <span class="keywordflow">RETURN</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;<span class="keyword">  END SUBROUTINE </span><a class="code" href="namespacetcs__inversion.xhtml#a5ca0ecbf950d55cc5aec198fccb9b2ca">calc_inversion_warm</a></div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;<span class="keyword">END MODULE </span><a class="code" href="namespacetcs__inversion.xhtml" title="!&gt; Module to calculate values of theta, q etc in inversion. These ">tcs_inversion</a></div></div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
